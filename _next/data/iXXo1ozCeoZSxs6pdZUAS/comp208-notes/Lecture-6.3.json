{"pageProps":{"titles":["2.1 — Programming Basics","2.2 — Variables, Arithmetic & String operations","2.3 — Function Calls, Expressions","3.1 — Defining functions, Errors & Debugging","3.2 — Boolean Expressions, Comparison & Logical Operators","3.3 — Conditional execution using if statement","3.4 — for loop & String indexing, slicing","Python Style Guide","4.1 — Escape Characters & Controlling print()","4.2 — String methods & in operator","4.3 — while statement & Nested loops","4.4 — return statement & Importing modules","5.1 — Scope of Variables","5.2 — Lists & List Operations","5.3 — List Functions & Methods","5.4 — Tuples","6.1 — Object Identity, Immutability, Unpacking","6.2 — Sets","6.3 — Dictionaries","7.1 — Nested data structures & comparisons","7.2 — Iterables & comprehensions","7.3 — Reading and writing files","8.1 — Default arguments & Modules","8.2 — Handling Exceptions","8.3 — Object Oriented Programming (OOP)"],"slugs":["Lecture-2.1","Lecture-2.2","Lecture-2.3.1","Lecture-3.1","Lecture-3.2","Lecture-3.3","Lecture-3.4","style-guide","Lecture-4.1","Lecture-4.2","Lecture-4.3","Lecture-4.4","Lecture-5.1","Lecture-5.2","Lecture-5.3","Lecture-5.4","Lecture-6.1","Lecture-6.2","Lecture-6.3","Lecture-7.1","Lecture-7.2","Lecture-7.3","Lecture-8.1","Lecture-8.2","Lecture-8.3"],"post":{"title":"6.3 — Dictionaries","slug":"Lecture-6.3","content":"<h1>Dictionaries</h1>\n<h2>Motivation</h2>\n<p>Suppose we would like to store the following enrollment data:</p>\n<div class=\"my2\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>semester</th><th>no. of students</th></tr></thead><tbody><tr><td>F2017</td><td>816</td></tr><tr><td>W2018</td><td>613</td></tr><tr><td>F2018</td><td>709</td></tr><tr><td>W2019</td><td>590</td></tr><tr><td>F2019</td><td>744</td></tr></tbody></table></div>\n<p>We can do this using two lists for the two columns:</p>\n<python>semesters = ['F2017', 'W2018', 'F2018', 'W2019', 'F2019']\nstudents = [816, 613, 709, 590, 744]\n</python>\n<p>What should we do if we want to add new data?</p>\n<python>semesters.append(\"F2020\")\nstudents.append(550)\n# ['F2017', 'W2018', 'F2018', 'W2019', 'F2019', 'F2020']\n# [816, 613, 709, 590, 744, 550]\n</python>\n<p>What if we want to modify the value for a specific semester?</p>\n<python>idx = semesters.index(\"W2018\")\nstudents[idx] = 600\n</python>\n<p>What we if try to add an entry for a semester that already exists?<br>\nList allows duplicates so it does not check if a semester already exists.</p>\n<h3>Use a dictionary!</h3>\n<ul>\n<li>You can think of an item of a dictionary as a pair of objects:\n<ul>\n<li>The first object of the pair is called a <sc>key</sc>.</li>\n<li>The second object is referred to as the <sc>value</sc>.</li>\n</ul>\n</li>\n<li>A dictionary is called a <i>mapping</i> type because it maps key objects to value objects.</li>\n</ul>\n<python># A dictionary is created using a sequence of key-value pairs\nenrollment = {'F2017': 816, 'W2018': 613, 'F2018': 709,\n              'W2019': 590, 'F2019': 744}\nprint(type(enrollment))  # &#x3C;class 'dict'>\n\n# Number of key-value pairs\nprint(len(enrollment))  # 5\n\n# This is an empty dictionary, not a set!\nempty_dict = {}\nprint(len(empty_dict)) # 0\n</python>\n<h2>Note on keys and values</h2>\n<ul>\n<li>Keys\n<ul>\n<li>Have to be immutable objects.</li>\n<li>Have to be unique in a dictionary. A dictionary cannot contain two items with the same key.</li>\n</ul>\n</li>\n<li>Values\n<ul>\n<li>Values can be of any type; both mutable and immutable values are allowed.</li>\n<li>Many keys can map to the same value. i.e. values need not be unique.</li>\n</ul>\n</li>\n</ul>\n<h2>Dictionary Lookup</h2>\n<p>With lists, we can access an item of the list through its index.</p>\n<p>With dictionaries, we can access a value stored in the dictionary through the key associated with it.</p>\n<python>enrollment = {'F2017': 816, 'W2018': 613, 'F2018': 709,\n              'W2019': 590, 'F2019': 744}\n\n\nnum_students = enrollment[\"F2018\"]\nprint(num_students)  # 709\n\n# Key must exist in the dictionary if we want to access its value\nprint(enrollment[\"F2020\"])  # KeyError: 'F2020'\n</python>\n<h2>Adding an item</h2>\n<p>We can add a new item by specifying a key and a value: <inline-code>dictionary[key] = value</inline-code></p>\n<python>\n# A dictionary is created using a sequence of key-value pairs\nenrollment = {'F2018': 709, 'W2019': 590, 'F2019': 744}\n\n\n# add an item\nenrollment[\"F2020\"] = 800\n\n# add another item\nenrollment[\"W2020\"] = 900\n\nprint(enrollment)\n# {'F2018': 709, 'W2019': 590, 'F2019': 744, 'F2020': 800, 'W2020': 900}\n\n# change an existing item\nenrollment[\"F2018\"] = 700\n\nprint(enrollment)\n# {'F2018': 700, 'W2019': 590, 'F2019': 744, 'F2020': 800, 'W2020': 900}\n</python>\n<h2>Removing an item</h2>\n<p>We can delete an item using the following syntax:<br>\n<inline-code>del dictionary[key]</inline-code></p>\n<python>enrollment = {'F2018': 709, 'W2019': 590, 'F2019': 744}\n\n\ndel enrollment[\"F2019\"]\n\nprint(enrollment)\n# {'F2018': 709, 'W2019': 590}\n\ndel enrollment[\"F2020\"]\n# KeyError: 'F2020'\n\n</python>\n<h2>Examples</h2>\n<p>What will be printed in the following examples?</p>\n<div class=\"flex\"><div class=\"flexc px1\"><python>d = {'x' : 0, 'y' : 1, 'z' : 2} \nx = d['y']\nprint(x)\n</python><output>1\n</output></div><div class=\"flexc px1\"><python>d = {'x' : 0, 'y' : 1, 'z' : 2} \nx = d[0]\nprint(x)\n</python><output>KeyError: 0\n</output></div></div>\n<h2>Check for membership</h2>\n<p>We can check if a key is part of a dictionary using the <inline-code>in</inline-code> and <inline-code>not in</inline-code> operators.</p>\n<python>d = {'x' : 0, 'y' : 1, 'z' : 2} \nprint('x' in d) #  True \nprint(0 in d) #  False\nprint(0 not in d) #  True\n</python>\n<h2>Iterating through a dictionary</h2>\n<p>We can use a for loop to iterate through all the keys in a dictionary.</p>\n<python>enrollment = {'F2018': 709, 'W2019': 590, 'F2019': 744}\n\nfor key in enrollment:\n    print(key, \"->\", enrollment[key])\n</python>\n<output>F2018 -> 709\nW2019 -> 590\nF2019 -> 744\n</output>\n<h2>Functions and methods for dictionaries</h2>\n<python># dict(L): creates and returns a dictionary using a list L of tuples, \n#   where each tuple is of length 2 in form of (key, value).\npairs = [(\"Montreal\", 1.78), (\"Rome\", 2.87), (\"Tokyo\", 9.27)]\nd = dict(pairs)\nprint(d)\n#  {'Montreal': 1.78, 'Rome': 2.87, 'Tokyo': 9.27}\nprint(d[\"Rome\"])\n# 2.87\n\n\n# dict.keys(): returns a iterable (sequence) of all keys\nkeys = list(d.keys())\nprint(keys)  # ['Montreal', 'Rome', 'Tokyo']\n\n\n# dict.values(): returns a iterable (sequence) of all values\nvalues = list(d.values())\nprint(values)  # [1.78, 2.87, 9.27]\n\n\n# dict.items(): returns a iterable (sequence) of tuples (key, value) \n#   for all items in the dictionary\nd = {'Montreal': 1.78, 'Rome': 2.87, 'Tokyo': 9.27}\npairs = list(d.items())\nprint(pairs)\n# [('Montreal', 1.78), ('Rome', 2.87), ('Tokyo', 9.27)]\n</python>\n<p>For more methods, help <inline-code>help(dict)</inline-code>.</p>\n<p>Using the above methods to iterate over a dictionary:</p>\n<python>d = {'Montreal': 1.78, 'Rome': 2.87, 'Tokyo': 9.27}\ntotal = 0\nfor val in d.values():\n    total += val\n\nprint(total)  # 13.92\n</python>\n<p>Making use of tuple unpacking in the for loop:</p>\n<python>d = {'Montreal': 1.78, 'Rome': 2.87, 'Tokyo': 9.27}\n\n# d.items() returns a sequence of key-value tuples\nfor tup in d.items():\n    key = tup[0]\n    val = tup[1]\n    print(key, \"->\", val)\n\n# Montreal -> 1.78\n# Rome -> 2.87\n# Tokyo -> 9.27\n\n\n# Unpack tuple into two variables: key and val\nfor key, val in d.items():\n    print(key, \"->\", val)\n\n# Montreal -> 1.78\n# Rome -> 2.87\n# Tokyo -> 9.27\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}