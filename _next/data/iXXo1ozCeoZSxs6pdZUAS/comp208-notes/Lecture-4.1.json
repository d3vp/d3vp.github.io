{"pageProps":{"titles":["2.1 — Programming Basics","2.2 — Variables, Arithmetic & String operations","2.3 — Function Calls, Expressions","3.1 — Defining functions, Errors & Debugging","3.2 — Boolean Expressions, Comparison & Logical Operators","3.3 — Conditional execution using if statement","3.4 — for loop & String indexing, slicing","Python Style Guide","4.1 — Escape Characters & Controlling print()","4.2 — String methods & in operator","4.3 — while statement & Nested loops","4.4 — return statement & Importing modules","5.1 — Scope of Variables","5.2 — Lists & List Operations","5.3 — List Functions & Methods","5.4 — Tuples","6.1 — Object Identity, Immutability, Unpacking","6.2 — Sets","6.3 — Dictionaries","7.1 — Nested data structures & comparisons","7.2 — Iterables & comprehensions","7.3 — Reading and writing files","8.1 — Default arguments & Modules","8.2 — Handling Exceptions","8.3 — Object Oriented Programming (OOP)"],"slugs":["Lecture-2.1","Lecture-2.2","Lecture-2.3.1","Lecture-3.1","Lecture-3.2","Lecture-3.3","Lecture-3.4","style-guide","Lecture-4.1","Lecture-4.2","Lecture-4.3","Lecture-4.4","Lecture-5.1","Lecture-5.2","Lecture-5.3","Lecture-5.4","Lecture-6.1","Lecture-6.2","Lecture-6.3","Lecture-7.1","Lecture-7.2","Lecture-7.3","Lecture-8.1","Lecture-8.2","Lecture-8.3"],"post":{"title":"4.1 — Escape Characters & Controlling print()","slug":"Lecture-4.1","content":"<h1>ASCII code and special characters</h1>\n<p>Recall ASCII table from a previous lecture:</p>\n<img style=\"margin-left: 0em; width: 100%;\" src=\"module-1/ASCII-Table.png\">\n<p>Python has built-in functions to convert ASCII code (decimal) to/from a single character.</p>\n<python>print(ord(\"a\"))  # 97, the ASCII code for letter \"a\"\nprint(ord(\"A\"))  # 65\nprint(ord(\"$\"))  # 36\n\nprint(ord(\"hi\"))  # doesn't work for more than one character\n# TypeError: ord() expected a character, but string of length 2 found\n\nprint(chr(70))  # F, the character for ASCII code 70\n\nprint(chr(103))  # g\n</python>\n<h3>Example</h3>\n<p>Write a program that  shifts each letter in a string to the left by 3 steps according to ASCII table.<br>\ni.e. <code>A → >, B → ?, C → @, D → A, E → B</code>, etc.</p>\n<python>word = \"Python\"\n\nresult = \"\"\nfor i in range(len(word)):\n    code = ord(word[i])  # Get ASCII code for the letter\n    code = code - 3  # Shift code by 3\n    # Get letter for the code and add it to result:\n    result = result + chr(code)  \n    \nprint(result)  # Mvqelk\n\n</python>\n<h2>Escape characters</h2>\n<p>There are special characters such as shown below, which we cannot direct enter in a string:</p>\n<ul>\n<li><i>newline character</i>: This is the character representing “enter” or “return” key.</li>\n<li><i>tab character</i>: This is the character representing “tab” key.</li>\n</ul>\n<p>Such special character can be used in Python using escape characters.</p>\n<python># Trying to enter a newline character directly fails:\nmessage = \"Hello\nworld\"\n</python>\n<output>    message = \"Hello\n                   ^\nSyntaxError: EOL while scanning string literal\n</output>\n<p>To include a newline character in a string we can use the escape character <inline-code>\\n</inline-code> in the string:</p>\n<python>message = \"hello\\nworld\"\nprint(message)\n</python>\n<output>hello\nworld\n</output>\n<p><inline-code>\\n</inline-code> is stored as a single character even though it looks like two.</p>\n<python>print(ord(\"\\n\"))  # 10\n</python>\n<p>Another escape character is <inline-code>\\t</inline-code> which represents the tab character.<br>\nIt is useful as a separator when displaying values:</p>\n<python># print uses space as separator by default\nprint(\"Khalid\", 85)\nprint(\"Reza\", 90)\n\n# Using tab as separator\nprint(\"Khalid\", 85, sep=\"\\t\")\nprint(\"Reza\", 90, sep=\"\\t\")\n</python>\n<output>Khalid 85\nReza 90\nKhalid\t85\nReza\t90\n</output>\n<h1>Controlling print() function</h1>\n<p>In example above, we used a <sc>keyword argument</sc> <inline-code>sep=</inline-code> to tell print which separator to use between values.</p>\n<p>Unlike the usual arguments, keyword arguments are given in the form <inline-code>name=value</inline-code>; in the example <inline-code>sep</inline-code> is the name of argument and <inline-code>\"\\t\"</inline-code> is the value.</p>\n<python># separator can be any string\nprint(\"Alice\", 90, 3.14, sep=\",\")\n# Alice,90,3.14\n\nprint(\"Alice\", 90, 3.14, sep=\"|\")\n# Alice|90|3.14\n\n# even longer than one character\nprint(\"Alice\", 90, 3.14, sep=\"-----\")\n# Alice-----90-----3.14\n\nprint(\"Alice\", 90, 3.14, sep=\"\")  # No separator!\n# Alice903.14\n</python>\n<p>By default, <inline-code>print()</inline-code> function displays a newline  character <inline-code>\\n</inline-code> at end of line.</p>\n<div class=\"flex\"><python>print(\"hello\")  # \"\\n\" is displayed after \"o\"\nprint()  # no arguments, just prints \"\\n\"\nprint(\"world\") # \"\\n\" is displayed after \"d\"\n</python><output>hello\n\nworld\n</output></div>\n<p>We can change the <inline-code>end</inline-code> character using another keyword argument to <inline-code>print()</inline-code> function, <inline-code>end=</inline-code>.</p>\n<div class=\"flex\"><python>print(\"A sequence of numbers:\")\nprint(1, end=\",\")\nprint(4, end=\",\")\nprint(9, end=\",\")\n</python><output>A sequence of numbers:\n1,4,9,\n</output></div>\n<p>This is useful in a loop:</p>\n<python>N = 10\nfor i in range(N):\n    print(i*i, end=\", \")  # comma and a space\n</python>\n<output>0, 1, 4, 9, 16, 25, 36, 49, 64, 81, \n</output>\n<div class=\"p2 bggreen\"><p>Change the above example to not print the last comma. For example,</p><output>0, 1, 4, 9, 16, 25, 36, 49, 64, 81\n</output><solution><python>N = 10\nfor i in range(N):\n    if i == N - 1:\n        print(i * i, end=\"\")\n    else:\n        print(i * i, end=\", \")\n</python></solution></div>\n<h1>Multiline strings</h1>\n<p>Using <inline-code>\\n</inline-code>, we can create a single string that contains all of the following lines:</p>\n<python>shopping_list = \"Shopping list\\n- Milk\\n- Eggs\\n- Apples\\n\"\nprint(shopping_list)\n</python>\n<output>Shopping list\n- Milk\n- Eggs\n- Apples\n</output>\n<p>Python provides a better create multiline strings using <i>triple quotes</i>: <inline-code>'''</inline-code> or <inline-code>\"\"\"</inline-code>.</p>\n<python>shopping_list = '''Shopping list\n- Milk\n- Eggs\n- Apples\n'''\n\n# OR the following, both are same\n\nshopping_list = \"\"\"Shopping list\n- Milk\n- Eggs\n- Apples\n\"\"\"\n\nprint(shopping_list)\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}