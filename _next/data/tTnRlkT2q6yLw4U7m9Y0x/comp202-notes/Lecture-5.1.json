{"pageProps":{"titles":["L1.1 — Computer and Programming Basics","L1.2 — Variables & Expressions","L2.1 — Control Flow Statements","Python Style Guide","May 14 — Problem Set","L2.2 — print(), String methods & while loop","May 17 — Problem Set","L3.1 — More loops & Defining functions","May 19 — Problem Set","L3.2 — Lists","May 21 — Problem Set","L4.1 — Tuples, Dictionaries, Sets","May 26 — Problem Set","May 28 — Problem Set","L4.2 — Nested data structures","June 2 — Problem Set","June 4 — Problem Set","L5.1 — Handling Exceptions, File IO","L5.2 — Comparing data structures, Writing modules, Matplotlib","June 9 — Problem Set"],"slugs":["Lecture-1.1","Lecture-1.2","Lecture-2.1","style-guide","_May14-problem-set","Lecture-2.2","_May17-problem-set","Lecture-3.1","_May19-problem-set","Lecture-3.2","_May21-problem-set","Lecture-4.1","_May26-problem-set","_May28-problem-set","Lecture-4.2","_June2-problem-set","_June4-problem-set","Lecture-5.1","Lecture-5.2","_June9-problem-set"],"post":{"title":"L5.1 — Handling Exceptions, File IO","slug":"Lecture-5.1","content":"<h1>Types of Errors</h1>\n<ul>\n<li>Syntax Errors: When syntax is incorrect such as wrong punctuations, invalid characters, indentation etc.\n<ul>\n<li>Program does not even run in this case.</li>\n</ul>\n</li>\n<li>Runtime Errors, also called <sc>Exceptions</sc>, occur when there is a problem in the program during execution.\n<ul>\n<li>All code executes until an exception occurs.</li>\n</ul>\n</li>\n<li>Semantic or Logic errors are said to occur when a program executes without a problem but does not produce correct output as expected.</li>\n</ul>\n<p>In Python, all exceptions are objects of some exception type.</p>\n<p>Common exceptions are:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Exception Type</th><th>Meaning</th></tr></thead><tbody><tr><td>IndexError</td><td>index is out of range in a list or tuple</td></tr><tr><td>KeyError</td><td>Specified key does not appear in a dictionary</td></tr><tr><td>NameError</td><td>Specified local or global name does not exist</td></tr><tr><td>TypeError</td><td>Operation or function applied to an inappropriate type</td></tr><tr><td>ValueError</td><td>Operation or function applied to correct type but inappropriate value</td></tr><tr><td>ZeroDivisionError</td><td>Second operand of division or remainder operation is zero</td></tr></tbody></table>\n<python># Proof that IndexError, NameError etc are types.\n# We create objects of these types. \n# Though this example does not do anything useful :)\n>>> a = IndexError() # constructor of IndexError\n>>> print(a, type(a))\n &#x3C;class 'IndexError'>\n</python>\n<h2>Exception Traceback</h2>\n<p>Traceback is an error message that allows tracing an exception back to its origin</p>\n<div class=\"flex\"><python>def func():\n   return 5 / 0\n\ndef main():\n   return func()\n\nmain()\n</python><output>Traceback (most recent call last):\n  File \"myprogram.py\", line 7, in &#x3C;module>\n    main()\n  File \"myprogram.py\", line 5, in main\n    return func()\n  File \"myprogram.py\", line 2, in func\n    return 5 / 0\nZeroDivisionError: division by zero\n</output></div>\n<h2>Using <code>try</code> statement to handle errors</h2>\n<python>try:\n    # try-block: code that may cause runtime error\nexcept:\n    # except-block: handle the error here\n</python>\n<ul>\n<li>Identify a code that can potentially produce errors</li>\n<li>Put that code in <inline-code>try-block</inline-code>.</li>\n<li>Write code in <inline-code>except-block</inline-code> to handle the case when error occurs</li>\n</ul>\n<h3>Example:</h3>\n<p>Suppose we want to take a number from user input:</p>\n<python>number = float(input('Please enter a number: '))\n</python>\n<output>ValueError: could not convert string to float: 'abcd'\n</output>\n<p>Since we know that <inline-code>float()</inline-code> function throws the <inline-code>ValueError</inline-code>, we can handle that error as follows.</p>\n<python>try:\n   number = float(input('Please enter a number: '))\n   # the following line only executes when float() function\n   # worked i.e. it did not throw ValueError\n   print(\"You entered: \", number)  \nexcept ValueError:\n   print(\"Please enter valid number!\")\n</python>\n<p>There are two cases that may happen when we run the code above:</p>\n<div class=\"flex ml-2\"><div class=\"flexc\"><p></p><div class=\"sans\">No error occurs in try-block</div>\nexcept-block is not executed.<p></p><output>Please enter a number: -3.1415\nYou entered:  -3.1415\n</output></div><div class=\"flexc\"><p></p><div class=\"sans\">Error occurs in try-block</div>\nexcept-block is executed.<p></p><output>Please enter a number: abcd\nPlease enter valid number!\n</output></div></div>\n<div class=\"my2 p2 bggreen\"><p><span class=\"sans\">Example</span></p><p>Using try statement in a loop, ask user to input a number (float) until they enter a correct number.<br>\nYou can use a break statement in the try-block.</p><output>Please enter a number: abcd\nInvalid number!\nPlease enter a number: -1.61\nCorrect number entered: -1.61\n</output><solution><python>while True: # Loop forever\n   try:\n       number = float(input('Please enter a number: '))\n       break  # Get out of the loop\n   except:\n       print('Invalid number!')\n\nprint(\"Correct number entered:\", number)\n</python></solution></div>\n<h2>Uncaught exceptions are thrown as usual</h2>\n<p>If an exception occurs in try-block but it is not the same type as in the except part, the exception occurs as usual i.e. except-block is not executed and program crashes.</p>\n<python>student_grades = {\"Reza\": 90.0}\n\ntry:\n    name = input('Enter name: ')\n    grade = float(input(\"Enter grade to add: \"))\n    student_grades[name] += grade\n    print(student_grades)\nexcept ValueError:\n    print('Grade should be a number!')\n</python>\n<output>Enter name: Dev\nEnter grade to add: 5\nTraceback (most recent call last):\n  File \"myprogram.py\", line 20, in &#x3C;module>\n    student_grades[name] += grade\nKeyError: 'Dev'\n</output>\n<h2>Catching multiple exceptions</h2>\n<p>Except blocks can be chained to handle multiple exceptions that may occur in try-block.</p>\n<p>Depending on the exception that occurs, only one of the except-blocks executes. Others are skipped.</p>\n<python>student_grades = {\"Reza\": 90.0}\n\ntry:\n    name = input('Enter name: ')\n    grade = float(input(\"Enter grade to add: \"))\n    student_grades[name] += grade\n    print(student_grades)\nexcept ValueError:\n    print('Grade should be a number!')\nexcept KeyError:\n    print(name, \"was not found.\")\n</python>\n<div class=\"flex\"><div class=\"flexc\"><p><span class=\"sans\">No error</span></p><output>Enter name: Reza\nEnter grade to add: 5\n{'Reza': 95.0}\n</output></div><div class=\"flexc\"><p><span class=\"sans\">ValueError</span></p><output>Enter name: Reza\nEnter grade to add: 10x\nGrade should be a number!\n</output></div><div class=\"flexc\"><p><span class=\"sans\">KeyError</span></p><output>Enter name: Dev\nEnter grade to add: 5\nDev was not found.\n</output></div></div>\n<h2>Default except block</h2>\n<p>We can have a default except block without any exception type to handle exception of any kind.<br>\nAgain, only one of the except-blocks executes at any time.</p>\n<div class=\"flex\"><python>student_grades = {\"Reza\": 90.0}\n\ntry:\n    name = input('Enter name: ')\n    grade = float(input(\"Enter grade to add: \"))\n    student_grades[name] += grade\n    print(no_such_variable)  # error here\nexcept ValueError:\n    print('Grade should be a number!')\nexcept KeyError:\n    print(name, \"was not found.\")\nexcept:\n    print(\"Some error occured.\")\n</python><output>Enter name: Reza\nEnter grade to add: 5\nSome error occured.\n</output></div>\n<p>In general it is <i>not a good practice</i> to catch all errors using a default block.<br>\nInstead, specific errors should be handled explicitly by using a exception type.</p>\n<h2>When to use try statement</h2>\n<ul>\n<li>It is a bad practice to use a try/except to “hide” bugs in the program!</li>\n<li>try/except should be used when we know that a specific error may occurs and there is no other way to handle it</li>\n</ul>\n<div class=\"flex wfc ml-2\"><div class=\"flexc mr2\"><p><span class=\"sans\">Good practice</span></p><python>try:\n    number = float(input(\"Enter a number: \"))\nexcept ValueError:\n    print('Number is not valid!')\n</python><p>because there is no other better way to check if a string contains a valid number.</p></div><div class=\"flexc\"><p><span class=\"sans\">Not a good practice</span></p><python>student_grades = {\"Reza\": 90.0}\ntry:\n    name = input('Enter name: ')\n    student_grades[name] += 10\nexcept KeyError:\n    print(name, \"was not found.\")\n</python><p>because there is a simpler way to do this:</p><python>student_grades = {\"Reza\": 90.0}\n\nname = input('Enter name: ')\n\nif name in student_grades:\n    student_grades[name] += 10\nelse:\n    print(name, \"was not found.\")\n</python></div></div>\n<h2>Where do Exceptions come from?</h2>\n<p>We can “raise” or throw an exception from our code to tell Python that an unexpected case or error has occurred.</p>\n<p>For example, we can redefine <inline-code>euclidean_distance</inline-code> function to raise a <inline-code>ValueError</inline-code> if length of any argument list is not 2.</p>\n<python>def euclidean_distance(p1, p2):\n    \"\"\"\n    Computes Euclidean distance between two 2D points.\n\n    Args:\n       p1: list/tuple of length 2\n       p2: list/tuple of length 2\n\n    Returns: the euclidean distance as a float\n\n    Raises:\n       ValueError if length of arguments is not 2 \n    \"\"\"\n    if len(p1) != 2 or len(p2) != 2:\n        raise ValueError(\"Points must be lists or tuples or length 2.\")\n\n    d = (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2\n    return d ** 0.5\n\n\ndist = euclidean_distance([1, 1], [2, 3])\nprint(dist)\n\ndist = euclidean_distance([1], [2, 3])\nprint(dist)\n</python>\n<output>2.23606797749979\nValueError: Points must be lists or tuples or length 2.\n</output>\n<h3>Example:</h3>\n<p>How exceptions are raised in Python modules?<br>\n<a href=\"https://github.com/python/cpython/blob/main/Lib/random.py\">https://github.com/python/cpython/blob/main/Lib/random.py</a></p>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>Reading and writing files</h1>\n<p>A file is a sequence of characters or bytes stored on a storage device such as a hard disk.</p>\n<h2>How to work with a file in Python</h2>\n<ul>\n<li>Open the file using the built-in function <inline-code>open()</inline-code></li>\n<li>Read data from the file or write data into the file</li>\n<li>Close the file</li>\n</ul>\n<h2>Opening a file with <code>open()</code></h2>\n<p>Built-in function <inline-code>open(filename, mode)</inline-code>:</p>\n<ul>\n<li>takes the following arguments:\n<ul>\n<li><inline-code>filename</inline-code> (str): name of the file to read (if the file is in the current directory) or full path to the file.</li>\n<li><inline-code>mode</inline-code> (str): <inline-code>'r'</inline-code> for reading, <inline-code>'w'</inline-code> for writing, <inline-code>'a'</inline-code> for appending. If this argument is omitted, it defaults to <inline-code>'r'</inline-code></li>\n</ul>\n</li>\n<li>Returns: a <sc>file object</sc> which allows reading from/writing to the file.</li>\n</ul>\n<python>filename = \"quotes.txt\"\nfobj = open(filename, \"r\") # mode \"r\" for reading\n</python>\n<p>For the following examples, download the file <a href=\"lecture5.1/quotes.txt\">quotes.txt</a> and keep it in the same directory as the python program.</p>\n<h2>Reading a file with <code>read()</code> method of file object</h2>\n<p>File objects have a method <inline-code>read(size)</inline-code> that takes one optional argument:</p>\n<ul>\n<li><inline-code>size</inline-code>: the number of characters to read from the file\n<ul>\n<li>If omitted, the entire file will be read.</li>\n</ul>\n</li>\n<li>Returns: a string containing the characters in the file</li>\n</ul>\n<h2>Closing a file with <code>close()</code> method of file object</h2>\n<ul>\n<li><inline-code>close()</inline-code> method takes no argument and returns nothing. It close the file associated with the file object</li>\n</ul>\n<python>filename = \"quotes.txt\"\nfobj = open(filename, \"r\") # mode \"r\" for reading \n\nfile_content = fobj.read() # read whole file as a string\nprint(file_content) # print the string \n\nfobj.close()  # close the file\n</python>\n<h3>Why close a file?</h3>\n<p>Closing the file is important for many reasons</p>\n<ul>\n<li>Operating System (e.g Windows, Mac OS) may lock the file until it is closed (Other programs may not use the file as long as it is open)</li>\n<li>Too many open files may cause your program/computer to slow down</li>\n</ul>\n<h2>Reading a file line by line</h2>\n<ul>\n<li>The file object returned by <inline-code>open()</inline-code> is an iterable that can produce a sequence of lines in the file.</li>\n<li>So we can use the file object in a <inline-code>for</inline-code> loop.</li>\n<li>Each line will have a trailing newline (<inline-code>\"\\n\"</inline-code>) character.</li>\n</ul>\n<python>filename = \"quotes.txt\"\nfobj = open(filename, \"r\")\n\nfor line in fobj: # file object is iterable\n    line = line.rstrip()  # Remove trailing \"\\n\" character\n    print(line) \n\nfobj.close()\n</python>\n<h2>Reading a file as list of lines</h2>\n<python>filename = \"quotes.txt\"\nfobj = open(filename, \"r\")\n\n# Read whole file, split into lines and return a list of lines\nall_lines = fobj.readlines() \n\n# Each line will have a trailing newline character \"\\n\"\n\nprint(all_lines)\n\nfobj.close()\n</python>\n<h2>Writing text to a file in Python</h2>\n<p>To write to a file in Python:</p>\n<ul>\n<li>Open the file with open() using mode <inline-code>'w'</inline-code> for “write.”\n<ul>\n<li>If the file does not exist, it will be created.</li>\n<li><span class=\"bgred px05\">If the file exists, it will be deleted and replaced with an empty file.</span></li>\n</ul>\n</li>\n<li>Call <inline-code>write(s)</inline-code> method on the file object to write the string <inline-code>s</inline-code> into the file.</li>\n<li>Close the file.</li>\n</ul>\n<python>filename = \"grades.txt\"\nfobj = open(filename, \"w\") # mode \"w\" for writing \n\nfobj.write(\"Name,A1,A2,A3\\n\") # write line to file\n\nfobj.write(\"Reza,90,80,100\\n\") # write another line\n\nfobj.write(\"Dev,100,90,100\\n\") # write another line\n\n\nfobj.close()\n</python>\n<h2>Appending text to a file in Python</h2>\n<p>Appending means adding text to the end of a file without changing/deleting text already present in the file.</p>\n<ul>\n<li>Open the file with open() using mode <inline-code>'a'</inline-code> for “append.”\n<ul>\n<li>If the file does not exist, it will be created.</li>\n<li>If the file exists, it is NOT deleted.</li>\n</ul>\n</li>\n<li>Call <inline-code>write(s)</inline-code> method on the file object, to write the string <inline-code>s</inline-code> at the end of the file.</li>\n<li>Close the file.</li>\n</ul>\n<python>filename = \"grades.txt\"\nfobj = open(filename, \"a\") # mode \"a\" for appending \n\nfobj.write(\"Khalid,85,90,97\\n\") \n\nfobj.close()\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}