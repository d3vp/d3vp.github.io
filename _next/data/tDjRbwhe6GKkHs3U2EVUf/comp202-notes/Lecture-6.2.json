{"pageProps":{"allSlugs":[["Lecture-1.1",[{"title":"1.1 — Programming Basics","slug":"Lecture-1.1"}]],["Lecture-1.2",[{"title":"1.2 — Variables, Arithmetic & String operations","slug":"Lecture-1.2"}]],["Lecture-2.1",[{"title":"2.1 — Function calls, Built-in functions, Expressions","slug":"Lecture-2.1"}]],["Lecture-2.2",[{"title":"2.2 —  Defining functions, Comparing Values, Control flow statements","slug":"Lecture-2.2"}]],["Lecture-2.3",[{"title":"2.3 — return vs. print, while statement","slug":"Lecture-2.3"}]],["Lecture-3.1",[{"title":"3.1 — Modules, String methods, break & continue statements","slug":"Lecture-3.1"}]],["Lecture-3.2",[{"title":"3.2 — Controlling print(), Nested Loops","slug":"Lecture-3.2"}]],["Lecture-3.3",[{"title":"3.3 — Scope of variables, Lists","slug":"Lecture-3.3"}]],["Lecture-4.1",[{"title":"4.1 — List methods, Tuples, Immutable objects","slug":"Lecture-4.1"}]],["Lecture-4.2",[{"title":"4.2 — Sets, Dictionaries","slug":"Lecture-4.2"}]],["Lecture-5.1",[{"title":"5.1 — Iterables, More dict & list operations, Nested lists","slug":"Lecture-5.1"}]],["Lecture-5.2",[{"title":"5.2 — Nested data structures, Comprehensions","slug":"Lecture-5.2"}]],["Lecture-5.3",[{"title":"5.3 — Sorting, Modules, Reading & Writing Files","slug":"Lecture-5.3"}]],["Lecture-6.1",[{"title":"6.1 — Files, Shallow vs. deep copy","slug":"Lecture-6.1"}]],["Lecture-6.2",[{"title":"6.2 — Handling exceptions, Object Oriented Programming (OOP)","slug":"Lecture-6.2"}]],["Lecture-7.1",[{"title":"7.1 — Object Oriented Programming (OOP)","slug":"Lecture-7.1"}]],["Lecture-7.2",[{"title":"7.2 — More OOP, Plotting using Matplotlib","slug":"Lecture-7.2"}]],["Lecture-7.3",[{"title":"7.3 — NumPy & Misc. topics","slug":"Lecture-7.3"}]]],"post":{"slug":"Lecture-6.2","content":"<slide class=\"ppt-f90 slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"runtime-errors-exceptions-\">Runtime Errors (Exceptions) </h2><p>In Python, all exceptions are objects of some exception type.<br>\nCommon exceptions are:</p><div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Exception Type</th><th>Meaning</th></tr></thead><tbody><tr><td>IndexError</td><td>Index is out of range in a list or tuple</td></tr><tr><td>KeyError</td><td>Specified key does not appear in a dictionary</td></tr><tr><td>NameError</td><td>Specified local or global name does not exist</td></tr><tr><td>TypeError</td><td>Operation or function applied to an inappropriate type</td></tr><tr><td>ValueError</td><td>Operation or function applied to correct type but inappropriate value</td></tr><tr><td>ZeroDivisionError</td><td>Second operand of division or remainder operation is zero</td></tr></tbody></table></div></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"exception-traceback\">Exception Traceback</h2><p>Traceback is an error message that allows tracing an exception back to its origin</p><hgrid cols=\"1fr 2fr\"><python>def func():\n   return 5 / 0\n\ndef main():\n   return func()\n\nmain()\n</python><output>Traceback (most recent call last):\n  File \"myprogram.py\", line 7, in &#x3C;module>\n    main()\n  File \"myprogram.py\", line 5, in main\n    return func()\n  File \"myprogram.py\", line 2, in func\n    return 5 / 0\nZeroDivisionError: division by zero\n</output></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"using-try-statement-to-handle-errors\">Using <inline-code>try</inline-code> statement to handle errors</h2><python>try:\n    # try-block: code that may cause runtime error\nexcept:\n    # except-block: handle the error here\n</python><ul>\n<li>Identify a code that can potentially produce errors</li>\n<li>Put that code in <inline-code>try-block</inline-code>.</li>\n<li>Write code in <inline-code>except-block</inline-code> to handle the case when error occurs</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"example\">Example</h2><p>Suppose we want to take a number from user input:</p><python>number = float(input('Please enter a number: '))\n</python><output>ValueError: could not convert string to float: 'abcd'\n</output><p>Since we know that <inline-code>float()</inline-code> function throws the <inline-code>ValueError</inline-code>, we can handle that error using <inline-code>try</inline-code> statement.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"\"></h2><python>try:\n   number = float(input('Please enter a number: '))\n   # the following line only executes when float() function\n   # worked i.e. it did not throw ValueError\n   print(\"You entered: \", number)  \nexcept ValueError:\n   print(\"Please enter valid number!\")\n</python><p>There are two cases when we run the code above:</p><div class=\"flex ml-2\"><div class=\"flexc\"><p></p><div class=\"sans\">No error occurs in try-block</div>\nexcept-block is not executed.<p></p><output>Please enter a number: -3.1415\nYou entered:  -3.1415\n</output></div><div class=\"flexc\"><p></p><div class=\"sans\">Error occurs in try-block</div>\nexcept-block is executed.<p></p><output>Please enter a number: abcd\nPlease enter valid number!\n</output></div></div></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-1\"></h2><greenbox><p>Using try statement in a loop, ask user to input a number (float) until they enter a valid number.<br>\nYou can use a break statement in the try-block.</p></greenbox><output>Please enter a number: abcd\nInvalid number!\nPlease enter a number: -1.61\nCorrect number entered: -1.61\n</output></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-2\"></h2><solution><python>while True: # Loop forever\n   try:\n       number = float(input('Please enter a number: '))\n       break  # Get out of the loop\n   except ValueError:\n       print('Invalid number!')\n\nprint(\"Correct number entered:\", number)\n</python></solution></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"unhandled-exceptions-are-thrown-as-usual\">Unhandled exceptions are thrown as usual</h2><p>If an exception occurs in try-block but it is not the same type as in the except part, the exception occurs as usual i.e. except-block is not executed and program crashes.</p><hgrid class=\"ppt-f80\" margin=\"1em 0 1em -2em\"><python>student_grades = {\"Reza\": 90.0}\n\ntry:\n    name = input('Enter name: ')\n    grade = float(input(\"Enter grade to add: \"))\n    student_grades[name] += grade\n    print(student_grades)\nexcept ValueError:\n    print('Grade should be a number!')\n</python><output>Enter name: Dev\nEnter grade to add: 5\nTraceback (most recent call last):\n  File \"myprogram.py\", line 20\n    student_grades[name] += grade\nKeyError: 'Dev'\n</output></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"catching-multiple-exceptions\">Catching multiple exceptions</h2><p>Except blocks can be chained to handle multiple exceptions that may occur in try-block.</p><p>Depending on the exception that occurs, only one of the except-blocks executes. Others are skipped.</p><python>try:\n    # try-block: code that may cause runtime error(s)\nexcept Error1:\n    # handle the Error1 here\nexcept Error2:\n    # handle the Error2 here\n</python></slide>\n<slide class=\"ppt-f90 slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-3\"></h2><python>student_grades = {\"Reza\": 90.0}\n\ntry:\n    name = input('Enter name: ')\n    grade = float(input(\"Enter grade to add: \"))\n    student_grades[name] += grade\n    print(student_grades)\nexcept ValueError:\n    print('Grade should be a number!')\nexcept KeyError:\n    print(name, \"was not found.\")\n</python><div class=\"flex\" style=\"width: 110%; margin-left: -2em;\"><div class=\"flexc\"><p><span class=\"sans\">No error</span></p><output>Enter name: Reza\nEnter grade to add: 5\n{'Reza': 95.0}\n</output></div><div class=\"flexc\"><p><span class=\"sans\">ValueError</span></p><output>Enter name: Reza\nEnter grade to add: 10x\nGrade should be a number!\n</output></div><div class=\"flexc\"><p><span class=\"sans\">KeyError</span></p><output>Enter name: Dev\nEnter grade to add: 5\nDev was not found.\n</output></div></div></slide>\n<slide class=\"ppt-f95 slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-4\"></h2><p>We can have a <b>default except block</b> without any exception type to handle exception of any kind.</p><hgrid cols=\"3fr 1fr\" margin=\"0.5em 0 1em -2em\"><python>student_grades = {\"Reza\": 90.0}\n\ntry:\n    name = input('Enter name: ')\n    grade = float(input(\"Enter grade to add: \"))\n    student_grades[name] += grade\n    print(no_such_variable)  # error here\nexcept ValueError:\n    print('Grade should be a number!')\nexcept KeyError:\n    print(name, \"was not found.\")\nexcept:\n    print(\"Some error occured.\")\n</python><div><output>Enter name: Reza\nEnter grade to add: 5\nSome error occured.\n</output><p>(Again, only one of the except-blocks will execute.)</p></div></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-5\"></h2><redbox><p>In general it is <em>not a good practice</em> to catch all errors using a default block.<br>\nInstead, specific errors should be handled explicitly by using an exception type.</p></redbox></slide>\n<slide class=\"ppt-f95 slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"finally-block-\"><inline-code>finally</inline-code> block </h2><ul>\n<li>We can have an optional <inline-code>finally</inline-code> block in a <inline-code>try</inline-code> statement; it is always executed whether an exception occurs in <inline-code>try</inline-code> block or not.</li>\n<li>It is useful to clean up resources (e.g. closing a file), which needs to be done even when exceptions occur.</li>\n</ul><python>try:\n    # try-block: code that may cause runtime error(s)\nexcept Error1:\n    # handle the Error1 here\nexcept Error2:\n    # handle the Error2 here\nfinally:\n    # this block always executes\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-6\"></h2><p>For this example, download the files <inline-code>read_matrix.py</inline-code> and <inline-code>matrixdata.txt</inline-code> from Ed Lesson and keep it in the same folder as the program.</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"when-to-use-try-statement\">When to use try statement</h2><ul>\n<li>It is a bad practice to use a try/except to “hide” bugs in the program!</li>\n<li>try/except should be used when we know that a specific error may occurs and there is no other way to handle it</li>\n</ul></slide>\n<slide class=\"ppt-f90 slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-7\"></h2><hgrid margin=\"0\"><div><p><span class=\"sans\">Good practice</span></p><python>try:\n    number = float(input(\"Enter a number: \"))\nexcept ValueError:\n    print('Number is not valid!')\n</python></div><p>because there is no other better way to check if a string contains a valid number.</p></hgrid><hgrid margin=\"0\"><div><p><span class=\"sans\">Not a good practice</span></p><python>student_grades = {\"Reza\": 90.0}\ntry:\n    name = input('Enter name: ')\n    student_grades[name] += 10\nexcept KeyError:\n    print(name, \"was not found.\")\n</python><p>because there is another way to do this (shown on right ->)</p></div><python place=\"center\">student_grades = {\"Reza\": 90.0}\n\nname = input('Enter name: ')\n\nif name in student_grades:\n    student_grades[name] += 10\nelse:\n    print(name, \"was not found.\")\n</python></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"where-do-exceptions-come-from\">Where do Exceptions come from?</h2><p><inline-code>raise</inline-code> statement is used to throw an exception from our code to tell Python that an unexpected case or error has occurred.</p><python lineno=\"false\">raise SomeException(\"Some message\")\n</python><p>Check <inline-code>euclidean_distance</inline-code> function in <inline-code>distance.py</inline-code> and <inline-code>distance2.py</inline-code>.</p><p>An exception raised in this way must be handled using <inline-code>try</inline-code> statements, otherwise Python will stop execution with the error as usual.</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"example-1\">Example</h2><p>How exceptions are raised in Python modules?<br>\nOpen the following link and search for <inline-code>raise</inline-code>:\n<a href=\"https://github.com/python/cpython/blob/main/Lib/random.py\">https://github.com/python/cpython/blob/main/Lib/random.py</a></p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"checking-type-of-an-object\">Checking type of an object</h2><python># isinstance(obj, class):\n#       Return whether an object is an instance of a class\n\nx = 123\nprint(isinstance(x, int))  # True\nprint(isinstance(x, float))  # False\n\nx = \"apple\"\nprint(isinstance(x, str))  # True\n\nx = [1, 5, 9]\nprint(isinstance(x, list))  # True\nprint(isinstance(x, tuple))  # False\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-8\"></h2><python># isinstance(obj, tuple_of_classes):\n#    A tuple of classes, e.g. isinstance(x, (A, B, ...)), may be given.\n#    Equivalent to isinstance(x, A) or isinstance(x, B) or ...\n\nx = 3.14\nprint(isinstance(x, (int, float)))  # True\n\nx = [1, 5, 9]\nprint(isinstance(x, (list, tuple)))  # True\n\nx = (11, 51, 4)\nprint(isinstance(x, (list, tuple)))  # True\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-9\"></h2><p>Object Oriented Programming (OOP)</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"objects\">Objects</h2><ul>\n<li>An object consists of data and a set of methods can be provided to work with it.</li>\n<li>For example, a string is a collection of characters and methods like <code>isupper</code> or <code>split</code> can be called <i>on it</i>.</li>\n<li>Python is an object-oriented language. This means that it uses objects to represent data and provides methods related to them.</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"object-oriented-programming-oop\">Object-oriented programming (OOP)</h2><ul>\n<li>Up to now, we have been using functions to organize our code, and built-in types <code>(list, str, list, or dict)</code> to organize our data.</li>\n<li>OOP is a way to use programmer-defined data classes to organize code and data.</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"class-and-objects\">Class and objects</h2><ul>\n<li>A class is like a <i>blueprint/template</i> for creating objects. It specifies what data the objects have and what methods can operate on the data.</li>\n<li>An object is an <sc>instance</sc> of some class. The terms <i>instance</i> and <i>object</i> are used interchangeably.</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"example--student\">Example — Student</h2><p>We want to define a class that would be a good template for objects representing students.</p><hgrid margin=\"0\"><div><p>Useful data:</p><ul>\n<li>Name</li>\n<li>Student ID</li>\n<li>Current courses</li>\n<li>Past grades</li>\n</ul></div><div><p>Useful methods:</p><ul>\n<li>compute_GPA</li>\n<li>add_course</li>\n<li>drop_course</li>\n</ul></div></hgrid><p>Each instance of the class (i.e., each object) would represent one particular student.</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"defining-a-class\">Defining a class</h2><python># This class does not contain any useful code yet\nclass MyClass:\n   \"\"\" a new data type \"\"\"\n   pass\n</python><ul>\n<li>Class names should follow the UpperCamelCase convention.</li>\n<li>In a Python file, we can define as many classes as we want.</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"instantiating-a-class\">Instantiating a class</h2><python>class Student:\n    \"\"\" Represents a student \"\"\"\n    pass\n\n# We can now create an object using the constructor Student()\nstudent1 = Student() \nprint(student1)  # &#x3C;__main__.Student object at 0x7fa7806c9310>\n\nstudent2 = Student() \nprint(student2)  # &#x3C;__main__.Student object at 0x7fa7806c9290>\n</python><p>The variables <inline-code>student1</inline-code> and <inline-code>student2</inline-code>refer to two different objects of class <inline-code>Student</inline-code>.</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"attributes\">Attributes</h2><ul>\n<li>We can create a variable that belongs to a specific object. These variables are called <sc>attributes</sc>.</li>\n<li>We create an attribute by assigning it a value using the dot notation: <inline-code>object.attribute = value</inline-code></li>\n<li>Attributes can be accessed only through the object they belong to, using dot notation: <inline-code>object.attribute</inline-code></li>\n</ul></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-10\"></h2><python>class Student:\n    \"\"\" Represents a student \"\"\"\n    pass\n\nstudent1 = Student()\n# Create an attribute inside the student1 object\nstudent1.name = \"Reza\"\n\n# Use the attribute inside student1 object:\nprint(student1.name)  # Reza\n\nstudent2 = Student()\nprint(student2.name)\n# AttributeError: 'Student' object has no attribute 'name'\n\nprint(name)  # NameError: name 'name' is not defined\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"visualization\">Visualization</h2><div class=\"ppt-scale-1_25\"><iframe width=\"800\" height=\"400\" scrolling=\"no\" style=\"overflow: hidden;\" frameborder=\"0\" src=\"https://pythontutor.com/iframe-embed.html#code=class%20Student%3A%0A%20%20%20%22%22%22%20Represents%20a%20student%0A%20%20%20%22%22%22%0A%0Astudent1%20%3D%20Student%28%29%0Astudent1.name%20%3D%20%22Deven%22%0Aname%20%3D%20student1.name%0Aprint%28name%29%0A&#x26;codeDivHeight=400&#x26;codeDivWidth=350&#x26;cumulative=false&#x26;curInstr=0&#x26;heapPrimitives=nevernest&#x26;origin=opt-frontend.js&#x26;py=3&#x26;rawInputLstJSON=%5B%5D&#x26;textReferences=false\"> </iframe></div></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"try-it\">Try it!</h2><ul>\n<li>Define a class <inline-code>Student</inline-code>.</li>\n<li>Write a function that takes as arguments a string <inline-code>name</inline-code> and an integer <inline-code>id_num</inline-code> and returns a <inline-code>Student</inline-code> object with two attributes <inline-code>name</inline-code> and <inline-code>id_num</inline-code>.</li>\n<li>Write a function that takes as arguments two Student objects and returns the <inline-code>name</inline-code> of the student with the larger <inline-code>id_num</inline-code>.</li>\n<li>Test the above functions by creating two objects of Student class.</li>\n</ul><p>Code available in the file <inline-code>student_example1.py</inline-code>.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-11\"></h2><redbox><p>So far, we saw how to create attributes in an object, from outside a class. That is not how we usually create attributes. It was done for demonstration purposes to understand what attributes are.</p></redbox></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"constructor-and-__init__-method\">Constructor and <inline-code>__init__</inline-code> method</h2><ul>\n<li>A constructor in an expression of form <inline-code>MyClass(arg1, arg2, ...)</inline-code> which creates an object of class <inline-code>MyClass</inline-code>. For example, <inline-code>Student()</inline-code> or <inline-code>Student(\"Reza\", 1234)</inline-code></li>\n<li>In Python, we define a special method named <inline-code>__init__</inline-code> (known as initializer method). It is invoked automatically whenever a new object is created using a contructor.</li>\n</ul><python>class MyClass:\n    def __init__(self):\n        # do something when the object is being created\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-12\"></h2><p>Let’s write an <inline-code>__init__</inline-code> method for the <inline-code>Student</inline-code> class that takes no arguments (besides <inline-code>self</inline-code>) and prints out “Creating a new student”.</p><python>class Student:\n    \"\"\" Represents a student \"\"\"\n    \n    def __init__(self):\n        print(\"Creating a new student\")\n\n\n# constructor without arguments:\nstudent1 = Student()  # __init__ will be called\n</python><output>Creating a new student\n</output></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"constructor-with-arguments\">Constructor with arguments</h2><p>The constructor can have arguments which are typically used to create the attributes and set their initial values.</p><p>Now, let’s modify the <inline-code>__init__</inline-code> method to add more arguments:</p><ul>\n<li><inline-code>name</inline-code> (string) of the student and their <inline-code>id_num</inline-code> (int)</li>\n<li>Create attributes <inline-code>name</inline-code> and <inline-code>id_num</inline-code> using <inline-code>self</inline-code> and set their values to the respective arguments.</li>\n</ul><p>Code available in the file <inline-code>student_example2.py</inline-code>.</p><p>What happens in example above if we do not create attributes in <inline-code>__init__</inline-code> ?</p><divider></divider></slide>","title":"6.2 — Handling exceptions, Object Oriented Programming (OOP)","date":"2024-06-05","published":true,"section":"Lecture-6.2"}},"__N_SSG":true}