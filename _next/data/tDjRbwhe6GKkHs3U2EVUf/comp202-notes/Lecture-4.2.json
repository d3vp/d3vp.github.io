{"pageProps":{"allSlugs":[["Lecture-1.1",[{"title":"1.1 — Programming Basics","slug":"Lecture-1.1"}]],["Lecture-1.2",[{"title":"1.2 — Variables, Arithmetic & String operations","slug":"Lecture-1.2"}]],["Lecture-2.1",[{"title":"2.1 — Function calls, Built-in functions, Expressions","slug":"Lecture-2.1"}]],["Lecture-2.2",[{"title":"2.2 —  Defining functions, Comparing Values, Control flow statements","slug":"Lecture-2.2"}]],["Lecture-2.3",[{"title":"2.3 — return vs. print, while statement","slug":"Lecture-2.3"}]],["Lecture-3.1",[{"title":"3.1 — Modules, String methods, break & continue statements","slug":"Lecture-3.1"}]],["Lecture-3.2",[{"title":"3.2 — Controlling print(), Nested Loops","slug":"Lecture-3.2"}]],["Lecture-3.3",[{"title":"3.3 — Scope of variables, Lists","slug":"Lecture-3.3"}]],["Lecture-4.1",[{"title":"4.1 — List methods, Tuples, Immutable objects","slug":"Lecture-4.1"}]],["Lecture-4.2",[{"title":"4.2 — Sets, Dictionaries","slug":"Lecture-4.2"}]],["Lecture-5.1",[{"title":"5.1 — Iterables, More dict & list operations, Nested lists","slug":"Lecture-5.1"}]],["Lecture-5.2",[{"title":"5.2 — Nested data structures, Comprehensions","slug":"Lecture-5.2"}]],["Lecture-5.3",[{"title":"5.3 — Sorting, Modules, Reading & Writing Files","slug":"Lecture-5.3"}]],["Lecture-6.1",[{"title":"6.1 — Files, Shallow vs. deep copy","slug":"Lecture-6.1"}]],["Lecture-6.2",[{"title":"6.2 — Handling exceptions, Object Oriented Programming (OOP)","slug":"Lecture-6.2"}]],["Lecture-7.1",[{"title":"7.1 — Object Oriented Programming (OOP)","slug":"Lecture-7.1"}]],["Lecture-7.2",[{"title":"7.2 — More OOP, Plotting using Matplotlib","slug":"Lecture-7.2"}]],["Lecture-7.3",[{"title":"7.3 — NumPy & Misc. topics","slug":"Lecture-7.3"}]]],"post":{"slug":"Lecture-4.2","content":"<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"sets\">Sets</h2><ul>\n<li>A set is a an <i>unordered</i> collection of <i>immutable</i> objects.</li>\n<li>A set always contains unique elements, unlike lists and tuples which allow duplicates.</li>\n<li>A set is unordered i.e. we cannot use indexing or slicing on a set object</li>\n</ul><hgrid><python lineno=\"false\">numbers = {1, 2, 3}\nprint(numbers)  # {1, 2, 3}\nprint(type(numbers))  # &#x3C;class 'set'>\n</python><python lineno=\"false\"># only unique values are kept\nnumbers = {1, 2, 3, 1, 3}\nprint(numbers)  # {1, 2, 3}\nprint(len(numbers))  # 3\n</python></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"other-ways-to-create-a-set\">Other ways to create a set</h2><python># a set can be created from any sequence\n# such as list, tuple or a string\nthings = set([10, 42, \"apple\", 42])\nprint(things)  # {'apple', 10, 42}\n\nword = \"pineapple\"\nletters = set(word)\nprint(letters)  \n# {'p', 'n', 'l', 'i', 'e', 'a'}\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"\"></h2><python># create an empty set\nempty_set = set()\nprint(len(empty_set))  # 0\n\n# This does not create an empty set!\nempty_dictionary = {}\nprint(type(empty_dictionary))  # &#x3C;class 'dict'>\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"set-elements-must-be-immutable\">Set elements must be immutable</h2><p>A set can contain <inline-code>int</inline-code>, <inline-code>float</inline-code>, <inline-code>str</inline-code>, <inline-code>bool</inline-code> and <inline-code>tuple</inline-code> objects because they are all immutable.</p><p>But a set cannot contain a list because lists are mutable.</p><python># tuples are immutable so allowed in set\npoints = {(1, 1), (3, 10), (3, 10)}\nprint(points)  \n# {(3, 10), (1, 1)}\n\n# lists are mutable so not allowed\npoints = {[1, 1], [3, 10], [3, 10]}  \n# TypeError: unhashable type: 'list'\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"set-operators-and-methods\">Set operators and methods</h2><python># set.add(x):\n#   Adds an element x to the set if x does not exist in the set. \n#   Does not return anything.\n\nnumbers = {1, 2, 3}\nnumbers.add(20)\nprint(numbers)  # {1, 2, 3, 20}\n\nnumbers.add(3)\nprint(numbers)  # {1, 2, 3, 20}\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-1\"></h2><python># set.remove(x):\n#   Remove an element x from the set. Does not return anything.\n#   Throws KeyError if element x is not present in the set.\n\nnumbers = {1, 2, 3}\nnumbers.remove(2)\nprint(numbers)  # {1, 3}\n\nnumbers.remove(5)  # KeyError: 5\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-2\"></h2><p><inline-code>in</inline-code>, <inline-code>not in</inline-code> operators can be used to check if an element exists in a set.</p><python>numbers = {1, 2, 3}\nprint(2 in numbers)  # True\nprint(5 not in numbers)  # True\n\nshapes = {'circle', 'square'}\nprint(\"circle\" in shapes)  # True\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-3\"></h2><p><b>Sets cannot be indexed or sliced because they are not ordered.</b></p><hgrid><python>primes = {2, 3, 5, 7, 11}\nprimes[4]  # TypeError: 'set' object is not subscriptable\n</python></hgrid><p>But we can use for loop to iterate over the items:</p><hgrid><python># The order in which items will be printed \n# is not defined because sets are not ordered\n\nnumbers = {10, 1, 5, 20}\nfor n in numbers:\n    print(n)\n</python><output>1\n10\n20\n5\n</output></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"why-use-sets\">Why use sets?</h2><ul>\n<li>Set are faster than lists and tuples, when inserting, removing and searching elements.</li>\n<li>When order of elements is important or when elements are mutable, use lists or tuples</li>\n<li>When only unique immutable elements need to be stored, use sets.</li>\n</ul></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-4\"></h2><p>Time for some problems on Ed Lessons.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-5\"></h2></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"set-methods\">Set methods</h2><python># set.update(iterable):\n#   Adds all items from the iterable to the set.\n\nnumbers = {1, 2, 3}\nnumbers.update([10, 2, 2, 3, 20])\nprint(numbers)  # {1, 2, 3, 10, 20}\n\nnumbers.update((\"a\", \"b\")) \nprint(numbers)  # {1, 2, 3, 'a', 10, 20, 'b'}\n\nprimes = {2, 3, 5}\nprimes.update({5, 7, 11})\nprint(primes)  # {2, 3, 5, 7, 11}\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-6\"></h2><python># set.clear(): Remove all elements from this set.\n\nnumbers = {1, 2, 3}\nnumbers.clear()\nprint(numbers)  # set()\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-7\"></h2><python># For the following methods, suppose A and B are sets.\n\n# A.intersection(B):\n#    Returns a new set that contains elements that are\n#    present in both A and B   \n\nodd = {3, 5, 7, 9, 25}\nsquares = {4, 9, 25, 36}\nodd_squares = odd.intersection(squares)\nprint(odd_squares)  # {9, 25}\n\n# Intersection can also be done using operator &#x26;\nodd_squares = odd &#x26; squares\nprint(odd_squares)  # {9, 25}\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-8\"></h2><python># A.union(B):\n#    Returns a new set that contains elements that are\n#    present in  A or B or both\n\nx = {1, 2, 3}\ny = {2, 3, 5}\nall_numbers = x.union(y)\nprint(all_numbers)  # {1, 2, 3, 5}\n\n# Same above but using an operator |\nall_numbers = x | y\nprint(all_numbers)  # {1, 2, 3, 5}\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-9\"></h2><python># A.difference(B):\n#   Returns a new set that contains elements that are\n#   present only in A but not in B\nx = {1, 2, 3}\ny = {2, 3, 5}\ndiff = x.difference(y)\nprint(diff)  # {1}\n\n# Same as above but using operator -\ndiff = x - y\nprint(diff)  # {1}\n</python><p>All of the <inline-code>set</inline-code> methods work the same when elements are of other types such as strings.</p></slide>\n<slide class=\"ppt-f95 slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"dictionaries-\">Dictionaries </h2><p>Suppose we would like to store the following enrollment data:</p><hgrid class=\"ppt-f95\" margin=\"0\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>semester</th><th>no. of students</th></tr></thead><tbody><tr><td>F2017</td><td>816</td></tr><tr><td>W2018</td><td>613</td></tr><tr><td>F2018</td><td>709</td></tr><tr><td>W2019</td><td>590</td></tr></tbody></table></hgrid><p>We can do this using two lists for the two columns:</p><python>semesters = ['F2017', 'W2018', 'F2018', 'W2019']\nstudents = [816, 613, 709, 590]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-10\"></h2><p>What should we do if we want to add new data?</p><python>semesters = ['F2017', 'W2018', 'F2018', 'W2019']\nstudents = [816, 613, 709, 590]\n\nsemesters.append(\"F2020\")\nstudents.append(550)\n# ['F2017', 'W2018', 'F2018', 'W2019', 'F2020']\n# [816, 613, 709, 590, 550]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-11\"></h2><p>What if we want to modify the value for a specific semester?</p><python>semesters = ['F2017', 'W2018', 'F2018', 'W2019']\nstudents = [816, 613, 709, 590]\n\nidx = semesters.index(\"W2018\")\nstudents[idx] = 600\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-12\"></h2><p>What we if try to add an entry for a semester that already exists?</p><p>List allows duplicates so it does not check if a semester already exists.</p><python>semesters = ['F2017', 'W2018', 'F2018', 'W2019']\nstudents = [816, 613, 709, 590]\n\nsemesters.append(\"F2018\")\nstudents.append(500)\n# ['F2017', 'W2018', 'F2018', 'W2019', 'F2018']\n# [816, 613, 709, 590, 500]\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"use-a-dictionary\">Use a dictionary!</h2><ul>\n<li>You can think of an item of a dictionary as a pair of objects:\n<ul>\n<li>The first object of the pair is called a <sc>key</sc>.</li>\n<li>The second object is referred to as the <sc>value</sc>.</li>\n</ul>\n</li>\n<li>A dictionary is called a <i>mapping</i> type because it maps key objects to value objects.</li>\n</ul><python># A dictionary is created using a sequence of key-value pairs\nenrollment = {'F2017': 816, 'W2018': 613,\n              'F2018': 709, 'W2019': 590}\n\nprint(type(enrollment))  # &#x3C;class 'dict'>\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-13\"></h2><python># Number of key-value pairs\nprint(len(enrollment))  # 4\n\n# This is an empty dictionary, not a set!\nempty_dict = {}\nprint(len(empty_dict)) # 0\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"dictionary-examples\">Dictionary Examples</h2><python># Key: a number, Value: True if number is prime, else False\nis_prime = {2: True, 3: True, 4: False, 5: True,\n            7: True, 10: False}\n\n# Key: inventory items, Value: count of items in inventory\ninventory = {\"sofa\": 5, \"table\": 10, \"chair\": 20, \"mattress\": 5}\n\n# Key: city name, Value: area of city\npopulation = {\"Montreal\": 431.50, \"Toronto\": 630.20}\n\n# Key: country name, Value: capital city\ncapitals = {\"Canada\": \"Ottawa\", \"United States\": \"Washington, D.C.\",\n            \"France\": \"Paris\", \"Germany\": \"Berlin\"}\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"note-on-keys-and-values\">Note on keys and values</h2><ul>\n<li>Keys\n<ul>\n<li>Have to be immutable objects.</li>\n<li>Have to be unique in a dictionary. A dictionary cannot contain two items with the same key.</li>\n</ul>\n</li>\n<li>Values\n<ul>\n<li>Values can be of any type; both mutable and immutable values are allowed.</li>\n<li>Many keys can map to the same value. i.e. values need not be unique.</li>\n</ul>\n</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"dictionary-lookup\">Dictionary Lookup</h2><p>With lists, we can access an item of the list through its index.</p><p>With dictionaries, we can access a value stored in the dictionary through the key associated with it.</p><python>enrollment = {'F2017': 816, 'W2018': 613, 'F2018': 709,\n              'W2019': 590, 'F2019': 744}\n\nnum_students = enrollment[\"F2018\"]\nprint(num_students)  # 709\n\n# Key must exist in the dictionary if we want to access its value\nprint(enrollment[\"F2020\"])  # KeyError: 'F2020'\n</python><divider></divider></slide>","title":"4.2 — Sets, Dictionaries","date":"2024-05-22","published":true,"section":"Lecture-4.2"}},"__N_SSG":true}