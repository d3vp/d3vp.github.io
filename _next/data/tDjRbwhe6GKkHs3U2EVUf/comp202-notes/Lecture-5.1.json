{"pageProps":{"allSlugs":[["Lecture-1.1",[{"title":"1.1 — Programming Basics","slug":"Lecture-1.1"}]],["Lecture-1.2",[{"title":"1.2 — Variables, Arithmetic & String operations","slug":"Lecture-1.2"}]],["Lecture-2.1",[{"title":"2.1 — Function calls, Built-in functions, Expressions","slug":"Lecture-2.1"}]],["Lecture-2.2",[{"title":"2.2 —  Defining functions, Comparing Values, Control flow statements","slug":"Lecture-2.2"}]],["Lecture-2.3",[{"title":"2.3 — return vs. print, while statement","slug":"Lecture-2.3"}]],["Lecture-3.1",[{"title":"3.1 — Modules, String methods, break & continue statements","slug":"Lecture-3.1"}]],["Lecture-3.2",[{"title":"3.2 — Controlling print(), Nested Loops","slug":"Lecture-3.2"}]],["Lecture-3.3",[{"title":"3.3 — Scope of variables, Lists","slug":"Lecture-3.3"}]],["Lecture-4.1",[{"title":"4.1 — List methods, Tuples, Immutable objects","slug":"Lecture-4.1"}]],["Lecture-4.2",[{"title":"4.2 — Sets, Dictionaries","slug":"Lecture-4.2"}]],["Lecture-5.1",[{"title":"5.1 — Iterables, More dict & list operations, Nested lists","slug":"Lecture-5.1"}]],["Lecture-5.2",[{"title":"5.2 — Nested data structures, Comprehensions","slug":"Lecture-5.2"}]],["Lecture-5.3",[{"title":"5.3 — Sorting, Modules, Reading & Writing Files","slug":"Lecture-5.3"}]],["Lecture-6.1",[{"title":"6.1 — Files, Shallow vs. deep copy","slug":"Lecture-6.1"}]],["Lecture-6.2",[{"title":"6.2 — Handling exceptions, Object Oriented Programming (OOP)","slug":"Lecture-6.2"}]],["Lecture-7.1",[{"title":"7.1 — Object Oriented Programming (OOP)","slug":"Lecture-7.1"}]],["Lecture-7.2",[{"title":"7.2 — More OOP, Plotting using Matplotlib","slug":"Lecture-7.2"}]],["Lecture-7.3",[{"title":"7.3 — NumPy & Misc. topics","slug":"Lecture-7.3"}]]],"post":{"slug":"Lecture-5.1","content":"<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"iterable\">Iterable</h2><p>An <sc>iterable</sc> is a kind of object that can produce a sequence of other objects and hence can be used in a <inline-code>for</inline-code> loop.</p><ul>\n<li>range: sequence of integers</li>\n<li>strings: sequence of characters</li>\n<li>tuples: (immutable) sequence of any object</li>\n<li>lists: sequence of any object</li>\n<li>dictionaries: collection of tuples (key, value)</li>\n<li>sets: collection of immutable objects (but order is not defined)</li>\n</ul></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"\"></h2><p>Iterables can be used as arguments of the functions <inline-code>list()</inline-code>, <inline-code>set()</inline-code>, <inline-code>tuple()</inline-code>, <inline-code>dict()</inline-code>, etc.</p><python># range object only stores start, end and step size.\nprint(range(10, 101, 10))  # range(10, 101, 10)\n\n# list stores all objects in memory \nl = list(range(10, 101, 10))\nprint(l)\n# [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n\ns = set(range(10, 101, 10))\nprint(s)\n# {100, 70, 40, 10, 80, 50, 20, 90, 60, 30}\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"dictionary-lookup\">Dictionary Lookup</h2><p>With lists, we can access an item of the list through its index.</p><p>With dictionaries, we can access a value stored in the dictionary through the key associated with it.</p><python>enrollment = {'F2017': 816, 'W2018': 613, 'F2018': 709,\n              'W2019': 590, 'F2019': 744}\n\nnum_students = enrollment[\"F2018\"]\nprint(num_students)  # 709\n\n# Key must exist in the dictionary if we want to access its value\nprint(enrollment[\"F2020\"])  # KeyError: 'F2020'\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"adding-an-item\">Adding an item</h2><p>We can add a new item by specifying a key and a value: <inline-code>dictionary[key] = value</inline-code></p><python>enrollment = {'F2018': 709, 'W2019': 590}\n\nenrollment[\"F2020\"] = 800  # add an item\nenrollment[\"W2020\"] = 900  # add another item\n\n# {'F2018': 709, 'W2019': 590, 'F2020': 800, 'W2020': 900}\n\nenrollment[\"F2018\"] = 700  # change an existing item\n\n# {'F2018': 700, 'W2019': 590, 'F2020': 800, 'W2020': 900}\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"removing-an-item\">Removing an item</h2><p>We can delete an item using the following syntax: <inline-code>del dictionary[key]</inline-code></p><python>enrollment = {'F2018': 709, 'W2019': 590, 'F2019': 744}\n\ndel enrollment[\"F2019\"]\n\n# {'F2018': 709, 'W2019': 590}\n\ndel enrollment[\"F2020\"]\n# KeyError: 'F2020'\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-1\"></h2><p>What will be printed in the following examples?</p><hgrid><python>d = {'x' : 0, 'y' : 1, 'z' : 2} \nx = d['y']\nprint(x)\n</python></hgrid><hgrid><python>d = {'x' : 0, 'y' : 1, 'z' : 2} \nx = d[0]\nprint(x)\n</python></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"check-for-membership\">Check for membership</h2><p>We can check if a key is part of a dictionary using the <inline-code>in</inline-code> and <inline-code>not in</inline-code> operators.</p><python>d = {'x' : 0, 'y' : 1, 'z' : 2} \nprint('x' in d) #  True \nprint(0 in d) #  False\nprint(0 not in d) #  True\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-2\"></h2><greenbox><p>“Performance of searching a list, a set and dictionary” on Ed.</p></greenbox></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"iterating-through-a-dictionary\">Iterating through a dictionary</h2><p>We can use a for loop to iterate through all the keys in a dictionary.</p><python>enrollment = {'F2018': 709, 'W2019': 590, 'F2019': 744}\n\nfor key in enrollment:\n    print(key, \"->\", enrollment[key])\n</python><output>F2018 -> 709\nW2019 -> 590\nF2019 -> 744\n</output></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"functions-and-methods-for-dictionaries\">Functions and methods for dictionaries</h2><python># dict(L): creates and returns a dictionary using a list L of tuples, \n#   where each tuple is of length 2 in form of (key, value).\n\npairs = [(\"Montreal\", 1.78), (\"Rome\", 2.87), (\"Tokyo\", 9.27)]\npopulation_data = dict(pairs)\n\nprint(population_data)\n#  {'Montreal': 1.78, 'Rome': 2.87, 'Tokyo': 9.27}\n\nprint(population_data[\"Rome\"])\n# 2.87\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-3\"></h2><python>population_data = {'Montreal': 1.78, 'Rome': 2.87, 'Tokyo': 9.27}\n\n# dict.keys(): returns a iterable (sequence) of all keys\n\ncities = list(population_data.keys())\nprint(cities)  # ['Montreal', 'Rome', 'Tokyo']\n\n# dict.values(): returns a iterable (sequence) of all values\n\npopulation = list(population_data.values())\nprint(population)  # [1.78, 2.87, 9.27]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-4\"></h2><python># dict.items(): returns a iterable (sequence) of tuples (key, value) \n#   for all items in the dictionary\n\npopulation_data = {'Montreal': 1.78, 'Rome': 2.87, 'Tokyo': 9.27}\npairs = list(population_data.items())\n\nprint(pairs)\n# [('Montreal', 1.78), ('Rome', 2.87), ('Tokyo', 9.27)]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-5\"></h2><p>Using the <inline-code>dict</inline-code> methods in <inline-code>for</inline-code> loop:</p><python>population_data = {'Montreal': 1.78, 'Rome': 2.87, 'Tokyo': 9.27}\n\ntotal = 0\nfor population in population_data.values():\n    total += population\n\nprint(total)  # 13.92\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-6\"></h2><python>population_data = {'Montreal': 1.78, 'Rome': 2.87, 'Tokyo': 9.27}\n\n# dict.items() returns an iterable of key-value tuples\n\nfor tup in population_data.items():\n    city = tup[0]\n    population = tup[1]\n    print(city, \"->\", population)\n\n# Montreal -> 1.78\n# Rome -> 2.87\n# Tokyo -> 9.27\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"packing-vs-unpacking\">Packing vs Unpacking</h2><p>When we create a string, a list, or a tuple, we are packing several elements into a single object.</p><python>s = \"cat\"\nmy_list = [5, 'a']\nmy_tuple = (0, 3, 7)\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-7\"></h2><p><sc>Unpacking</sc> allows us to assign values in a string/list/tuple to multiple variables.<br>\nWe must know the exact length of the string/list/tuple.</p><python>s = \"cat\"\na, b, c = s\n# a, b and c are all strings\nprint(a)  # c\nprint(b)  # a\nprint(c)  # t\n\nmy_list = [5, 'cat']\nx, y = my_list\nprint(x)  # 5\nprint(y)  # cat\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-8\"></h2><python># Parentheses are optional in this context.\nmy_tuple = 0, 3, 7\nx, y, z = my_tuple\nprint(x)  # 0\nprint(y)  # 3\nprint(z)  # 7\n\n# Variables must match number of elements\ntup = 1, 2, 3 \nx, y = tup\n# ValueError: too many values to unpack (expected 2)\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"multiple-assignment-using-packingunpacking-on-same-line\">Multiple assignment using packing/unpacking on same line</h2><python># We are creating a tuple on the right side and \n# unpacking it into 3 variables.\ncity, population, area = 'Montreal', 1704694, 431.5\nprint(city)  # Montreal\nprint(population)  # 1704694\nprint(area)  # 431.5\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"returning-a-tuple-from-a-function-and-unpacking\">Returning a tuple from a function and unpacking</h2><python>def min_max(mylist):\n    # Return a tuple of two elements\n    return min(mylist), max(mylist)\n    \n    \n# Unpack the returned tuple into 2 variables\nx, y = min_max([2, -3, 10, 20])\nprint(x)  # -3\nprint(y)  # 20\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-9\"></h2><p>Making use of tuple unpacking in the for loop:</p><python>population_data = {'Montreal': 1.78, 'Rome': 2.87, 'Tokyo': 9.27}\n\nfor city, population in population_data.items():\n    print(city, \"->\", population)\n\n# Montreal -> 1.78\n# Rome -> 2.87\n# Tokyo -> 9.27\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-10\"></h2><p>Time for some problems on Ed Lessons.</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"updating-multiple-items-in-a-list-using-slice-assignment\">Updating multiple items in a list using slice assignment</h2><p>The syntax of the slice assignment is as follows:</p><python lineno=\"false\">list_object[start:stop:step] = iterable\n</python><p>Think of <inline-code>iterable</inline-code> as a sequence/collection type such as a list, string, tuple etc.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-11\"></h2><python>days = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\nprint(days[1:3])\n# ['Tue', 'Wed']\n\n# Replaces items at indices 1 &#x26; 2\ndays[1:3] = [1, 2]\nprint(days)\n# ['Mon', 1, 2, 'Thu', 'Fri', 'Sat', 'Sun']\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-12\"></h2><python>days = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\nprint(days[1::2])\n# ['Tue', 'Thu', 'Sat']\n\ndays[1::2] = [\"\", \"\", \"\"]\nprint(days)\n# ['Mon', '', 'Wed', '', 'Fri', '', 'Sun']\n\n# String is considered as sequence of letters\ndays[:3] = \"MTW\"\nprint(days)\n# ['M', 'T', 'W', '', 'Fri', '', 'Sun']\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-13\"></h2><python>days = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\n\n# Replace many items with fewer\ndays[0:5] = [\"Vacation!\"]\nprint(days)  # ['Vacation!', 'Sat', 'Sun']\n\n# Removing items\ndays[1:] = []\nprint(days)  # ['Vacation!']\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-14\"></h2><python>days = [\"Mon\",  \"Fri\", \"Sat\", \"Sun\"]\nprint(days[1:2]) # ['Fri']\n\n# Replace fewer items with many\ndays[1:2] = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", ]\nprint(days)\n# ['Mon', 'Mon', 'Tue', 'Wed', 'Thu', 'Sat', 'Sun']\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-15\"></h2><python>days = [\"Mon\",  \"Fri\", \"Sat\", \"Sun\"]\n\n# Start and stop indices are same\nprint(days[1:1]) # []\n\n# Replace fewer items with many\ndays[1:1] = [\"Tue\", \"Wed\", \"Thu\", ]\nprint(days)\n# ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"other-list-methods\">Other list methods</h2><python># list.reverse() : Reverse the list \"in place\"\ngrades = [90, 70, 60.5, 70, 80]\ngrades.reverse()\nprint(grades)  # [80, 70, 60.5, 70, 90]\n\n# list.clear() : Remove all items from list.\ngrades = [90, 70, 60.5, 70, 80]\ngrades.clear()\nprint(grades)  # []\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"what-modifies-a-list\">What modifies a list?</h2><ul>\n<li>Assigning a value to an element using its index.\n<python>a = [1, 2, 3]\na[0] = 5\n</python>\n</li>\n<li>Using the slice assignment to modify the elements of a list.\n<python>a = [1, 2, 3]\na[:2] = [4, 5]\n</python>\n</li>\n<li>Using methods like <code>append(), insert(), remove() , pop(), clear()</code>, etc.</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"what-does-not-modify-a-list\">What does not modify a list?</h2><ul>\n<li>Slicing! It is a useful tool to create new lists out of an existing lists.\n<python>a = [1, 2, 3]\nb = a[:]  # makes a copy of a\nprint(a is b)  # False\n</python>\n</li>\n<li>The <inline-code>+</inline-code> and <inline-code>*</inline-code> operators create a new list\n<python>a = [1, 2, 3]\nb = a  # does not copy, just a new name for same list\nb = b + [4]  # b now refers to a new list [1, 2, 3, 4]\n             # a still refers to [1, 2, 3]\nprint(a is b)  # False\n</python>\n</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"nested-lists\">Nested Lists</h2><p>An element of a list can be another list!<br>\nSuch lists are called <sc>nested</sc> lists.</p><python>nested_list = [[1], [1, 2, 3], [1, 2]]\nprint(type(nested_list))\n# &#x3C;class 'list'>\n\nprint(nested_list[0])\n# [1]\nprint(nested_list[1])\n# [1, 2, 3]\nprint(nested_list[2])\n# [1, 2]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-16\"></h2><p>Nested lists are useful to store data which come in form of a table or spreadsheet.</p><python>#                      Name,     A1,  A2,  A3\nstudent_grades = [[\"Student-A\",  90,  95, 100], \n                  [\"Student-B\",  85,  90,  98], \n                  [\"Student-C\",  70,  75,  80]] \n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-17\"></h2><p>We can perform same operations on nested lists as we saw earlier: indexing, slicing, etc.</p><python>student_grades = [[\"Student-A\",  90, 95, 100],\n                  [\"Student-B\",  85, 90, 98],\n                  [\"Student-C\",  70, 75, 80]]\n\n# Print name of 2nd student\nprint(student_grades[1][0]) \n# Student-B\n\n# Change A2 grade for Student-B\nstudent_grades[1][2] = 100\nprint(student_grades)\n# [['Student-A', 90, 95, 100], ['Student-B', 85, 100, 98], \n#  ['Student-C', 70, 75, 80]]\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"iterating-in-a-row-first-order\">Iterating in a <i>row-first</i> order</h2><hgrid><python>matrix = [[81, 75, 90, 60], \n          [80, 70, 85, 55],\n          [40, 50, 45, 85]]\n\nnum_rows = len(matrix)  \nnum_cols = len(matrix[0]) \n\nprint(\"Row-first order:\")\nfor r in range(num_rows):\n    for c in range(num_cols):\n        print(matrix[r][c], end=\" \")\n    print()\n</python><output>Row-first order:\n81 75 90 60 \n80 70 85 55 \n40 50 45 85 \n</output></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"iterating-in-a-column-first-order\">Iterating in a <i>column-first</i> order</h2><hgrid><python>matrix = [[81, 75, 90, 60], \n          [80, 70, 85, 55],\n          [40, 50, 45, 85]]\n\nnum_rows = len(matrix)  \nnum_cols = len(matrix[0])\n\nprint(\"\\nColumn-first order:\")\nfor c in range(num_cols):\n    for r in range(num_rows):\n        print(matrix[r][c], end=\" \")\n    print()\n</python><output>Column-first order:\n81 80 40 \n75 70 50 \n90 85 45 \n60 55 85\n</output></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"list-of-tuples\">List of tuples</h2><python>points = [(1, 1, 3), (4, 10.5, 9), (7, 4.4, 9.7)]\n\n# List element can be modified:\npoints[1] = (4, 12, 10)  # Assign new point\nprint(points)  # [(1, 1, 3), (4, 12, 10), (7, 4.4, 9.7)]\n\n# Trying to change the second points's z-coordinate\npoints[1][2] = 20  \n# TypeError: 'tuple' object does not support item assignment\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-18\"></h2><p>Iterating over list of tuples:</p><hgrid><python>points = [(1, 1, 3), (4, 10.5, 9), \n          (7, 4.4, 9.7)]\n\nfor p in points:  # p is a tuple\n    print(p)\n\n# Unpack a tuple into 3 variables\nfor x, y, z in points:  \n    print(x, y, z)\n</python><output>(1, 1, 3)\n(4, 10.5, 9)\n(7, 4.4, 9.7)\n1 1 3\n4 10.5 9\n7 4.4 9.7\n</output></hgrid><divider></divider></slide>","title":"5.1 — Iterables, More dict & list operations, Nested lists","date":"2024-05-24","published":true,"section":"Lecture-5.1"}},"__N_SSG":true}