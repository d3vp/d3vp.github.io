{"pageProps":{"allSlugs":[["Lecture-1.1",[{"title":"1.1 — Programming Basics","slug":"Lecture-1.1"}]],["Lecture-1.2",[{"title":"1.2 — Variables, Arithmetic & String operations","slug":"Lecture-1.2"}]],["Lecture-2.1",[{"title":"2.1 — Function calls, Built-in functions, Expressions","slug":"Lecture-2.1"}]],["Lecture-2.2",[{"title":"2.2 —  Defining functions, Comparing Values, Control flow statements","slug":"Lecture-2.2"}]],["Lecture-2.3",[{"title":"2.3 — return vs. print, while statement","slug":"Lecture-2.3"}]],["Lecture-3.1",[{"title":"3.1 — Modules, String methods, break & continue statements","slug":"Lecture-3.1"}]],["Lecture-3.2",[{"title":"3.2 — Controlling print(), Nested Loops","slug":"Lecture-3.2"}]],["Lecture-3.3",[{"title":"3.3 — Scope of variables, Lists","slug":"Lecture-3.3"}]],["Lecture-4.1",[{"title":"4.1 — List methods, Tuples, Immutable objects","slug":"Lecture-4.1"}]],["Lecture-4.2",[{"title":"4.2 — Sets, Dictionaries","slug":"Lecture-4.2"}]],["Lecture-5.1",[{"title":"5.1 — Iterables, More dict & list operations, Nested lists","slug":"Lecture-5.1"}]],["Lecture-5.2",[{"title":"5.2 — Nested data structures, Comprehensions","slug":"Lecture-5.2"}]],["Lecture-5.3",[{"title":"5.3 — Sorting, Modules, Reading & Writing Files","slug":"Lecture-5.3"}]],["Lecture-6.1",[{"title":"6.1 — Files, Shallow vs. deep copy","slug":"Lecture-6.1"}]],["Lecture-6.2",[{"title":"6.2 — Handling exceptions, Object Oriented Programming (OOP)","slug":"Lecture-6.2"}]],["Lecture-7.1",[{"title":"7.1 — Object Oriented Programming (OOP)","slug":"Lecture-7.1"}]],["Lecture-7.2",[{"title":"7.2 — More OOP, Plotting using Matplotlib","slug":"Lecture-7.2"}]],["Lecture-7.3",[{"title":"7.3 — NumPy & Misc. topics","slug":"Lecture-7.3"}]]],"post":{"slug":"Lecture-7.1","content":"<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"review-from-last-lecture\">Review from last lecture</h2><ul>\n<li>Define a class <inline-code>Student</inline-code>.</li>\n<li>Write a function that takes as arguments a string <inline-code>name</inline-code> and an integer <inline-code>id_num</inline-code> and returns a <inline-code>Student</inline-code> object with two attributes <inline-code>name</inline-code> and <inline-code>id_num</inline-code>.</li>\n<li>Write a function that takes as arguments two Student objects and returns the <inline-code>name</inline-code> of the student with the larger <inline-code>id_num</inline-code>.</li>\n<li>Test the above functions by creating two objects of Student class.</li>\n</ul><p>Code available in the file <inline-code>student_example1.py</inline-code>.</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"visualization\">Visualization</h2><div class=\"ppt-scale-1_25\"><iframe width=\"900\" height=\"550\" scrolling=\"no\" style=\"overflow: hidden;\" frameborder=\"0\" src=\"https://pythontutor.com/iframe-embed.html#code=class%20Student%3A%0A%20%20%20%20%22%22%22Represents%20a%20student.%22%22%22%0A%0Adef%20create_student%28name,%20id_num%29%3A%0A%20%20%20%20new_student%20%3D%20Student%28%29%20%20%0A%20%20%20%20new_student.name%20%3D%20name%0A%20%20%20%20new_student.id_num%20%3D%20id_num%0A%20%20%20%20return%20new_student%0A%0As1%20%3D%20create_student%28%22ABC%22,%20123%29%0Aprint%28s1.name,%20s1.id_num%29%0A%0As2%20%3D%20create_student%28%22XYZ%22,%20999%29%0Aprint%28s2.name,%20s2.id_num%29&#x26;codeDivHeight=400&#x26;codeDivWidth=350&#x26;cumulative=false&#x26;curInstr=0&#x26;heapPrimitives=nevernest&#x26;origin=opt-frontend.js&#x26;py=3&#x26;rawInputLstJSON=%5B%5D&#x26;textReferences=false\"> </iframe></div></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"constructor-and-__init__-method\">Constructor and <inline-code>__init__</inline-code> method</h2><ul>\n<li>A constructor in an expression of form <inline-code>MyClass(arg1, arg2, ...)</inline-code> which creates an object of class <inline-code>MyClass</inline-code>. For example, <inline-code>Student()</inline-code> or <inline-code>Student(\"Reza\", 1234)</inline-code></li>\n<li>In Python, we define a special method named <inline-code>__init__</inline-code> (known as initializer method). It is invoked automatically whenever a new object is created using a contructor.</li>\n</ul><python>class MyClass:\n    def __init__(self):\n        # do something when the object is being created\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"\"></h2><p>Let’s write an <inline-code>__init__</inline-code> method for the <inline-code>Student</inline-code> class that takes no arguments (besides <inline-code>self</inline-code>) and prints out “Creating a new student”.</p><python>class Student:\n    \"\"\" Represents a student \"\"\"\n    \n    def __init__(self):\n        print(\"Creating a new student\")\n\n\n# constructor without arguments:\nstudent1 = Student()  # __init__ will be called\n</python><output>Creating a new student\n</output></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"constructor-with-arguments\">Constructor with arguments</h2><p>The constructor can have arguments which are typically used to create the attributes and set their initial values.</p><p>Now, let’s modify the <inline-code>__init__</inline-code> method to add more arguments:</p><ul>\n<li><inline-code>name</inline-code> (string) of the student and their <inline-code>id_num</inline-code> (int)</li>\n<li>Create attributes <inline-code>name</inline-code> and <inline-code>id_num</inline-code> using <inline-code>self</inline-code> and set their values to the respective arguments.</li>\n</ul><p>Code available in the file <inline-code>student_example2.py</inline-code>.</p><p>What happens in example above if we do not create attributes in <inline-code>__init__</inline-code> ?</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"defining-methods\">Defining Methods</h2><p>We can define methods inside a class using <inline-code>def</inline-code> keyword.</p><p><sc>Instance methods</sc> – methods that are associated or bound to instances of a class.</p><ul>\n<li>These methods are called on an instance (object) and they can access attributes specific to that instance.</li>\n</ul></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-1\"></h2><python>class MyClass:\n    def my_method(self, argument1, argument2, ..., argumentN):\n        # do something \n</python><p>The first argument of every instance method is always refers to the object on which we are calling the method.</p><python>obj = MyClass()  # Create an instance\n\n# call my_method on obj\nobj.my_method(argument1, argument2, ..., argumentN)  \n</python><p>By convention, the first argument is always named <inline-code>self</inline-code>. (<inline-code>self</inline-code> is not a keyword! If we use any other name instead of <inline-code>self</inline-code>, it would not be an error.)</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"example-continued\">Example continued</h2><p>Let’s go back to the Student class:</p><ul>\n<li>Add a method <inline-code>display_info()</inline-code> that displays the information of a student i.e. prints the attributes of the instance.</li>\n</ul><p>Code available in the file <inline-code>student_example3.py</inline-code>.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-2\"></h2><div class=\"ppt-scale-1_25\"><p><span class=\"sans ppt-f70\">Understanding <inline-code>self</inline-code></span></p><iframe width=\"930\" height=\"500\" scrolling=\"no\" style=\"overflow: hidden;\" frameborder=\"0\" src=\"https://pythontutor.com/iframe-embed.html#code=class%20Student%3A%0A%20%20%20%20def%20__init__%28self,%20student_name,%20id_num%29%3A%0A%20%20%20%20%20%20%20%20self.name%20%3D%20student_name%0A%20%20%20%20%20%20%20%20self.id_num%20%3D%20id_num%0A%20%20%20%20%0A%20%20%20%20def%20display_info%28self%29%3A%0A%20%20%20%20%20%20%20%20print%28%22Name%20of%20student%3A%22,%20self.name%29%0A%20%20%20%20%20%20%20%20print%28%22Student%20ID%3A%22,%20self.id_num%29%0A%0As1%20%3D%20Student%28%22Reza%22,%2026000%29%0As1.display_info%28%29%0As2%20%3D%20Student%28%22Jane%22,%2026001%29%0As2.display_info%28%29&#x26;codeDivHeight=400&#x26;codeDivWidth=450&#x26;cumulative=false&#x26;curInstr=0&#x26;heapPrimitives=nevernest&#x26;origin=opt-frontend.js&#x26;py=3&#x26;rawInputLstJSON=%5B%5D&#x26;textReferences=false\"> </iframe></div></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"defining-functionsmethods-with-keyword-arguments\">Defining functions/methods with keyword arguments</h2><p>A keywords argument has a default value in function or method definition.</p><python lineno=\"false\" margin=\"1em 0\">def func(pos1, pos2, ..., name1=value1, name2=value2, ...):\n</python><p>Here, <inline-code>pos1</inline-code>, <inline-code>pos2</inline-code>, etc are positional arguments and<br>\n<inline-code>name1</inline-code>, <inline-code>name2</inline-code>, etc are keyword arguments with default values <inline-code>value1</inline-code>, <inline-code>value2</inline-code>, respectively.</p><p>Keyword arguments cannot appear before positional arguments.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-3\"></h2><p>If the function is called without passing a keyword argument, that argument gets its default value.</p><python>def greet(name, greeting=\"Hello\", num_of_times=1): \n    for i in range(num_of_times):\n        print(greeting, name)\n\n# try the following one at a time:\n# greet(\"Dev\")\n# greet(\"Dev\", greeting=\"Hi\")\n# greet(\"Dev\", num_of_times=3)\n# greet(\"Dev\", greeting=\"Hi\", num_of_times=3)\n# greet(\"Dev\", num_of_times=3, greeting=\"Hi\")\n</python></slide>\n<slide class=\"ppt-f90 slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"oop-continued-\">OOP continued </h2><python>class Student:\n    \"\"\" Represents a student. \"\"\"\n    \n    def __init__(self, student_name, id_num):\n        self.name = student_name\n        self.id_num = id_num\n    \n    def display_info(self):\n        print(\"Name of student:\", self.name)\n        print(\"Student ID:\", self.id_num)\n\n\nnew_student = Student(\"Bob\", 260000000)\nnew_student.display_info()\n# Name of student: Bob\n# Student ID: 260000000\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-4\"></h2><p>Let’s add a new attribute to store courses and a new method which allows adding a course.</p><python>s1 = Student(\"Robin\", 26005)\ns1.add_course(\"COMP 208\")\ns1.add_course(\"POLI 220\", pass_fail=True)\ns1.add_course(\"MATH 250\")\ns1.display_info()\n</python><output>Name of student: Robin\nStudent ID: 26005\nCourses: COMP 208, POLI 220 (pass/fail), MATH 250\n</output></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-5\"></h2><ul>\n<li>Add an attribute <inline-code>courses</inline-code>, initializing it to empty dictionary. This dictionary will store a course name as a key and a boolean value to indicate whether the course is registered as pass/fail.</li>\n<li>Update <inline-code>display_info</inline-code> method to also display a comma-separate list of course names. If there are no courses in the <inline-code>courses</inline-code> dictionary, do not display any line for it.</li>\n<li>Add a method <inline-code>add_course</inline-code> that takes as a course name (<inline-code>str</inline-code>) and a keyword argument <inline-code>pass_fail</inline-code> (default value: <inline-code>False</inline-code>) and adds them to the attribute <inline-code>courses</inline-code>.</li>\n</ul><p>Code available in the file <inline-code>student_methods.py</inline-code>.</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"displaying-objects-__str__-method\">Displaying objects: <inline-code>__str__</inline-code> method</h2><p>When we display <inline-code>student1</inline-code> we see what class the object belongs to, and the identity of the object.</p><python>s1 = Student(\"Dev\", 26001)\nprint(s1)\n</python><output>&#x3C;__main__.Student object at 0x7f8cd66aa890>\n</output><p>Wouldn’t it be nice to display <inline-code>name</inline-code>, <inline-code>id_num</inline-code> and other attributes when we do <inline-code>print(student1)</inline-code>?</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"__str__-method\"><inline-code>__str__</inline-code> method</h2><ul>\n<li>\n<p>We can change the string representation of our class objects by implementing a method called <inline-code>__str__</inline-code> in our class.</p>\n<python>def __str__(self):\n    # must return a string\n</python>\n</li>\n<li>\n<p>If we do that, then when we call <inline-code>print(obj)</inline-code> or <inline-code>str(obj)</inline-code> with an instance <inline-code>obj</inline-code> of our class, <inline-code>__str__</inline-code> method is called automatically and the returned string is used.</p>\n</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"try-it\">Try it!</h2><p>In the <inline-code>Student</inline-code> class, add a <inline-code>__str__</inline-code> method that returns a string in the following format:</p><pre><code>Name: &#x3C;name attribute>\nStudent ID: &#x3C;id_num attribute>\nCourses: &#x3C;comma-separated courses>\n</code></pre><p>Then, try to use print with an object of Student class.</p><p>Code available in the file <inline-code>student_str.py</inline-code>.</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"example--list-of-student-objects\">Example — List of Student objects</h2><python>students = [Student(\"Dev\", 260001),\n            Student(\"Reza\", 260005)]\n\n# Create a student object and append it to the list\nstudents.append(Student(\"Alice\", 260011))\n\nprint(students[2])  # uses __str__ of Student class\n# Name: Alice\n# Student ID: 260011\n# Courses: None registered.\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-6\"></h2><python># Continued from previous slide:\n\nprint(students) # Does not use __str__ of Student class\n# [&#x3C;__main__.Student object at 0x10ad16100>,\n#  &#x3C;__main__.Student object at 0x10ad169d0>,\n#  &#x3C;__main__.Student object at 0x10ad16a00>]\n\n\nfor s in students:\n    print(s)  # uses __str__ of Student class\n</python><divider></divider></slide>","title":"7.1 — Object Oriented Programming (OOP)","date":"2024-06-09","published":true,"section":"Lecture-7.1"}},"__N_SSG":true}