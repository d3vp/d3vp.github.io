{"pageProps":{"allSlugs":[["Lecture-1.1",[{"title":"1.1 — Programming Basics","slug":"Lecture-1.1"}]],["Lecture-1.2",[{"title":"1.2 — Variables, Arithmetic & String operations","slug":"Lecture-1.2"}]],["Lecture-2.1",[{"title":"2.1 — Function calls, Built-in functions, Expressions","slug":"Lecture-2.1"}]],["Lecture-2.2",[{"title":"2.2 —  Defining functions, Comparing Values, Control flow statements","slug":"Lecture-2.2"}]],["Lecture-2.3",[{"title":"2.3 — return vs. print, while statement","slug":"Lecture-2.3"}]],["Lecture-3.1",[{"title":"3.1 — Modules, String methods, break & continue statements","slug":"Lecture-3.1"}]],["Lecture-3.2",[{"title":"3.2 — Controlling print(), Nested Loops","slug":"Lecture-3.2"}]],["Lecture-3.3",[{"title":"3.3 — Scope of variables, Lists","slug":"Lecture-3.3"}]],["Lecture-4.1",[{"title":"4.1 — List methods, Tuples, Immutable objects","slug":"Lecture-4.1"}]],["Lecture-4.2",[{"title":"4.2 — Sets, Dictionaries","slug":"Lecture-4.2"}]],["Lecture-5.1",[{"title":"5.1 — Iterables, More dict & list operations, Nested lists","slug":"Lecture-5.1"}]],["Lecture-5.2",[{"title":"5.2 — Nested data structures, Comprehensions","slug":"Lecture-5.2"}]],["Lecture-5.3",[{"title":"5.3 — Sorting, Modules, Reading & Writing Files","slug":"Lecture-5.3"}]],["Lecture-6.1",[{"title":"6.1 — Files, Shallow vs. deep copy","slug":"Lecture-6.1"}]],["Lecture-6.2",[{"title":"6.2 — Handling exceptions, Object Oriented Programming (OOP)","slug":"Lecture-6.2"}]],["Lecture-7.1",[{"title":"7.1 — Object Oriented Programming (OOP)","slug":"Lecture-7.1"}]],["Lecture-7.2",[{"title":"7.2 — More OOP, Plotting using Matplotlib","slug":"Lecture-7.2"}]],["Lecture-7.3",[{"title":"7.3 — NumPy & Misc. topics","slug":"Lecture-7.3"}]]],"post":{"slug":"Lecture-2.1","content":"<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"function-calls\">Function calls</h2><p>Function take zero or more input values, perform an action or computation, and return the result value.</p><p>Input values passed to a function are called <sc>arguments</sc>.</p><p>A <sc>Function Call</sc> is an expression that looks like below:</p><div class=\"center code my3\"><p><span class=\"bgblue p1 br5\">function_name(argument1, argument2, …, argumentN)</span></p></div><p>How do we say it? — function “takes” argument(s) and “returns” a result. The result is also called the <sc>return value</sc>.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"\"></h2><p>The number of arguments required by a function depends on how that function is defined.</p><p>Following are some built-in functions available in Python:</p><python># min() function takes 2 or more numbers and returns the minimum \nx = min(1, -4, 6)\nprint(x)  # -4\n\n# abs() function takes a number and returns absolute value of the number\ny = abs(-6)\nprint(y)  # 6\n\n# Gives an error if we do not give exactly one number\nz = abs(-1, 4)\n# TypeError: abs() takes exactly one argument (2 given)\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"expressions-vs-statements\">Expressions vs Statements</h2><p>An <sc>Expression</sc> is any valid combination of values, variables, operators, function calls.</p><p>When executed, it always evaluates to a single object.</p><python>x = 3\ny = 4\nz = x ** 2 + y ** 2  # this expression evaluates to an int object\nprint(z)  # 25\n\ns = \"hello\"\ns2 = s * len(s) # this expression evaluates to str value\nprint(s2)  # hellohellohellohellohello\n\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-1\"></h2><p>A statement is one or more lines of code that performs a task but does not evaluate to any value.</p><p>So, statements cannot be used as a part of an expression.</p><python>>>> x = 123  # Does not evaluate to anything so nothing shows below\n>>> x  # This is an trivially an expression\n123\n>>> 10 + (x = 123)  # Trying to use assignment statement in an expression\n    10 + (x = 123)\n            ^\nSyntaxError: invalid syntax\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"function-composition\">Function composition</h2><p>Function composition is calling a function with the result(s) of another function(s).</p><p>It is a very useful thing to do especially when we do not need to store intermediate results.</p><div class=\"hgrid\"><div><div class=\"b\">Using intermediate variables</div><python>x = -5\ny = -8\na = abs(x)\nb = abs(y)\nz = min(a, b)\nprint(x, y, z)\n</python></div><div><div class=\"b\">Using composition</div><python>x = -5\ny = -8\nz = min(abs(x), abs(y))\nprint(x, y, z)\n</python></div></div></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-2\"></h2><p>Check <i>Built-in Functions</i> and problems on Ed Lessons.</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"print-displays-a-space-between-arguments\"><inline-code>print()</inline-code> displays a space between arguments</h2><python place=\"start\">num = 1.5e3\ncity = \"New York City\"\nyear = 2023\nprint(num, city, year)\n</python><p>First, the arguments of <inline-code>print()</inline-code> are evaluated as:</p><python place=\"start\">print(1500.0, \"New York City\", 2023)\n</python><p>Then, <inline-code>print()</inline-code> function is executed, which would display:</p><div class=\"code\" style=\"background-color: white; border-radius:5px; padding: 0.25rem 1rem;\"><p>1500.0<span style=\"background-color: red;\"> </span>New York City<span style=\"background-color: red;\"> </span>2023</p></div><div class=\"ppt-f90\" style=\"margin-top: 0.5em;\">(Highlighted in red are spaces added by <inline-code>print()</inline-code>)</div></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-3\"></h2><python place=\"start\">x1 = 1.5\ny1 = 2\n\nprint(\"Point:\", \"(\", x1, \",\", y1, \")\")\n</python><p>First, the arguments of <inline-code>print()</inline-code> are evaluated as:</p><python place=\"start\">print(\"Point:\", \"(\", 1.5, \",\", 2, \")\")\n</python><p>Then, <inline-code>print()</inline-code> function is executed, which would display:</p><div class=\"code\" style=\"background-color: white; border-radius:5px; padding: 0.25rem 1rem;\"><p><span>Point:</span><span style=\"background-color: red;\"> </span>(<span style=\"background-color: red;\"> </span>1.5<span style=\"background-color: red;\"> </span>,<span style=\"background-color: red;\"> </span>2<span style=\"background-color: red;\"> </span>)</p></div><div class=\"ppt-f90\" style=\"margin-top: 0.5em;\">(Highlighted in red are spaces added by <inline-code>print()</inline-code>)</div></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-4\"></h2><python place=\"start\">x1 = 1.5\ny1 = 2\n\npoint1 = \"(\" + str(x1) + \", \" + str(y1) + \")\" \nprint(\"Point:\", point1)\n</python><p>First, the arguments of <inline-code>print()</inline-code> are evaluated as:</p><python place=\"start\">print(\"Point:\", \"(1.5, 2)\")\n</python><p>Then, <inline-code>print()</inline-code> function is executed, which would display:</p><div class=\"code\" style=\"background-color: white; border-radius:5px; padding: 0.25rem 1rem;\"><p><span>Point:</span><span style=\"background-color: red;\"> </span>(1.5, 2)</p></div><div class=\"ppt-f90\" style=\"margin-top: 0.5em;\">(Highlighted in red are spaces added by <inline-code>print()</inline-code>)</div></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"debugging-in-thonny-to-understand-expression-evaluation\"><span class=\"ppt-f80\">Debugging in Thonny to understand expression evaluation</span></h2><div class=\"ppt-f87\"><p>In Thonny, we can use debugging features to understand how expressions are evaluated:</p><ul>\n<li>To show variables and their values, go to menu “View -> Variables”</li>\n<li>First, run program in <i>debug mode</i> by clicking the “Debug current script” button (located next to the “Run current script” button and looks like a bug)</li>\n<li>Then, we have two options:\n<ul>\n<li>Run the program line-by-line using “Step over” button next to the “Debug” button</li>\n<li>Run program going inside each expression using “Step into” button (located next to “Step over” button)</li>\n</ul>\n</li>\n</ul></div></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-5\"></h2><p>Try the following examples in Thonny and use debug:</p><python>x = 7\n\n# Increment value of variable x by 1\nx = x + 1\n\n#\ny = x * x + 2 * (x + 1) + max(x + 1, 5)\n\n# Calling print() with 4 arguments\nprint(\"x =\", x, \"y =\", y)\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-6\"></h2><python>x1 = 1.5\ny1 = 2\n\nprint(\"Given points:\", \"(\", x1, \",\", y1, \")\")\n\npoint1 = \"(\" + str(x1) + \", \" + str(y1) + \")\" \nprint(\"Given points:\", point1)\n</python><divider></divider></slide>","title":"2.1 — Function calls, Built-in functions, Expressions","date":"2024-05-05","published":true,"section":"Lecture-2.1"}},"__N_SSG":true}