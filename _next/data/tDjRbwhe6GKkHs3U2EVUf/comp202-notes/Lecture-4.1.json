{"pageProps":{"allSlugs":[["Lecture-1.1",[{"title":"1.1 — Programming Basics","slug":"Lecture-1.1"}]],["Lecture-1.2",[{"title":"1.2 — Variables, Arithmetic & String operations","slug":"Lecture-1.2"}]],["Lecture-2.1",[{"title":"2.1 — Function calls, Built-in functions, Expressions","slug":"Lecture-2.1"}]],["Lecture-2.2",[{"title":"2.2 —  Defining functions, Comparing Values, Control flow statements","slug":"Lecture-2.2"}]],["Lecture-2.3",[{"title":"2.3 — return vs. print, while statement","slug":"Lecture-2.3"}]],["Lecture-3.1",[{"title":"3.1 — Modules, String methods, break & continue statements","slug":"Lecture-3.1"}]],["Lecture-3.2",[{"title":"3.2 — Controlling print(), Nested Loops","slug":"Lecture-3.2"}]],["Lecture-3.3",[{"title":"3.3 — Scope of variables, Lists","slug":"Lecture-3.3"}]],["Lecture-4.1",[{"title":"4.1 — List methods, Tuples, Immutable objects","slug":"Lecture-4.1"}]],["Lecture-4.2",[{"title":"4.2 — Sets, Dictionaries","slug":"Lecture-4.2"}]],["Lecture-5.1",[{"title":"5.1 — Iterables, More dict & list operations, Nested lists","slug":"Lecture-5.1"}]],["Lecture-5.2",[{"title":"5.2 — Nested data structures, Comprehensions","slug":"Lecture-5.2"}]],["Lecture-5.3",[{"title":"5.3 — Sorting, Modules, Reading & Writing Files","slug":"Lecture-5.3"}]],["Lecture-6.1",[{"title":"6.1 — Files, Shallow vs. deep copy","slug":"Lecture-6.1"}]],["Lecture-6.2",[{"title":"6.2 — Handling exceptions, Object Oriented Programming (OOP)","slug":"Lecture-6.2"}]],["Lecture-7.1",[{"title":"7.1 — Object Oriented Programming (OOP)","slug":"Lecture-7.1"}]],["Lecture-7.2",[{"title":"7.2 — More OOP, Plotting using Matplotlib","slug":"Lecture-7.2"}]],["Lecture-7.3",[{"title":"7.3 — NumPy & Misc. topics","slug":"Lecture-7.3"}]]],"post":{"slug":"Lecture-4.1","content":"<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"review--iterating-through-a-list\">Review — Iterating through a list</h2><p>We can either use an index or loop directly over items in a list:</p><hgrid margin=\"0\"><python>def average(nums):\n    total = 0\n\n    for i in range(len(nums)):\n       total += nums[i]\n\n    return total / len(nums)\n\ngrades = [85, 100, 98, 75]\nprint(average(grades))\n</python><python>def average(nums):\n    total = 0\n\n    for x in nums:\n       total += x\n\n    return total / len(nums)\n\ngrades = [85, 100, 98, 75]\nprint(average(grades))\n</python></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"\"></h2><p>But when we need to modify a list inside a loop we have to use an index:</p><python>def add_bonus(grades, bonus):\n    \"\"\" Add bonus to each grade in grades list\n        (grade should not exceed 100)    \n        Returns: None\n    \"\"\"\n    for i in range(len(grades)):\n        grades[i] = min(grades[i] + bonus, 100)\n        \n        \nassignment_grades = [55, 60, 67, 97]\nadd_bonus(assignment_grades, 5)\nprint(assignment_grades)  # [60, 65, 72, 100]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-1\"></h2><p>Time for some problems on Ed Lessons.</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"built-in-functions-that-work-with-lists\">Built-in functions that work with lists</h2><python>grades = [90, 70, 60.5, 70, 80]\n\n# len(x): \n#   Returns the number of items in the list x.\nprint(len(grades))  # 5\n\n# sum(x): \n#   Returns the sum of all the numbers in list x.\n#   A TypeError occurs when some item is not a number.\nprint(sum(grades))  # 370.5\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-2\"></h2><python>grades = [90, 70, 60.5, 70, 80]\n\n# min(x) / max(x) : \n#   Returns the smallest/largest item in the list x.\n#   A TypeError occurs if the items cannot be compared.\n\nprint(min(grades))  # 60.5\n\nprint(max(grades))  # 90\n\nprint(min([\"90\", 70, 60.5, 70, 80]))\n# TypeError: '&#x3C;' not supported between instances of 'int' and 'str'\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"list-methods\">List methods</h2><p>Python has several methods that we can call on a list object:</p><python># list.append(x): Adds the item x to the end of the list\n\ngrades = [90, 70, 60.5, 70, 80]\ngrades.append(100)\nprint(grades)  # [90, 70, 60.5, 70, 80, 100]\n\ngrades.append(\"30\")\nprint(grades)  # [90, 70, 60.5, 70, 80, 100, '30']\n\ngrades.append(False)\nprint(grades)  # [90, 70, 60.5, 70, 80, 100, '30', False]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-3\"></h2><p><b>Example:</b></p><python>def filter_values(nums, threshold):\n    ''' Return a new list to include numbers from \n        the list nums that are above threshold\n    '''\n    new_list = []\n    \n    for n in nums:\n        if n > threshold:\n            new_list.append(n)\n\n    return new_list\n\nprint(filter_values([3, 1, 2, 5, 4], 3))  # [5, 4]\nprint(filter_values([3, 1, 2, 5, 4], 5))  # []\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-4\"></h2><python># list.insert(i, x): Adds the item x to the list at index i\n\ngrades = [90, 70, 60.5, 70, 80]\ngrades.insert(0, 100)\nprint(grades)  # [100, 90, 70, 60.5, 70, 80]\n\n# insert() works even when index is greater than length of list\ngrades = [90, 70, 60.5, 70, 80]\ngrades.insert(10, \"B+\")\nprint(grades)  # [90, 70, 60.5, 70, 80, 'B+']\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-5\"></h2><python># list.remove(x): \n#   Removes the first occurrence of the item x in the list. \n#   A ValueError occurs if there is no such item.\n\ngrades = [90, 70, 60.5, 70, 80, 'B+']\ngrades.remove(70)\nprint(grades)  # [90, 60.5, 70, 80, 'B+']\n\ngrades.remove(\"B+\")\nprint(grades)  # [90, 60.5, 70, 80]\n\ngrades.remove(60)\n# ValueError: list.remove(x): x not in list\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-6\"></h2><python># list.pop(i): \n#   Removes and returns item at index i \n# list.pop(): \n#   Removes and returns the last item from the list\n\ngrades = [90, 70, 60.5, 70, 80, 'B+']\nlast_item = grades.pop()\nprint(last_item)  # B+\nprint(grades)  # [90, 70, 60.5, 70, 80]\n\nsecond_item = grades.pop(1)\nprint(second_item)  # 70\nprint(grades)  # [90, 60.5, 70, 80]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-7\"></h2><python># list.count(x) : \n#   Returns the number of occurrences of the item x. \n\ngrades = [90, 70, 60.5, 70, 80, 'B+']\nprint(grades.count(70))  # 2\nprint(grades.count(\"B+\"))  # 1\nprint(grades.count(60))  # 0\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-8\"></h2><python># list.index(x) : \n#   Returns the index of the first occurrence of item x in list. \n#   A ValueError occurs if item x is not found in list.\n\ngrades = [90, 70, 60.5, 70, 80, 'B+']\n\nprint(grades.index(70))  # 1\nprint(grades.index(60)) # ValueError: 60 is not in list\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-9\"></h2><python># list.extend(sequence) : \n#   Extend list by appending items from the sequence.\n\ngrades = [90, 70, 60.5, 70, 80]\n\ngrades.extend([100, 95])\nprint(grades)  # [90, 70, 60.5, 70, 80, 100, 95]\n\ngrades.extend(\"cat\")\nprint(grades)\n# [90, 70, 60.5, 70, 80, 100, 95, 'c', 'a', 't']\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"lists-and-strings\">Lists and Strings</h2><p>There are built-in functions and string methods that allows us to transform strings to/from lists.</p><python># list(seq): built-in function which converts a sequence (such as\n#   a string or a list) into a list\n\nfruit = \"apple\"\nletters = list(fruit)\nprint(letters)  # ['a', 'p', 'p', 'l', 'e']\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-10\"></h2><python># s.split(): Breaks the string s using whitespace\n#   (spaces, tab character and newline) as the separator and\n#   returns a list of strings containing the separated parts\n\ndata = \"Red Green Blue\"\nnames = data.split()\nprint(names)  # ['Red', 'Green', 'Blue']\n\n# Multiple spaces are also removed\ndata = \"  Red    Green     Blue  \"\nnames = data.split()\nprint(names)  # ['Red', 'Green', 'Blue']\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-11\"></h2><python>data = \"Red\\tGreen\\tBlue\" # separated by tab\nnames = data.split()\nprint(names)  # ['Red', 'Green', 'Blue']\n\ndata = \"\"\"Red\nGreen\nNavy Blue\"\"\"\nnames = data.split()\nprint(names)  # ['Red', 'Green', 'Navy', 'Blue']\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-12\"></h2><python># s.splitlines(): Breaks a multi-lines strings into separate lines\n#   and returns a list containing those lines.\n\ndata = \"\"\"Red\n    Green\nNavy Blue\n\"\"\"\nnames = data.splitlines()\nprint(names)  # ['Red', '    Green', 'Navy Blue']\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-13\"></h2><hgrid margin=\"0 0 0 -1em\"><python># s.strip():  Return a copy of the string with \n#     leading and trailing whitespace removed.\n# s.lstrip(): removes leading whitespace only \n# s.rstrip(): removes trailing whitespace only \n\nname = \"    Green    \"\nprint(\"|\" + name + \"|\") \nprint(\"|\" + name.strip() + \"|\")\nprint(\"|\" + name.lstrip() + \"|\")\nprint(\"|\" + name.rstrip() + \"|\")\n</python><output>|    Green    |\n|Green|\n|Green    |\n|    Green|\n</output></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-14\"></h2><hgrid margin=\"0 0 0 -2em\" class=\"ppt-f95\"><python># s.strip(chars):  Return a copy of the string \n# with leading and trailing chars removed.\n# s.lstrip(chars): removes leading chars only \n# s.rstrip(chars): removes trailing chars only \n\ntext = \"...#some . text   #...\"\n\nprint(text.strip(\".\"))\nprint(text.lstrip(\".\"))\nprint(text.rstrip(\".\"))\n\n# multiple chars to remove\nprint(text.strip(\". #\"))\n</python><output>#some . text   #\n#some . text   #...\n...#some . text   #\nsome . text\n</output></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-15\"></h2><python># s.split(sep): Breaks the string s using the separator string sep\n#   and returns a list of strings containing the separated parts\n\ndata = \"Red,Green,Blue\"\nnames = data.split(\",\")\nprint(names)  # ['Red', 'Green', 'Blue']\n\ndata = \"Red,   Green,   Blue\"\nnames = data.split(\",\")\nprint(names)  # ['Red', '   Green', '   Blue'] \n# notice space in strings above\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-16\"></h2><python># sep.join(L): joins all the strings in the list L using \n#   the string sep and returns the joined string.\n\nnames = ['Red', 'Green', 'Blue']\njoined = \" \".join(names)\nprint(joined)  # Red Green Blue\n\n# a comma\njoined = \",\".join(names)\nprint(joined)  # Red,Green,Blue\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-17\"></h2><python># a comma and a space\nnames = ['Red', 'Green', 'Blue']\njoined = \", \".join(names)\nprint(joined)  # Red, Green, Blue\n\n# empty string, no separator\nletters = [\"a\", \"p\", \"p\", \"l\", \"e\"]\njoined = \"\".join(letters)\nprint(joined)  # apple\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-18\"></h2><p>Time for some problems on Ed Lessons.</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"tuples\">Tuples</h2><ul>\n<li>A tuple is an ordered collection of objects, like lists.</li>\n<li>A tuple is <i>immutable</i>. A tuple object cannot be modified after it is created.</li>\n<li>We create a tuple using parentheses <inline-code>()</inline-code>.</li>\n</ul><python>tup = (1, 2, 3)\nprint(type(tup))  # &#x3C;class 'tuple'>\n\n# tuple with only one item\ntup = (10,)  # comma is required!\nprint(tup, type(tup))  # (10,) &#x3C;class 'tuple'>\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-19\"></h2><p>We can use <inline-code>tuple</inline-code> function to convert other sequences such as lists and strings into a tuple.</p><python>word = \"apple\"\ntup = tuple(word)\nprint(tup)\n# ('a', 'p', 'p', 'l', 'e')\n\nprimes = [2, 3, 5, 7]\nprimes = tuple(primes)\nprint(primes)\n# (2, 3, 5, 7)\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"tuples-are-immutable\">Tuples are immutable</h2><p>Items cannot be added, removed or changed in a tuple.</p><p>Therefore, unlike lists, none of the operations that modify a tuple are allowed.</p><python>x = (1, 1, 2, 3, 5)\nx[3] = 100\n# TypeError: 'tuple' object does not support item assignment\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-20\"></h2><p>Assigning a new object to a variable does not affect/modify the current object the variable refers to.</p><python>x = (1, 1, 2, 3, 5)\n\n# This does not modify the above tuple object so\n# it is allowed\nx = (1, 2, 3)  \n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-21\"></h2><p>In general, operations that do not modify a tuple are available.</p><python>tup = (45, 23, 'abc') \n\n# Indexing and slicing work the same way as lists.\nprint(tup[1])\n# 23\nprint(tup[1:])\n# (23, 'abc')\n\nprint(len(tup))  # number of items in a tuple\n# 3\n</python><p>Similary <inline-code>min()</inline-code>, <inline-code>max()</inline-code>, and <inline-code>sum()</inline-code> functions work with tuples.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-22\"></h2><python>tup = (45, 23, 'abc') \n\n# Following methods are available for tuples\nprint(tup.index(\"abc\"))\n# 2\n\nprint(tup.count(23))\n# 1\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-23\"></h2><p>Since a tuple is a sequence, we can use it in a <inline-code>for</inline-code> loop just like a list:</p><hgrid><python>numbers = (10, 20, 30)\n\nfor n in numbers:\n    print(n)\n</python><output>10\n20\n30\n</output></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"why-use-tuples\">Why use tuples?</h2><p>If lists are more flexible than tuples, why should we use tuples?</p><ul>\n<li>Immutability is useful to avoid changing data by mistake.</li>\n<li>We can use tuples as elements of sets and as keys in a dictionary.</li>\n<li>Programs are a bit faster when working with tuples.</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"object-identity\">Object Identity</h2><ul>\n<li>Each object is assigned an <sc>ID</sc> at its creation (think of a memory address).</li>\n<li>This ID is unique and constant for this object as long as the object exists.</li>\n<li>The built-in function <inline-code>id()</inline-code> can be used to retrieve the ID of an object.</li>\n</ul><python>x = 1234\ny = x\n# x and y both refer to the same object, \n# therefore the IDs are the same.\nprint(id(x) == id(y))  # True\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-24\"></h2><python># x and y point to two different objects, \n# therefore we expect x and y to have different IDs.\nx = 1234\ny = 5678\nprint(id(x) == id(y))  # False\n\n# x and y point to two different objects (with the same value),\n# therefore we expect x and y to have different IDs.\nx = int(\"1234\")  # integer 1234\ny = int(\"12\" + \"34\")  # integer 1234\n\nprint(id(x) == id(y))  # False\n</python></slide>\n<slide class=\"ppt-f95 slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"identity-operators-\">Identity operators </h2><ul>\n<li><inline-code>is</inline-code> and <inline-code>is not</inline-code> are comparison operators used to check if the two operands refer to the same object.</li>\n<li>Using <inline-code>is</inline-code> operator means: are two variables referring to one and the same object?</li>\n<li>Using <inline-code>==</inline-code> operator means: are two variables referring to objects that contain same data?</li>\n</ul><hgrid><python>x = int(\"1234\")\ny = int(\"12\" + \"34\")\nz = x \nprint(x == y)  # True\nprint(x == z)  # True\n</python><python>x = int(\"1234\")\ny = int(\"12\" + \"34\")\nz = x \nprint(x is y)  # False\nprint(x is z)  # True\n</python></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"mutable-vs-immutable-objects\">Mutable vs Immutable objects</h2><p><sc>Immutable</sc>: the content of the object cannot be changed after the object has been created.</p><ul>\n<li>e.g. <inline-code>str</inline-code>, <inline-code>int</inline-code>, <inline-code>float</inline-code>, <inline-code>tuple</inline-code></li>\n</ul><p><sc>Mutable</sc>: the content of the object can be changed after its creation without changing its identity.</p><ul>\n<li>e.g. <inline-code>list</inline-code>, <inline-code>dict</inline-code>, <inline-code>set</inline-code></li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"strings-are-immutable\">Strings are immutable</h2><p>Unlike lists, we cannot use the square brackets to modify a character in the string.</p><python lineno=\"false\">s = \"cats\"\ns[0] = \"r\"  # TypeError: 'str' object does not support item assignment\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-25\"></h2><p>All strings operations that seem to change a string actually <i>create</i> a new string.</p><hgrid><python>s = \"cat\"\nt = s\nprint(\"Before:\", s is t)\n\ns = s.replace('c','r')\nprint(\"After:\", s is t)\n\nprint(\"s:\", s)\nprint(\"t:\", t)\n</python><output>Before: True\nAfter: False\ns: rat\nt: cat\n</output></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"lists-are-mutable\">Lists are mutable</h2><p>The following code does not create a copy of the list <inline-code>x</inline-code>.<br>\nIt simply create a new variable name for the same list.</p><python>x = [1, 2, 3]\ny = x  # new name y for same list\n\nprint(x is y)  # True\n</python><p>Let us see some implications of this.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-26\"></h2><p>In the following illustrations, think about what is modified.</p><ul>\n<li>Whether a variable changes its value i.e. the variable refers to a different value</li>\n<li>Whether a list object is modified i.e. some element of the list is changed.</li>\n</ul></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-27\"></h2><div class=\"ppt-scale-1_25\"><iframe width=\"800\" height=\"310\" scrolling=\"no\" style=\"overflow: hidden;\" frameborder=\"0\" src=\"https://pythontutor.com/iframe-embed.html#code=x%20%3D%205%0Ay%20%3D%20x%0Ay%20%3D%20y%20%2B%203%20%0Aprint%28x,%20y%29&#x26;codeDivHeight=400&#x26;codeDivWidth=350&#x26;cumulative=false&#x26;curInstr=0&#x26;heapPrimitives=true&#x26;origin=opt-frontend.js&#x26;py=3&#x26;rawInputLstJSON=%5B%5D&#x26;textReferences=false\"> </iframe></div></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-28\"></h2><div class=\"ppt-scale-1_25\"><iframe width=\"800\" height=\"400\" scrolling=\"no\" style=\"overflow: hidden;\" frameborder=\"0\" src=\"https://pythontutor.com/iframe-embed.html#code=x%20%3D%20%5B5,%206,%207%5D%0Ay%20%3D%20x%0Ay%5B0%5D%20%3D%20y%5B0%5D%20%2B%203%0Aprint%28x%5B0%5D,%20y%5B0%5D%29&#x26;codeDivHeight=400&#x26;codeDivWidth=350&#x26;cumulative=false&#x26;curInstr=0&#x26;heapPrimitives=true&#x26;origin=opt-frontend.js&#x26;py=3&#x26;rawInputLstJSON=%5B%5D&#x26;textReferences=false\"> </iframe></div></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-29\"></h2><div class=\"ppt-scale-1_25\"><iframe width=\"800\" height=\"400\" scrolling=\"no\" style=\"overflow: hidden;\" frameborder=\"0\" src=\"https://pythontutor.com/iframe-embed.html#code=def%20example%28x%29%3A%0A%20%20%20%20x%20%3D%20x%20*%205%0A%0Ax%20%3D%205%0Aexample%28x%29%20%0Aprint%28x%29&#x26;codeDivHeight=400&#x26;codeDivWidth=350&#x26;cumulative=false&#x26;curInstr=0&#x26;heapPrimitives=true&#x26;origin=opt-frontend.js&#x26;py=3&#x26;rawInputLstJSON=%5B%5D&#x26;textReferences=false\"> </iframe></div></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-30\"></h2><div class=\"ppt-scale-1_25\"><iframe width=\"800\" height=\"500\" scrolling=\"no\" style=\"overflow: hidden;\" frameborder=\"0\" src=\"https://pythontutor.com/iframe-embed.html#code=def%20example%28x%29%3A%0A%20%20%20%20x%5B0%5D%20%3D%20x%5B0%5D%20*%205%0A%0Ax%20%3D%20%5B5,%206,%207%5D%0Aexample%28x%29%0Aprint%28x%5B0%5D%29&#x26;codeDivHeight=400&#x26;codeDivWidth=350&#x26;cumulative=false&#x26;curInstr=0&#x26;heapPrimitives=true&#x26;origin=opt-frontend.js&#x26;py=3&#x26;rawInputLstJSON=%5B%5D&#x26;textReferences=false\"> </iframe></div><divider></divider></slide>","title":"4.1 — List methods, Tuples, Immutable objects","date":"2024-05-20","published":true,"section":"Lecture-4.1"}},"__N_SSG":true}