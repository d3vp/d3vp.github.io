{"pageProps":{"allSlugs":[["Lecture-1.1",[{"title":"1.1 — Programming Basics","slug":"Lecture-1.1"}]],["Lecture-1.2",[{"title":"1.2 — Variables, Arithmetic & String operations","slug":"Lecture-1.2"}]],["Lecture-2.1",[{"title":"2.1 — Function calls, Built-in functions, Expressions","slug":"Lecture-2.1"}]],["Lecture-2.2",[{"title":"2.2 —  Defining functions, Comparing Values, Control flow statements","slug":"Lecture-2.2"}]],["Lecture-2.3",[{"title":"2.3 — return vs. print, while statement","slug":"Lecture-2.3"}]],["Lecture-3.1",[{"title":"3.1 — Modules, String methods, break & continue statements","slug":"Lecture-3.1"}]],["Lecture-3.2",[{"title":"3.2 — Controlling print(), Nested Loops","slug":"Lecture-3.2"}]],["Lecture-3.3",[{"title":"3.3 — Scope of variables, Lists","slug":"Lecture-3.3"}]],["Lecture-4.1",[{"title":"4.1 — List methods, Tuples, Immutable objects","slug":"Lecture-4.1"}]],["Lecture-4.2",[{"title":"4.2 — Sets, Dictionaries","slug":"Lecture-4.2"}]],["Lecture-5.1",[{"title":"5.1 — Iterables, More dict & list operations, Nested lists","slug":"Lecture-5.1"}]],["Lecture-5.2",[{"title":"5.2 — Nested data structures, Comprehensions","slug":"Lecture-5.2"}]],["Lecture-5.3",[{"title":"5.3 — Sorting, Modules, Reading & Writing Files","slug":"Lecture-5.3"}]],["Lecture-6.1",[{"title":"6.1 — Files, Shallow vs. deep copy","slug":"Lecture-6.1"}]],["Lecture-6.2",[{"title":"6.2 — Handling exceptions, Object Oriented Programming (OOP)","slug":"Lecture-6.2"}]],["Lecture-7.1",[{"title":"7.1 — Object Oriented Programming (OOP)","slug":"Lecture-7.1"}]],["Lecture-7.2",[{"title":"7.2 — More OOP, Plotting using Matplotlib","slug":"Lecture-7.2"}]],["Lecture-7.3",[{"title":"7.3 — NumPy & Misc. topics","slug":"Lecture-7.3"}]]],"post":{"slug":"Lecture-5.3","content":"<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"\"></h2><p><b class=\"sans\">How list is stored</b></p><hgrid gap=\"1em\" margin=\"0.5em 0\"><python lineno=\"false\">mylist = [3, 17, 42]\n</python><img style=\"width: 100%\" src=\"lecture-8.1/mylist_actual.png\"></hgrid><hgrid cols=\"1fr 4fr\" margin=\"0.5em 0\"><p><b class=\"sans\">Simplified:</b></p><img style=\"width: 70%\" src=\"lecture-8.1/mylist_simplified.png\"></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-1\"></h2><p><b class=\"sans\">How <i>nested list</i> is stored</b></p><python lineno=\"false\" margin=\"0.5em 0\">nested_list = [[3, 17, 42], [10, 20, 30]]\n</python><img style=\"width: 65%; margin: 1em auto;\" src=\"lecture-8.1/nested_list.png\"></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-2\"></h2><hgrid margin=\"0\"><python lineno=\"false\" margin=\"0.5em 0\">zeros = [0] * 5\nC = [zeros] * 3\nC[1][3] = 100  \nprint(C)    \n</python><python lineno=\"false\" margin=\"0.5em 0\">zeros = [0] * 5\nC = []\nfor i in range(3):\n    C.append(zeros)\nC[1][3] = 100  \nprint(C)    \n</python><output>[[0, 0, 0, 100, 0], \n [0, 0, 0, 100, 0], \n [0, 0, 0, 100, 0]]\n</output></hgrid><img style=\"width: 80%; margin: 0.5em auto;\" src=\"lecture-8.1/nested_zeros.png\"></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-3\"></h2><hgrid margin=\"0\" cols=\"1fr 4fr\"><python lineno=\"false\" margin=\"0.5em 0\">C = []\nfor i in range(3):\n    C.append([0] * 5)\nC[1][3] = 100  \nprint(C)\n</python><img style=\"width: 100%; margin: 0.5em auto;\" src=\"lecture-8.1/nested_zeros_correct.png\"></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"lexicographic-order\">Lexicographic order</h2><p>Given two sequences <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><msub><mi>a</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">a = a_0, a_1, ..., a_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">...</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> and <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>=</mo><msub><mi>b</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>b</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><msub><mi>b</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">b = b_0, b_1, ..., b_m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">...</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span>, if they are not equal, their ordering (whether <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>&#x3C;</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a &#x3C; b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&#x3C;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span></span>) is decided as follows:</p><ul>\n<li>If <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span></span> is the first index where the mismatch occurs, then the order is decided by result of <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>&#x3C;</mo><msub><mi>b</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i &#x3C; b_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&#x3C;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span></li>\n<li>If there is no mismatch and <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span></span> is shorter sequence than <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span></span>, then <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span></span> must match <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span></span> at the beginning (i.e. <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span></span> is subsequence of <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span></span> starting at index <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span></span>). In this case, <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>&#x3C;</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a &#x3C; b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&#x3C;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span></span> is true.</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"comparing-strings\">Comparing strings</h2><p>Comparison operators work for strings as well.<br>\nThe comparison is done <i>alphabetically</i> (i.e. follows order in Character Encoding such as ASCII or Unicode: <a href=\"https://d3vp.github.io/comp202-notes/Lecture-1.1.html#text-in-binary\">https://d3vp.github.io/comp202-notes/Lecture-1.1.html#text-in-binary</a>)</p><div class=\"hgrid\"><python>>>> \"cat\" == \"cat\"\nTrue\n>>> \"cat\" == \"dog\"\nFalse\n>>> \"cat\" != \"Cat\"\nTrue\n</python><python># \"c\" appears before \"d\" alphabetically\n>>> \"cat\" &#x3C; \"dog\"\nTrue\n\n# A-Z appear before a-z alphabetically\n>>> \"cat\" &#x3C; \"Dog\"\nFalse\n</python></div></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-4\"></h2><python># The first mismatched letter decides the order\n>>> \"apple\" &#x3C; \"apply\"\nTrue\n\n# Shorter string is \"minimum\" if all letters in it match\n>>> \"app\" &#x3C; \"apple\"\nTrue\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-5\"></h2><python># Objects of different types are always not equal\n>>> \"cat\" == 123\nFalse\n\n# inequality is not allowed \n# between a number and str\n>>> \"cat\" &#x3C; 123\nTypeError: '&#x3C;' not supported between instances of 'str' and 'int'\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"comparing-sequences--lists--tuples\">Comparing sequences — lists &#x26; tuples</h2><p>For comparing sequences like lists and tuples, lexicographic order is used — comparing items at same index from beginning to end.</p><python>>>> [10, 20, 30] &#x3C; [10, 25, 30]\nTrue\n\n# Here: \"banana\" &#x3C; \"orange\" decides the order\n>>> [\"apple\", \"banana\"] &#x3C; [\"apple\", \"orange\"]\nTrue\n# Here: \"app\" &#x3C; \"apple\" decides the order\n>>> [\"apple\", \"banana\"] &#x3C; [\"app\", \"orange\"]\nFalse\n\n# Comparison tuples works the same way as lists\n>>> (1, 1, 3) &#x3C; (1, 2, 3)\nTrue\n\n\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-6\"></h2><python># Shorter sequence is \"minimum\" if all items in it match\n>>> [1, 2] &#x3C; [1, 2, 3]\nTrue\n>>> (10, 15) &#x3C; (10, 15, 20)\nTrue\n\n>>> [1, 5] &#x3C; [1, 2, 3]\nFalse\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"sorting-a-list-using-sort-method\">Sorting a list using <inline-code>sort</inline-code> method</h2><python># list.sort() : \n#   Sorts the list \"in place\" i.e. list will be modified.\n#   Returns None.\n#   The list is sorted in ascending order.\n\ngrades = [90, 70, 60.5, 70, 80]\ngrades.sort()\nprint(grades)  # [60.5, 70, 70, 80, 90]\n\n\ngrades.sort(reverse=True)  # descending order\nprint(grades)  # [90, 80, 70, 70, 60.5]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-7\"></h2><python>grades = [90, 70, 60.5, 70, 80, \"A\"]\ngrades.sort()\n# TypeError: '&#x3C;' not supported between instances of 'str' and 'int'\n\n\n# Works with strings as well\nfruits = [\"banana\", \"orange\", \"apple\"]\nfruits.sort()\nprint(fruits)  # ['apple', 'banana', 'orange']\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"sorted-function\"><inline-code>sorted</inline-code> function</h2><python># sorted(iterable): \n#   Return a new list containing all items from \n#   the iterable in ascending order.\n#   If any items cannnot be compared to each other, TypeError occurs.\n\ngrades = [90, 70, 60.5, 70, 80]\nsorted_grades = sorted(grades)\nprint(sorted_grades)  # [60.5, 70, 70, 80, 90]\nprint(grades)  # [90, 70, 60.5, 70, 80]\n\n# Sort in descending order\nsorted_grades = sorted(grades, reverse=True)\nprint(sorted_grades)  # [90, 80, 70, 70, 60.5]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-8\"></h2><python># string is iterable\nword = \"pineapple\"\nsorted_letters = sorted(word)\nprint(sorted_letters)\n# ['a', 'e', 'e', 'i', 'l', 'n', 'p', 'p', 'p']\n\n\n# set is iterable\nfruits = {\"banana\", \"orange\", \"apple\"}\nsorted_fruits = sorted(fruits)\nprint(sorted_fruits)  # ['apple', 'banana', 'orange']\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-9\"></h2><python># dictionary is considered as an iterable of its keys\ninventory = {\"sofa\": 5, \"table\": 10, \"chair\": 20, \"mattress\": 5}\nsorted_names = sorted(inventory)\nprint(sorted_names)  # ['chair', 'mattress', 'sofa', 'table']\n\n# same as above\nsorted_names = sorted(inventory.keys())\nprint(sorted_names)  # ['chair', 'mattress', 'sofa', 'table']\n\n# iterable of values in the dictionary\nsorted_counts = sorted(inventory.values())\nprint(sorted_counts)  # [5, 5, 10, 20]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-10\"></h2><python>points = [(4, 10, 9), (1, 1, 3), (7, 4, 11)]\n\nprint(min(points))  # (1, 1, 3)\n\nprint(max(points))  # (7, 4, 11)\n\nprint(sorted(points))\n# [(1, 1, 3), (4, 10, 9), (7, 4, 11)]\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"enumerate-function\"><inline-code>enumerate</inline-code> function</h2><python>mylist = [10, 50, -3.14, 5]\nprint(enumerate(mylist))\n# &#x3C;enumerate object at 0x10e327100>\n\n# enumerate creates an iterable of tuples (index, element), \n# which we convert to list\nlist_of_tuples = list(enumerate(mylist))\nprint(list_of_tuples)\n# [(0, 10), (1, 50), (2, -3.14), (3, 5)]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-11\"></h2><hgrid><python>mylist = [10, 50, -3.14, 5]\n\nfor i in range(len(mylist)):\n    num = mylist[i]\n    print(i, num)\n</python><python>mylist = [10, 50, -3.14, 5]\n\nfor i, num in enumerate(mylist):\n    print(i, num)\n</python></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"writing--importing-modules\">Writing &#x26; importing modules</h2><ul>\n<li>What are modules exactly?\n<ul>\n<li>A module is simply a Python file containing definitions and statements.</li>\n<li>Every <inline-code>.py</inline-code> file is a module. The name of the module is the name of the file.</li>\n</ul>\n</li>\n<li>Name of a Python file (module) must follow same rules as variable names.\n<ul>\n<li>Module names can only start with letters a-z, A-Z or an underscore and must only contain these letters, digits and underscores.</li>\n</ul>\n</li>\n</ul></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-12\"></h2><p>Download module-files.zip from Ed Lessons. It contains <inline-code>geometry.py</inline-code> and <inline-code>geometry_tester.py</inline-code></p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-13\"></h2><p>In <inline-code>geometry_tester.py</inline-code> file, we import and use the functions defined in the module <inline-code>geometry</inline-code>:</p><python># Import functions from the module\nfrom geometry import euclidean_distance, sine\n\n# Call the sine function\nprint(sine(90))\n\ndist = euclidean_distance((1, 1), (2, 3))  # tuples\nprint(dist)  # 2.23606797749979\n\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"some-observations\">Some observations</h2><ul>\n<li>When we import a module, all code inside that module is executed.</li>\n<li>Add some statement such as <inline-code>print(\"hello\")</inline-code> in <inline-code>geometry</inline-code> module outside the functions. Then,\n<ul>\n<li>Run the <inline-code>geometry.py</inline-code> as the main program</li>\n<li>Run another program which imports the module <inline-code>geometry</inline-code>.</li>\n</ul>\n</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"running-a-file-as-main-program-vs-importing-it\">Running a file as main program vs importing it</h2><ul>\n<li>Sometimes, we may want to run some code only when a Python file is executed directly as main program but not when it is imported as a module.</li>\n<li>For example, suppose we want the following test cases in <inline-code>geometry.py</inline-code>\n<python>print(sine(-90))\nprint(sine(180))\n</python>\n</li>\n<li>How to make sure the test cases do not execute when <inline-code>geometry</inline-code> is imported as a module?</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"__name__\"><inline-code>__name__</inline-code></h2><ul>\n<li><inline-code>__name__</inline-code> is a special variable that the interpreter initializes whenever it executes a file.</li>\n<li>When a module is executed, the interpreter does the following:\n<ul>\n<li>sets the value of <inline-code>__name__</inline-code> for that module using the filename</li>\n<li>executes all the code in the module.</li>\n</ul>\n</li>\n<li>Each module has its own <inline-code>__name__</inline-code> variable.</li>\n<li>Add <inline-code>print(__name__)</inline-code> in <inline-code>geometry.py</inline-code> and import <inline-code>geometry</inline-code> module in another program.</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"__main__\"><inline-code>\"__main__\"</inline-code></h2><ul>\n<li>When we execute a file as the main program, then the variable <inline-code>__name__</inline-code> is set to be <inline-code>\"__main__\"</inline-code></li>\n<li>Run <inline-code>geometry.py</inline-code> directly and see what value of <inline-code>__name__</inline-code> is printed.</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"how-to-not-execute-code-in-a-module-when-it-is-imported\">How to <i>not execute</i> code in a module when it is imported</h2><p>Add the following at the end of the file <inline-code>geometry.py</inline-code>:</p><python>if __name__ == \"__main__\":\n    # Run the following code only when this file is \n    # executed as main program but not when it is imported\n    print(\"hello from geometry!\")\n    print(sine(-90))\n    print(sine(180))\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"how-to-work-with-a-file-in-python\">How to work with a file in Python</h2><p>A file is a sequence of characters or bytes stored on a storage device such as a hard drive.</p><ul>\n<li>Open the file using the built-in function <inline-code>open()</inline-code></li>\n<li>Read data from the file or write data into the file</li>\n<li>Close the file</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"opening-a-file-with-open\">Opening a file with <code>open()</code></h2><p>Built-in function <inline-code>open(filename, mode)</inline-code>:</p><ul>\n<li><inline-code>filename</inline-code> (str): name of the file to read (if the file is in the current directory) or full path to the file.</li>\n<li><inline-code>mode</inline-code> (str): <inline-code>'r'</inline-code> for reading, <inline-code>'w'</inline-code> for writing, <inline-code>'a'</inline-code> for appending. If this argument is omitted, it defaults to <inline-code>'r'</inline-code></li>\n<li>Returns: a <sc>file object</sc> which allows reading from/writing to the file.</li>\n</ul><python>filename = \"quotes.txt\"\nfobj = open(filename, \"r\") # mode \"r\" for reading\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"reading-a-file-with-read-method-of-file-object\">Reading a file with <code>read()</code> method of file object</h2><p>File objects have a method <inline-code>read(size)</inline-code> that takes one optional argument:</p><ul>\n<li><inline-code>size</inline-code>: the number of characters to read from the file\n<ul>\n<li>If omitted, the entire file will be read.</li>\n</ul>\n</li>\n<li>Returns: a string containing the characters in the file</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"closing-a-file-with-close-method-of-file-object\">Closing a file with <code>close()</code> method of file object</h2><ul>\n<li><inline-code>close()</inline-code> method takes no argument and returns nothing. It closes the file associated with the file object</li>\n</ul></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-14\"></h2><p>For the following example, download the files from Ed Lessons and keep them in the same directory as the python program.</p><python>filename = \"quotes.txt\"\nfobj = open(filename, \"r\") # mode \"r\" for reading \n\nfile_content = fobj.read() # read whole file as a string\nprint(file_content) # print the string \n\nfobj.close()  # close the file\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"why-close-a-file\">Why close a file?</h2><p>Closing the file is important for many reasons</p><ul>\n<li>Operating System (e.g Windows, Mac OS) may lock the file until it is closed (Other programs may not use the file as long as it is open)</li>\n<li>Too many open files may cause your program/computer to slow down</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"reading-a-file-line-by-line\">Reading a file line by line</h2><ul>\n<li>The file object returned by <inline-code>open()</inline-code> is an iterable that can produce a sequence of lines in the file. So we can use it in a <inline-code>for</inline-code> loop.</li>\n<li>Each line will have a trailing newline (<inline-code>\"\\n\"</inline-code>) character.</li>\n</ul><python>filename = \"quotes.txt\"\nfobj = open(filename, \"r\")\n\nfor line in fobj: # file object is iterable\n    line = line.rstrip(\"\\n\")  # Remove trailing \"\\n\" character\n    print(line) \n\nfobj.close()\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"reading-a-file-as-list-of-lines\">Reading a file as list of lines</h2><python>filename = \"quotes.txt\"\nfobj = open(filename, \"r\")\n\n# Read whole file, split into lines and return a list of lines\nall_lines = fobj.readlines() \n\n# Each line will have a trailing newline character \"\\n\"\n\nprint(all_lines)\n\nfobj.close()\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"writing-text-to-a-file-in-python\">Writing text to a file in Python</h2><p>To write to a file in Python:</p><ul>\n<li>Open the file with open() using mode <inline-code>'w'</inline-code> for “write.”\n<ul>\n<li>If the file does not exist, it will be created.</li>\n<li><span class=\"bgred px05\">If the file exists, it will be deleted and replaced with an empty file.</span></li>\n</ul>\n</li>\n<li>Call <inline-code>write(s)</inline-code> method on the file object to write the string <inline-code>s</inline-code> into the file.</li>\n<li>Close the file.</li>\n</ul></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-15\"></h2><python>filename = \"grades.txt\"\nfobj = open(filename, \"w\") # mode \"w\" for writing \n\nfobj.write(\"Name,A1,A2,A3\\n\") # write line to file\nfobj.write(\"Student-A,90,80,100\\n\") # write another line\nfobj.write(\"Student-B,100,90,100\\n\") # write another line\n\nfobj.close()\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"appending-text-to-a-file-in-python\">Appending text to a file in Python</h2><p>Appending means adding text to the end of a file without changing/deleting text already present in the file.</p><ul>\n<li>Open the file with open() using mode <inline-code>'a'</inline-code> for “append.”\n<ul>\n<li>If the file does not exist, it will be created.</li>\n<li>If the file exists, it is NOT deleted.</li>\n</ul>\n</li>\n<li>Call <inline-code>write(s)</inline-code> method on the file object, to write the string <inline-code>s</inline-code> at the end of the file.</li>\n<li>Close the file.</li>\n</ul></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-16\"></h2><python>filename = \"grades.txt\"\nfobj = open(filename, \"a\") # mode \"a\" for appending \n\nfobj.write(\"Student-C,85,90,97\\n\")\nfobj.write(\"Student-D,95,90,97\\n\") \n\nfobj.close()\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-17\"></h2><p>Time for some problems on Ed Lessons.</p><divider></divider></slide>","title":"5.3 — Sorting, Modules, Reading & Writing Files","date":"2024-05-30","published":true,"section":"Lecture-5.3"}},"__N_SSG":true}