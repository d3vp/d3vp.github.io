{"pageProps":{"allSlugs":[["Lecture-1.1",[{"title":"1.1 — Programming Basics","slug":"Lecture-1.1"}]],["Lecture-1.2",[{"title":"1.2 — Variables, Arithmetic & String operations","slug":"Lecture-1.2"}]],["Lecture-2.1",[{"title":"2.1 — Function calls, Built-in functions, Expressions","slug":"Lecture-2.1"}]],["Lecture-2.2",[{"title":"2.2 —  Defining functions, Comparing Values, Control flow statements","slug":"Lecture-2.2"}]],["Lecture-2.3",[{"title":"2.3 — return vs. print, while statement","slug":"Lecture-2.3"}]],["Lecture-3.1",[{"title":"3.1 — Modules, String methods, break & continue statements","slug":"Lecture-3.1"}]],["Lecture-3.2",[{"title":"3.2 — Controlling print(), Nested Loops","slug":"Lecture-3.2"}]],["Lecture-3.3",[{"title":"3.3 — Scope of variables, Lists","slug":"Lecture-3.3"}]],["Lecture-4.1",[{"title":"4.1 — List methods, Tuples, Immutable objects","slug":"Lecture-4.1"}]],["Lecture-4.2",[{"title":"4.2 — Sets, Dictionaries","slug":"Lecture-4.2"}]],["Lecture-5.1",[{"title":"5.1 — Iterables, More dict & list operations, Nested lists","slug":"Lecture-5.1"}]],["Lecture-5.2",[{"title":"5.2 — Nested data structures, Comprehensions","slug":"Lecture-5.2"}]],["Lecture-5.3",[{"title":"5.3 — Sorting, Modules, Reading & Writing Files","slug":"Lecture-5.3"}]],["Lecture-6.1",[{"title":"6.1 — Files, Shallow vs. deep copy","slug":"Lecture-6.1"}]],["Lecture-6.2",[{"title":"6.2 — Handling exceptions, Object Oriented Programming (OOP)","slug":"Lecture-6.2"}]],["Lecture-7.1",[{"title":"7.1 — Object Oriented Programming (OOP)","slug":"Lecture-7.1"}]],["Lecture-7.2",[{"title":"7.2 — More OOP, Plotting using Matplotlib","slug":"Lecture-7.2"}]],["Lecture-7.3",[{"title":"7.3 — NumPy & Misc. topics","slug":"Lecture-7.3"}]]],"post":{"slug":"Lecture-2.2","content":"<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"types-of-errors\">Types of Errors</h2><p><b>Syntax Errors</b>: When syntax is incorrect such as wrong punctuations, invalid characters, missing quotes or parentheses etc.<br>\nProgram does not run at all in the case of syntax errors.</p><python># The following code has Syntax error due to missing double-quotes:\nx = 5\nprint(\"Square of x is)\nprint(x ** 2)\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"\"></h2><div class=\"ppt-f94\"><p><b>Runtime Errors</b>, also called <sc>Exceptions</sc>, occur when there is a problem in the program during execution.<br>\nAll code executes until an exception occurs.</p><python># The following code produces NameError because \n# variable y was not created before it is used.\nx = 5\nprint(\"Value of x is\", x)\nprint(\"Square of x is\", y ** 2)\n</python><p><b>Semantic</b> or Logic errors are said to occur when a program executes without a problem but does not produce correct output as expected.</p><p><sc>Debugging</sc> is the process of finding and removing errors in a program.</p></div></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"defining-a-function\">Defining a function</h2><p>A function is a <i>named</i> block of code that performs a task.</p><p>So far we have been using (calling) functions to do specific tasks — <inline-code>print()</inline-code>, <inline-code>input()</inline-code>, etc.</p><p>We can also define/create our own function.</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"defining-a-function-that-takes-no-arguments\">Defining a function that takes no arguments</h2><p><span class=\"ppt-f94\">Such functions always do the same thing each time they are executed.</span></p><div class=\"hgrid\"><div><python># Function definition\ndef display_greeting():\n    print(\"+------------+\")\n    print(\"|  Welcome!  |\")\n    print(\"+------------+\")\n\n# Function call\ndisplay_greeting()\n\n# Call it again\ndisplay_greeting()\n</python></div><div><output>+------------+\n|  Welcome!  |\n+------------+\n+------------+\n|  Welcome!  |\n+------------+\n</output></div></div></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"functions-with-arguments-and-return-value\"><span class=\"ppt-f90\">Functions with arguments and return value</span></h2><p>A function can return a value using <inline-code>return</inline-code> statement.</p><div class=\"hgrid\"><div><python>def f(x):  # one parameter x\n    result = x * x - x - 1\n    return result\n    # OR: return x * x - x - 1\n\n# Call the function f\ny = f(5)\nprint(y)  # 19\n\n# Call again\ny = f(10)\nprint(y)  # 89\n</python></div><div><python># two parameters x and y\ndef mean(x, y):\n    return (x + y) / 2\n\n\nprint(mean(3, 4))  # 3.5\n</python></div></div></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-1\"></h2><div class=\"bgred px2 py025 br5\"><p>Parentheses <inline-code>()</inline-code> are required to call a function. Omitting them is a common mistake.</p><p>When a function is called, correct number of arguments must be passed. It is an error to pass too many or too few arguments than what a function definition expects.</p></div></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"creating-a-function--general-formsyntax\">Creating a function — general form/syntax</h2><python>def function_name(param1, param2, ..., paramN):  # function header\n    # function body\n    statement1\n    statement2\n    .\n    .\n    statementN\n</python><ul>\n<li><inline-code>def</inline-code> is a Python keyword used to define functions</li>\n<li>Notice how statements are indented by spaces, typically 4 spaces. In Thonny, we can just use tab key once to indent by 4 spaces.</li>\n</ul></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-2\"></h2><ul>\n<li>When we define a function using <inline-code>def</inline-code> keyword:\n<ul>\n<li>it is not executed.</li>\n<li>Only the function name is created, which refers to the code block inside the function.</li>\n</ul>\n</li>\n<li>When we call a function, the code block inside the function is <i>actually</i> executed.</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"why-create-our-own-functions\">Why create our own functions?</h2><ul>\n<li>Functions allow code re-use; duplication of code can be avoided.</li>\n<li>They help organize code into sections, which makes programs easier to read and understand.</li>\n<li>They make programs easier to fix.</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"docstrings\">Docstrings</h2><p>A <sc>docstring</sc> (documentation string) is a multiline (triple-quoted) string that we write after the header of a function to explain how the function works.</p><p>It is an important part of programming to write such documentation.<br>\nYou will be expected do so in your assignments.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-3\"></h2><python>def euclidean_distance(x1, y1, x2, y2):\n    \"\"\"\n    Computes Euclidean distance between two 2D points.\n\n    Parameters:\n        x1 (float): x-coordinate of first point  \n        y1 (float): y-coordinate of first point\n        x2 (float): x-coordinate of second point\n        y2 (float): y-coordinate of second point\n\n    Returns: the euclidean distance as a float\n    \"\"\"\n    d = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    return d ** 0.5\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"boolean-values\">Boolean Values</h2><p>Python has two values <inline-code>True</inline-code> and <inline-code>False</inline-code> of type <inline-code>bool</inline-code>, which are useful for expressing and storing   yes/no or true/false kind of data.</p><python>>>> True\nTrue\n>>> False\nFalse\n>>> type(True)\n&#x3C;class 'bool'>\n>>> type(False)\n&#x3C;class 'bool'>\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"comparison-operators\">Comparison Operators</h2><p><sc>comparison operators</sc>, also known as <i>relational operators</i>, are used to compare two values, such as numbers or string.<br>\nThe result of such comparison is always a <inline-code>bool</inline-code> value i.e. <inline-code>True</inline-code> or <inline-code>False</inline-code>.</p><div class=\"hgrid\"><python># are these numbers equal?\n>>> 10 == 10  \nTrue\n>>> 10 == 20\nFalse\n</python><python>>>> x = 5\n>>> y = 10\n>>> x == y\nFalse\n>>> x &#x3C; y\nTrue\n>>> x > y\nFalse\n</python></div></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-4\"></h2><python># A variable can store the result of a boolean expression \n# (just like we did for arithmetic expressions)\n>>> x = 3\n>>> is_positive = (x > 0)\n>>> is_positive\nTrue\n\n>>> x = 5\n>>> y = 5\n>>> is_equal = (x == y)\n>>> is_equal\nTrue\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"boolean-expressions\">Boolean Expressions</h2><p>A <sc>boolean expression</sc> is an expression that evaluates to either <inline-code>True</inline-code> or <inline-code>False</inline-code>.\nExamples above show how boolean expressions are created using comparison operators.</p><div class=\"p1 br5 bgred\"><ul>\n<li>Common error is using <inline-code>=</inline-code> (single equals sign) instead of <inline-code>==</inline-code> (double equals sign)</li>\n<li><inline-code>=</inline-code> is the assignment operator, used to create variable and assign it a value</li>\n<li><inline-code>==</inline-code> is a comparison operator used to check for equality between two values</li>\n</ul></div></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"list-of-comparison-operators\">List of comparison operators</h2><ul>\n<li><inline-code>x == y</inline-code> — <inline-code>True</inline-code> if <inline-code>x</inline-code> is equal to <inline-code>y</inline-code>, otherwise <inline-code>False</inline-code></li>\n<li><inline-code>x != y</inline-code> — <inline-code>True</inline-code> if <inline-code>x</inline-code> is not equal to <inline-code>y</inline-code>, otherwise <inline-code>False</inline-code></li>\n<li><inline-code>x &#x3C; y</inline-code> — <inline-code>True</inline-code> if <inline-code>x</inline-code> is less than <inline-code>y</inline-code>, otherwise <inline-code>False</inline-code></li>\n<li><inline-code>x > y</inline-code> — <inline-code>True</inline-code> if <inline-code>x</inline-code> is greater than <inline-code>y</inline-code>, otherwise <inline-code>False</inline-code></li>\n<li><inline-code>x &#x3C;= y</inline-code> — <inline-code>True</inline-code> if <inline-code>x</inline-code> is less than or equal to <inline-code>y</inline-code>, otherwise <inline-code>False</inline-code></li>\n<li><inline-code>x >= y</inline-code> — <inline-code>True</inline-code> if <inline-code>x</inline-code> is greater than or equal to <inline-code>y</inline-code>, otherwise <inline-code>False</inline-code></li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"order-of-operations\">Order of operations</h2><p>All comparison operators (e.g. <inline-code>==</inline-code>, <inline-code>!=</inline-code>, etc.) have same priority and are evaluated from left to right.</p><p>All arithmetic and string operators have higher priority than comparison operators.</p><python>>>> x = 5\n# + operator will be evaluated before ==\n>>> x + 1 == 6\nTrue\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"comparing-strings-for-equality\">Comparing strings for equality</h2><p><inline-code>==</inline-code> and <inline-code>!=</inline-code> operators work for strings as well.<br>\nTwo strings are equal when they have same length and contain exactly same characters (case-sensitive).</p><div class=\"hgrid\"><python>>>> \"cat\" == \"cat\"\nTrue\n>>> \"cat\" == \"dog\"\nFalse\n>>> \"cat\" != \"Cat\"\nTrue\n</python><python># Works the same when using variables\n>>> s1 = \"cat\"\n>>> s2 = \"dog\"\n>>> s1 == s2\nFalse\n</python></div></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"logical-operators\">Logical Operators</h2><p>Logical operators are useful to combine multiple conditions.</p><p>Logical operators take boolean expressions as operands and produce a result of type <inline-code>bool</inline-code> when evaluated.</p><p>Python has 3 boolean operators:</p><ul>\n<li><inline-code>not</inline-code> — a unary operator</li>\n<li><inline-code>and</inline-code> — binary operator</li>\n<li><inline-code>or</inline-code> — binary operator</li>\n</ul></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-5\"></h2><p>Suppose <inline-code>x</inline-code> is a variable of type <inline-code>bool</inline-code>:</p><div class=\"code p1\" style=\"font-size: 0.75em;\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>x</th><th>not x</th></tr></thead><tbody><tr><td>False</td><td>True</td></tr><tr><td>True</td><td>False</td></tr></tbody></table></div><p><inline-code>not x</inline-code> evaluates to the opposite value of <inline-code>x</inline-code>.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-6\"></h2><p>Suppose <inline-code>x</inline-code> and <inline-code>y</inline-code> are variables of type <inline-code>bool</inline-code>:</p><div class=\"hgrid\"><div class=\"code ppt-py2 ppt-f80\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>x</th><th>y</th><th>x and y</th></tr></thead><tbody><tr><td>True</td><td>True</td><td>True</td></tr><tr><td>True</td><td>False</td><td>False</td></tr><tr><td>False</td><td>True</td><td>False</td></tr><tr><td>False</td><td>False</td><td>False</td></tr></tbody></table></div><div class=\"code ppt-py2 ppt-f80\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>x</th><th>y</th><th>x or y</th></tr></thead><tbody><tr><td>True</td><td>True</td><td>True</td></tr><tr><td>True</td><td>False</td><td>True</td></tr><tr><td>False</td><td>True</td><td>True</td></tr><tr><td>False</td><td>False</td><td>False</td></tr></tbody></table></div></div><p><inline-code>x and y</inline-code> evaluates to <inline-code>True</inline-code> if and only if both <inline-code>x</inline-code> and <inline-code>y</inline-code> are <inline-code>True</inline-code>.</p><p><inline-code>x or y</inline-code> evaluates to <inline-code>False</inline-code> if and only if both <inline-code>x</inline-code> and <inline-code>y</inline-code> are <inline-code>False</inline-code>.</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"order-of-operations-1\">Order of operations</h2><p>In order of higher to lower priority: <inline-code>not</inline-code>, <inline-code>and</inline-code>, <inline-code>or</inline-code></p><p>As usual, we can use parentheses in order to change the priority.</p><div class=\"hgrid\"><div style=\"border-right: solid 1px black;\"><p>What does <inline-code>b and not a or b</inline-code> evaluate to if <inline-code>a = False</inline-code> and <inline-code>b = True</inline-code> ?</p><div class=\"code\"><ul>\n<li>b and not a or b</li>\n<li>True and not False or True</li>\n<li>True and True or True</li>\n<li>True or True</li>\n<li>True</li>\n</ul></div></div><div><p>What does <inline-code>a and not (a or b)</inline-code> evaluate to if <inline-code>a = True</inline-code> and <inline-code>b = False</inline-code> ?</p><div class=\"code\"><ul>\n<li>a and not (a or b)</li>\n<li>True and not (True or False)</li>\n<li>True and not True</li>\n<li>True and False</li>\n<li>False</li>\n</ul></div></div></div></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"updated-operator-precedence-table\">Updated operator precedence table</h2><div class=\"hgrid\"><div class=\"ppt-f80\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Operator</th><th>Associativity</th></tr></thead><tbody><tr><td><inline-code>()</inline-code> (parentheses)</td><td>-</td></tr><tr><td><inline-code>**</inline-code></td><td>Right</td></tr><tr><td>Unary <inline-code>-</inline-code></td><td>-</td></tr><tr><td><inline-code>*</inline-code>, <inline-code>/</inline-code>, <inline-code>//</inline-code>, <inline-code>%</inline-code></td><td>Left</td></tr><tr><td>Binary <inline-code>+</inline-code>, <inline-code>-</inline-code></td><td>Left</td></tr><tr><td><inline-code>==</inline-code>, <inline-code>!=</inline-code>, <inline-code>&#x3C;</inline-code>, <inline-code>></inline-code>, <inline-code>&#x3C;=</inline-code>, <inline-code>>=</inline-code></td><td>Left</td></tr><tr><td><inline-code>not</inline-code></td><td>-</td></tr><tr><td><inline-code>and</inline-code></td><td>Left</td></tr><tr><td><inline-code>or</inline-code></td><td>Left</td></tr><tr><td><inline-code>=</inline-code> (assignment)</td><td>Right</td></tr></tbody></table></div><p>You don’t need to memorize all this, use parenthesis when in doubt!</p></div></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"try-these-examples-in-thonny\">Try these examples in Thonny</h2><p>Change the value of x and see results of boolean expressions.</p><python>x = 30\n# Is an even number greater than 20?\nprint(x % 2 == 0 and x > 20)\n\nx = 10\n# Is an even number or a multiple of 5 greater than 20?\nprint(x % 2 == 0 or x % 5 == 0 and x > 20)\n\n# Is a multiple of 2 or 5, greater than 20? \nprint((x % 2 == 0 or x % 5 == 0) and x > 20)\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-7\"></h2><div class=\"px1 py025 bggreen\"><p><b>Try it!</b></p><p>Write a program that takes 3 integers <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo separator=\"true\">,</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x, y, z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span></span> as inputs and prints out <inline-code>True</inline-code> if <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span> is an even number between <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span></span> and <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span></span>, <inline-code>False</inline-code> otherwise. Assume all 3 numbers will be different.</p><python># Retrieve inputs from the user\nx = int(input(\"Enter the x: \"))\ny = int(input(\"Enter the y: \"))\nz = int(input(\"Enter the z: \"))\n\n# Write code below\n</python></div></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-8\"></h2><solution><python># Retrieve inputs from the user\nx = int(input(\"Enter the x: \"))\ny = int(input(\"Enter the y: \"))\nz = int(input(\"Enter the z: \"))\n\n# check if y is even\nis_even = y % 2 == 0\n\n# check if y is between x and z\nis_between = (x &#x3C; y and y &#x3C; z) or (z &#x3C; y and y &#x3C; x)\n\nprint(is_even and is_between)\n</python></solution></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"flow-of-execution\">Flow of execution</h2><ul>\n<li>Flow of execution refers to order in which statements (lines of code) in our program are executed.</li>\n<li>So far in our programs, each line was executed unconditionally.</li>\n<li>For most programs, it is not enough as we need to make choices or run code repeatedly.</li>\n</ul><p>We need to control the flow of execution in our programs.</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"control-flow-statements\">Control flow statements</h2><p>The control flow of a program determines:</p><ul>\n<li>Which parts of the code should always be executed</li>\n<li>Which parts should be executed only under certain conditions</li>\n<li>Which parts should be executed repeatedly</li>\n</ul><p>All of these can be achieved using control flow statements:</p><ul>\n<li><inline-code>if</inline-code> statement for conditional execution</li>\n<li><inline-code>for</inline-code> and <inline-code>while</inline-code> loops for repeated execution</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"if-statement--to-execute-or-not-to-execute\"><code>if</code> statement — to execute or not to execute</h2><hgrid cols=\"1fr 4fr\" margin=\"0 0\" gap=\"2em\"><hgrid><div class=\"px1 py025 br5\" style=\"background-color: white; white-space: pre;\"><p><code class=\"bgred\">if</code>  <code class=\"bggreen\">condition</code>  <code class=\"bgyellow\">:</code>\n<code>    </code><code class=\"bgblue\">code block</code></p></div></hgrid><div><ul>\n<li><code class=\"bggreen\">condition</code> must be a boolean expression</li>\n<li><code class=\"bgblue\">code block</code> is one of more Python statements</li>\n<li><code class=\"bgblue\">code block</code> is executed only if the condition is True, otherwise it is skipped.</li>\n</ul></div></hgrid><div style=\"margin-top: -1em;\"><p>Notice space before code block. It is called <sc>indentation</sc>.</p><p></p><div class=\"bgred px1 py025\">Indentation is required to tell Python that the code belongs inside <inline-code>if</inline-code> statement.</div><p></p><p>Typically, 4 spaces are used for indentation. We can use <i>tab</i> key to indent.</p></div></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-9\"></h2><p>Try the following examples with different values for variables.</p><python place=\"start\">x = 10  \nif x > 0:\n    print(x, \"is positive\")\n</python><python place=\"start\">num = -5.2\n\nabsolute_num = num\n\nif num &#x3C; 0:\n    absolute_num = -num\n    \nprint(\"Absolute value of\", num, \"is\", absolute_num)\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-10\"></h2><python>x = 1000\ny = 123\n\nmin_value = x\n\nif y &#x3C; min_value:\n    min_value = y\n    \nprint(\"Minimum of\", x, \"and\", y, \"is\", min_value)\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"if-statement-with-else-part\"><inline-code>if</inline-code> statement with <inline-code>else</inline-code> part</h2><p><inline-code>if</inline-code> statements can have <inline-code>else</inline-code> part to make a choice between two code blocks.</p><hgrid cols=\"1fr 4fr\" margin=\"0 0\" gap=\"2em\"><hgrid><div class=\"px1 py025 br5\" style=\"background-color: white; white-space: pre;\"><p><code class=\"bgred\">if</code>  <code class=\"bggreen\">condition</code>  <code class=\"bgyellow\">:</code>\n<code>    </code><code class=\"bggreen\">code block<sub>1</sub></code>\n<code class=\"bgred\">else</code> <code class=\"bgyellow\">:</code>\n<code>    </code><code class=\"bgblue\">code block<sub>2</sub></code></p></div></hgrid><div><ul>\n<li>When <code class=\"bggreen\">condition</code> is <inline-code>True</inline-code>, <code class=\"bggreen\">code block<sub>1</sub></code> is executed</li>\n<li>Otherwise (<code class=\"bggreen\">condition</code> is <inline-code>False</inline-code>) and <code class=\"bgblue\">code block<sub>2</sub></code> is executed</li>\n<li>The code blocks are also called <sc>branches</sc> of the if-statement.</li>\n</ul></div></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-11\"></h2><python>x = 10  # change this to -5 and run\n\nif x > 0:\n   print(\"x is positive.\")\nelse:\n    print(\"x is not positive.\")\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"variables-and-if-statement\">Variables and <inline-code>if</inline-code> statement</h2><p>Variables can be created inside the branches of <inline-code>if</inline-code> statement.</p><p>Make sure that all branches have same variable names!</p><python>income = 15000\n\nif income &#x3C; 12000:\n    tax = 0.0\nelse:\n    taxes = income * 15.5 / 100  # Change variable name to tax\n    \nprint(\"Your tax is\", tax)\n</python><output>NameError: name 'tax' is not defined\n</output></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"mutually-exclusive-conditions--chained-if-elif-else-statement\"><span style=\"margin: 0 -2em;\">Mutually exclusive conditions — chained <inline-code>if-elif-else</inline-code> statement</span></h2><hgrid margin=\"0 -2em\"><python place=\"center\">income = 20000\n\nif income &#x3C; 12000:\n    tax = 0.0\nelif income &#x3C; 30000:\n    tax = income * 15.0 / 100\nelif income &#x3C; 100000:\n    tax = income * 20.0 / 100\nelse:\n    tax = income * 25.0 / 100\n    \nprint(\"Your tax is\", tax)\n</python><div><ul>\n<li>Mutually exclusive — only one of these blocks will get executed.</li>\n<li>Order matters! If first of the conditions is <inline-code>True</inline-code>, later conditions are not checked.</li>\n<li>We can have as many <inline-code>elif</inline-code>’s as you want.</li>\n<li>The final <inline-code>else</inline-code> part is not required so you may omit it if not needed.</li>\n</ul></div></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"example\">Example</h2><p>Is there anything wrong in code below?</p><hgrid><python>temperature = 25\n\nif temperature > 0:\n    print(\"Cold\")\nelif temperature > 20:\n    print(\"Warm\")\nelif temperature > 30:\n    print(\"Hot\")\nelse: \n    print(\"Freezing\")\n</python><output>Cold\n</output></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"order-of-conditions-matters\">Order of conditions matters!</h2><solution><hgrid><python>temperature = 25\n\nif temperature > 30:\n    print(\"Hot\")\nelif temperature > 20:\n    print(\"Warm\")\nelif temperature > 0:\n    print(\"Cold\")\nelse: \n    print(\"Freezing\")\n</python><python>temperature = 25\n\nif temperature > 0 and temperature &#x3C;= 20:\n    print(\"Cold\")\nelif temperature > 20 and temperature &#x3C;= 30:\n    print(\"Warm\")\nelif temperature > 30:\n    print(\"Hot\")\nelse: \n    print(\"Freezing\")\n\n</python></hgrid></solution></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-12\"></h2><p>Try “Blood Pressure” problem on Ed Lessons.</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"if-statements-can-be-nested\"><inline-code>if</inline-code> statements can be nested</h2><p>Examples below are logically equivalent.</p><hgrid gap=\"3em\" margin=\"0 0\"><div><p><b>Nested <inline-code>if</inline-code> statements</b></p><python place=\"start\">x = 10\nif x > 0:\n    print(\"Positive\")\nelse:\n    if x &#x3C; 0:\n        print(\"Negative\")\n    else:\n        print(\"Zero\")\n</python></div><div><p><b>Chained <inline-code>if</inline-code> statement</b></p><python place=\"start\">x = 10\nif x > 0:\n    print(\"Positive\")\nelif x &#x3C; 0:\n    print(\"Negative\")\nelse:\n    print(\"Zero\")\n</python></div></hgrid><div class=\"ppt-95\">You can use either one, but nested statements can easily become difficult to read.</div></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"correct-indentation-is-essential\">Correct indentation is essential!</h2><p>Sometimes, incorrect indentation may not give an error but it may lead to an unexpected program.</p><python>income = 1000\n\nif income &#x3C; 12000:\n    print(\"You don't have to pay tax.\")\n    tax = 0.0\nelse:\n    print(\"You have to pay tax.\")\ntax = income * 15.0 / 100  # this line should be indented\n    \nprint(\"Your tax is\", tax)\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"iteration-using-for-loop\">Iteration using <inline-code>for</inline-code> loop</h2><p><inline-code>for</inline-code> loop can be used to repeatedly execute a block of code.</p><hgrid gap=\"4em\"><div><python>for i in range(5):\n    print(\"Hello\")\n</python><output>Hello\nHello\nHello\nHello\nHello\n</output></div><div><python>for i in range(5):\n    print(i)\n</python><output>0\n1\n2\n3\n4\n</output></div></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"what-happens-when-the-for-loop-is-executed\">What happens when the <inline-code>for</inline-code> loop is executed?</h2><hgrid cols=\"1fr 3fr\" margin=\"0 0\"><hgrid><python>for i in range(5):\n    print(i)\n</python></hgrid><div><ul>\n<li><inline-code>range(5)</inline-code> will produce a sequence of integers <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">0, 1, 2, 3, 4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">4</span></span></span></span></span> in steps.</li>\n<li><inline-code>for</inline-code> loop allows us to iterate i.e. “go over” that sequence, a number at a time\n<ul>\n<li>In each step of the loop, variable <inline-code>i</inline-code> gets a value from the sequence</li>\n</ul>\n</li>\n<li>We can have any valid variable name, other than <inline-code>i</inline-code> if we want.</li>\n</ul></div></hgrid><p>Try step-by-step execution of the examples above!</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"range-function-takes-up-to-3-arguments\"><inline-code>range()</inline-code> function takes up to 3 arguments</h2><p><inline-code>range(end)</inline-code>: produces sequence <inline-code>0, 1, 2, ..., end-1</inline-code></p><p><inline-code>range(start, end)</inline-code>: produces sequence <inline-code>start, start+1, ..., end-1</inline-code></p><p><inline-code>range(start, end, step)</inline-code>:</p><ul>\n<li>if <inline-code>step > 0</inline-code>, produces sequence <inline-code>start, start+step, ..., N</inline-code> where <inline-code>N &#x3C; end</inline-code></li>\n<li>if <inline-code>step &#x3C; 0</inline-code>, produces sequence <inline-code>start, start+step, ..., N</inline-code> where <inline-code>N > end</inline-code></li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"examples-of-range\">Examples of range()</h2><hgrid><python># 0, 1, 2, ..., 9\nfor i in range(10):\n    print(i)\n\n# 1, 2, ..., 10\nfor i in range(1, 11):\n    print(i)\n    \n# 0, 2, 4, ..., 18    \nfor i in range(0, 20, 2):\n    print(i)\n</python><python># 10, 15, 20, 25, ..., 95\nfor i in range(10, 100, 5):\n    print(i)\n\n# 10, 9, 8, ..., 1\nfor i in range(10, 0, -1):\n    print(i)\n</python></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"exercise\">Exercise</h2><p>Compute sum of first N numbers.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-13\"></h2><solution><python>N = 50\n\ntotal = 0\nfor num in range(1, N+1):\n    total = total + num\n    \nprint(total)\n</python></solution></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-14\"></h2><p>Try “Harmonic sum” problem on Ed Lessons.</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"indexing--slicing-strings\">Indexing &#x26; Slicing Strings</h2><p>Recall that a string is a sequence of characters.</p><p>Each character, therefore, has a position or an <sc>index</sc>.</p><p>Index starts with zero. For example, for the string <inline-code>\"Hello\"</inline-code>:</p><div style=\"display:grid;margin: 0.5rem 0;\"><div style=\"display:grid;grid-auto-flow: row;grid-auto-rows: min-content;gap:0;width: min-content;justify-self:center;\"><div style=\"display:grid;grid-auto-flow: column;grid-auto-columns: min-content;gap:0;font-family: Hack;width: min-content; font-size: 0.7em;\"><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">0</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">1</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">2</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">3</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">4</div></div><div style=\"display:grid;grid-auto-flow: column;grid-auto-columns: min-content;gap:0;font-family: Hack;border: 1px solid black; width: min-content;\"><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">H</div><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">e</div><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">l</div><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">l</div><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">o</div></div></div></div></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-15\"></h2><p>Indices must be integers and cannot be float.</p><p>Python also allows negative indices, which go from right to left:</p><div style=\"display:grid;margin: 0.5rem 0;\"><div style=\"display:grid;grid-auto-flow: row;grid-auto-rows: min-content;gap:0;width: min-content;justify-self:center;\"><div style=\"display:grid;grid-auto-flow: column;grid-auto-columns: min-content;gap:0;font-family: Hack;width: min-content; font-size: 0.7em;\"><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">0</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">1</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">2</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">3</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">4</div></div><div style=\"display:grid;grid-auto-flow: column;grid-auto-columns: min-content;gap:0;font-family: Hack;border: 1px solid black; width: min-content;\"><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">H</div><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">e</div><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">l</div><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">l</div><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">o</div></div><div style=\"display:grid;grid-auto-flow: column;grid-auto-columns: min-content;gap:0;font-family: Hack;width: min-content; font-size: 0.7em;\"><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\">-5</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\">-4</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\">-3</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\">-2</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\">-1</div></div></div></div><p>For any string <inline-code>s</inline-code>,</p><ul>\n<li>valid positive index values are from <inline-code>0</inline-code> to <inline-code>len(s)-1</inline-code>.</li>\n<li>valid negative index values are from <inline-code>-len(s)</inline-code> to <inline-code>-1</inline-code>.</li>\n</ul></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-16\"></h2><p>Square brackets <inline-code>[]</inline-code> are used to get the letter in a string at a given index.</p><python>>>> message = \"Hello\"\n>>> message[0]  # first letter\n'H'\n>>> message[1]  # second letter\n'e'\n>>> message[4]  # fifth letter, the last one in the string\n'o'\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-17\"></h2><div style=\"display:grid;margin: 0.5rem 0;\"><div style=\"display:grid;grid-auto-flow: row;grid-auto-rows: min-content;gap:0;width: min-content;justify-self:center;\"><div style=\"display:grid;grid-auto-flow: column;grid-auto-columns: min-content;gap:0;font-family: Hack;width: min-content; font-size: 0.7em;\"><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">0</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">1</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">2</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">3</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">4</div></div><div style=\"display:grid;grid-auto-flow: column;grid-auto-columns: min-content;gap:0;font-family: Hack;border: 1px solid black; width: min-content;\"><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">H</div><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">e</div><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">l</div><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">l</div><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">o</div></div><div style=\"display:grid;grid-auto-flow: column;grid-auto-columns: min-content;gap:0;font-family: Hack;width: min-content; font-size: 0.7em;\"><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\">-5</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\">-4</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\">-3</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\">-2</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\">-1</div></div></div></div><python>>>> message = \"Hello\"\n>>> message[5]  # there is no letter at this index\nIndexError: string index out of range\n>>> message[-1]\n'o'\n>>> message[-5]\n'H'\n>>> message[-6]  # there is no letter at this index\nIndexError: string index out of range\n>>> message[1.0]\nTypeError: string indices must be integers\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"using-slice-to-get-substrings\">Using slice to get substrings</h2><div class=\"ppt-m-2\"><p>Using slice notation we can get parts of a string: <inline-code>string[start:end:step]</inline-code>.<br>\n<inline-code>start</inline-code>, <inline-code>end</inline-code>, <inline-code>step</inline-code> values must be integers and work similar to <inline-code>range()</inline-code> function.</p></div><div style=\"margin: 0.5rem 0;\" class=\"grid\"><div style=\"display:grid;grid-auto-flow: row;grid-auto-rows: min-content;gap:0;width: min-content;justify-self:center;\"><div style=\"display:grid;grid-auto-flow: column;grid-auto-columns: min-content;gap:0;font-family: Hack;width: min-content; font-size: 0.7em;\"><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">0</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">1</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">2</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">3</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">4</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">5</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">6</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">7</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">8</div></div><div style=\"display:grid;grid-auto-flow: column;grid-auto-columns: min-content;gap:0;font-family: Hack;border: 1px solid black; width: min-content;\"><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">p</div><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">i</div><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">n</div><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">e</div><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">a</div><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">p</div><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">p</div><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">l</div><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">e</div></div><div style=\"display:grid;grid-auto-flow: column;grid-auto-columns: min-content;gap:0;font-family: Hack;width: min-content; font-size: 0.7em;\"><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\">-9</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\">-8</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\">-7</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\">-6</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\">-5</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\">-4</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\">-3</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\">-2</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\">-1</div></div></div></div><python>>>> fruit = \"pineapple\"\n\n>>> fruit[4:7]  # letters at indices 4, 5, 6\n'app'\n>>> fruit[2:7:2]  # letters at indices 2, 4, 6\n'nap'\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-18\"></h2><div style=\"margin: 0.5rem 0;\" class=\"grid ppt-only\"><div style=\"display:grid;grid-auto-flow: row;grid-auto-rows: min-content;gap:0;width: min-content;justify-self:center;\"><div style=\"display:grid;grid-auto-flow: column;grid-auto-columns: min-content;gap:0;font-family: Hack;width: min-content; font-size: 0.7em;\"><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">0</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">1</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">2</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">3</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">4</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">5</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">6</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">7</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">8</div></div><div style=\"display:grid;grid-auto-flow: column;grid-auto-columns: min-content;gap:0;font-family: Hack;border: 1px solid black; width: min-content;\"><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">p</div><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">i</div><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">n</div><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">e</div><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">a</div><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">p</div><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">p</div><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">l</div><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">e</div></div><div style=\"display:grid;grid-auto-flow: column;grid-auto-columns: min-content;gap:0;font-family: Hack;width: min-content; font-size: 0.7em;\"><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\">-9</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\">-8</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\">-7</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\">-6</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\">-5</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\">-4</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\">-3</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\">-2</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\">-1</div></div></div></div><python>>>> fruit[:4]  # same as fruit[0:4]\n'pine'\n>>> fruit[4:]  # same as fruit[4:len(fruit)]\n'apple'\n\n>>> fruit[-5:]  # from index -5 to the end of string\n'apple'\n>>> fruit[-5:-2]  # letters at indices -5, -4, -3\n'app'\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-19\"></h2><div style=\"margin: 0.5rem 0;\" class=\"grid ppt-only\"><div style=\"display:grid;grid-auto-flow: row;grid-auto-rows: min-content;gap:0;width: min-content;justify-self:center;\"><div style=\"display:grid;grid-auto-flow: column;grid-auto-columns: min-content;gap:0;font-family: Hack;width: min-content; font-size: 0.7em;\"><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">0</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">1</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">2</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">3</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">4</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">5</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">6</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">7</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\">8</div></div><div style=\"display:grid;grid-auto-flow: column;grid-auto-columns: min-content;gap:0;font-family: Hack;border: 1px solid black; width: min-content;\"><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">p</div><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">i</div><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">n</div><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">e</div><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">a</div><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">p</div><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">p</div><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">l</div><div style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\">e</div></div><div style=\"display:grid;grid-auto-flow: column;grid-auto-columns: min-content;gap:0;font-family: Hack;width: min-content; font-size: 0.7em;\"><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\">-9</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\">-8</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\">-7</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\">-6</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\">-5</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\">-4</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\">-3</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\">-2</div><div style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\">-1</div></div></div></div><python># Negative step size of -1 means go from \n# right to left, i.e. in reverse order\n>>> fruit[-4:-8:-1]  # letters at -4, -5, -6, -7\n'paen'\n\n# Omitting start and end mean select whole string,\n# but step size -1 means right to left i.e. reverse order \n>>> fruit[::-1]\n'elppaenip'\n</python><divider></divider></slide>","title":"2.2 —  Defining functions, Comparing Values, Control flow statements","date":"2024-05-07","published":true,"section":"Lecture-2.2"}},"__N_SSG":true}