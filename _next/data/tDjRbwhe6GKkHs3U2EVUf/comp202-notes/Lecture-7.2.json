{"pageProps":{"allSlugs":[["Lecture-1.1",[{"title":"1.1 — Programming Basics","slug":"Lecture-1.1"}]],["Lecture-1.2",[{"title":"1.2 — Variables, Arithmetic & String operations","slug":"Lecture-1.2"}]],["Lecture-2.1",[{"title":"2.1 — Function calls, Built-in functions, Expressions","slug":"Lecture-2.1"}]],["Lecture-2.2",[{"title":"2.2 —  Defining functions, Comparing Values, Control flow statements","slug":"Lecture-2.2"}]],["Lecture-2.3",[{"title":"2.3 — return vs. print, while statement","slug":"Lecture-2.3"}]],["Lecture-3.1",[{"title":"3.1 — Modules, String methods, break & continue statements","slug":"Lecture-3.1"}]],["Lecture-3.2",[{"title":"3.2 — Controlling print(), Nested Loops","slug":"Lecture-3.2"}]],["Lecture-3.3",[{"title":"3.3 — Scope of variables, Lists","slug":"Lecture-3.3"}]],["Lecture-4.1",[{"title":"4.1 — List methods, Tuples, Immutable objects","slug":"Lecture-4.1"}]],["Lecture-4.2",[{"title":"4.2 — Sets, Dictionaries","slug":"Lecture-4.2"}]],["Lecture-5.1",[{"title":"5.1 — Iterables, More dict & list operations, Nested lists","slug":"Lecture-5.1"}]],["Lecture-5.2",[{"title":"5.2 — Nested data structures, Comprehensions","slug":"Lecture-5.2"}]],["Lecture-5.3",[{"title":"5.3 — Sorting, Modules, Reading & Writing Files","slug":"Lecture-5.3"}]],["Lecture-6.1",[{"title":"6.1 — Files, Shallow vs. deep copy","slug":"Lecture-6.1"}]],["Lecture-6.2",[{"title":"6.2 — Handling exceptions, Object Oriented Programming (OOP)","slug":"Lecture-6.2"}]],["Lecture-7.1",[{"title":"7.1 — Object Oriented Programming (OOP)","slug":"Lecture-7.1"}]],["Lecture-7.2",[{"title":"7.2 — More OOP, Plotting using Matplotlib","slug":"Lecture-7.2"}]],["Lecture-7.3",[{"title":"7.3 — NumPy & Misc. topics","slug":"Lecture-7.3"}]]],"post":{"slug":"Lecture-7.2","content":"<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"polynomial-example--procedural-vs-oop\">Polynomial Example — Procedural vs OOP</h2><p>See <inline-code>polynomial</inline-code> python files on Ed Lesson.</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"more-on-special-methods\">More on special methods</h2><p><a href=\"https://docs.python.org/3/reference/datamodel.html#special-method-names\">https://docs.python.org/3/reference/datamodel.html#special-method-names</a></p><p>“A class can implement certain operations that are invoked by special syntax (such as arithmetic operations or subscripting and slicing) by defining methods with special names.”</p><p>See the files <inline-code>point.py</inline-code> and <inline-code>point_tester.py</inline-code>.</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"zip-function\"><inline-code>zip</inline-code> function</h2><p><inline-code>zip(x, y)</inline-code> function creates an iterable of tuples <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_i, y_i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span> where <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> is element from <inline-code>x</inline-code> and <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">y_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> is element from <inline-code>y</inline-code>.</p><python>x_values = [0.5, -2, 5, 10]\ny_values = [-1.5, 3, -3.5, 20]\n\npoints = list(zip(x_values, y_values))\nprint(points)\n# [(0.5, -1.5), (-2, 3), (5, -3.5), (10, 20)]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"\"></h2><div class=\"flex\"><python>x = [1, 2.5, 5]\ny = [2, 4, 10.5]\n\ntotal = 0\nfor i in range(len(x)):\n    total += x[i] * y[i]\n    \nprint(total)\n</python><python>x = [1, 2.5, 5]\ny = [2, 4, 10.5]\n\ntotal = 0\nfor x, y in zip(x, y):\n    total += x * y\n    \nprint(total)\n</python></div><p>What happens when one of the argument lists of <inline-code>zip</inline-code> is shorter than the other?</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"truth-value-testing\">Truth Value Testing</h2><p>Any object can be tested for truth value, e.g. when used in an if or while condition.</p><python>x = [1, 2, 3]\n\nif x:\n    print(\"do something\")\nelse:\n    print(\"do other thing\")\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-1\"></h2><p>By default, an object is considered true</p><ul>\n<li>unless its class defines either a special  <inline-code>__bool__()</inline-code> method that returns False or a <inline-code>__len__()</inline-code> method that returns zero, when called with the object.</li>\n</ul><p>Here are most of the built-in objects considered false:</p><ul>\n<li>Constants defined to be false: <inline-code>None</inline-code> and <inline-code>False</inline-code></li>\n<li>Zeros: <inline-code>0</inline-code>, <inline-code>0.0</inline-code></li>\n<li>empty sequences and collections: <inline-code>\"\"</inline-code>, <inline-code>tuple()</inline-code>, <inline-code>[]</inline-code>, <inline-code>{}</inline-code>, <inline-code>set()</inline-code>, <inline-code>range(0)</inline-code></li>\n</ul></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-2\"></h2><p>Incorrect:</p><python>ans = input('Are you sure? ')\n\nif ans == 'y' or 'yes':\n    print('Installing...')\n</python><p>Correct:</p><python>ans = input('Are you sure? ')\n\nif ans == 'y' or ans == 'yes':\n    print('Installing...')\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"matplotlib\">Matplotlib</h2><ul>\n<li>Matplotlib is an extensive Python library commonly used to generate different types of plots.</li>\n<li>To install Matplotlib: if you use Thonny, go to Tools -> Manage packages. Type <inline-code>matplotlib</inline-code> on the\nsearch bar and click “Search on PyPI”. Then click Install.</li>\n<li>If you do not have Thonny, you can do so by typing the following commands in the terminal:\n<pre><code>python -m pip install -U pip  \npython -m pip install -U matplotlib  \n</code></pre>\n</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"matplotlibpyplot\">matplotlib.pyplot</h2><ul>\n<li><inline-code>matplotlib.pyplot</inline-code> is a module in the package Matplotlib.</li>\n<li>This is the module we’ll be using to create plots.</li>\n<li>To use it, we first need to import it\n<pre><code>import matplotlib.pyplot as plt\n</code></pre>\n</li>\n<li>For more details: <a href=\"https://matplotlib.org/devdocs/api/pyplot_summary.html\">https://matplotlib.org/devdocs/api/pyplot_summary.html</a></li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"example--a-line-plot\">Example – A Line plot</h2><p>We can use the function plot to create a line plot between the points in the input sequence.</p><hgrid><python>import matplotlib.pyplot as plt\n\nsome_numbers = [3, 1, 5, 2, 9, 3] \nplt.plot(some_numbers)\nplt.show() # display figure\n</python><img src=\"week10/line1.png\" style=\"width: 100%;\"></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-3\"></h2><p>In the previous example:</p><ul>\n<li>We provided only one input to the function <inline-code>plot</inline-code>.</li>\n<li>If we do that, then the input values are going to be considered as the y-coordinates. Their corresponding x-coordinates are the indices of the list.</li>\n<li>In the example, we plot the following points: <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>3</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>5</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>4</mn><mo separator=\"true\">,</mo><mn>9</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>5</mn><mo separator=\"true\">,</mo><mn>3</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(0, 3), (1, 1), (2, 5), (3, 2), (4, 9), (5, 3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">5</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">9</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">5</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">)</span></span></span></span></span></li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"example---two-inputs\">Example - two inputs</h2><div class=\"flex\"><python>import matplotlib.pyplot as plt\n\nx_coord = range(0, 10, 2)\ny_coord = [0, 0, 9, 8, 2]\nplt.plot(x_coord, y_coord)\nplt.show()\n</python><img src=\"week10/line2.png\" style=\"width: 50%; margin-left: 2em;\"></div></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"example---a-linear-function\">Example - a linear function</h2><p>Using pyplot, we can plot the graph of the linear function <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>=</mo><mi>x</mi><mo>+</mo><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">y = x + 5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">5</span></span></span></span></span>.</p><div class=\"flex\"><python>import matplotlib.pyplot as plt\n\nx_coord = range(15)\ny_coord = [x + 5 for x in x_coord]\n\nplt.plot(x_coord, y_coord)\nplt.show()\n</python><img src=\"week10/linear.png\" style=\"width: 50%; margin-left: 2em;\"></div></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"plot-title-and-axis-labels\">Plot title and axis labels</h2><p><inline-code>plt.title(label)</inline-code>: takes as argument a string and adds the title label to the figure.</p><p><inline-code>plt.xlabel(label)</inline-code>: takes as argument a string and sets the label for the x-axis.</p><p><inline-code>plt.ylabel(label)</inline-code>: takes as argument a string and sets the label for the y-axis.</p><p>We can choose the font size of the labels using the keyword argument: <inline-code>plt.title(\"First plot\", fontsize=22)</inline-code></p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-4\"></h2><div class=\"flex\"><python>import matplotlib.pyplot as plt\n\nx_coord = range(15)\ny_coord = [x + 5 for x in x_coord]\n    \nplt.plot(x_coord, y_coord)\n\nplt.title(\"First plot\", fontsize=20)\nplt.xlabel(\"x\", fontsize=14)\nplt.ylabel(\"y = x + 5\", fontsize=14)\n\nplt.show()\n</python><img src=\"week10/linear2.png\" style=\"width: 50%; margin-left: 1em;\"></div></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"colors-markers-and-line-styles\">Colors, markers and line styles</h2><ul>\n<li>We can chose the style/color of the plots, the style/size of the markers, etc. Here is just a taste:</li>\n</ul><hgrid cols=\"1fr 1fr 1fr\" margin=\"0.5em -2em\" gap=\"0.5em\"><img src=\"week10/colors.png\" style=\"width: 100%;\"><img src=\"week10/linestyles.png\" style=\"width: 100%; \"><img src=\"week10/markers.png\" style=\"width: 100%;\"></hgrid><p><span class=\"ppt-f80\">More info: <a href=\"https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html\">https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html</a></span></p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"using-color-marker-and-line-style\">Using color, marker and line style</h2><ul>\n<li>The function plot can take as arguments one or two lists (for x and y coordinates) and a format string.</li>\n<li>The format string consists of three parts: <inline-code>[marker][line][color]</inline-code>. Each part is optional.</li>\n</ul><div class=\"flex\"><python>import matplotlib.pyplot as plt\n\nsome_numbers = [3, 1, 5, 2, 9, 3]\n\n# circle marker, dashed line, green\nplt.plot(some_numbers, \"o--g\") \nplt.show() # display figure\n</python><img src=\"week10/colorplot.png\" style=\"width: 40%; margin-left: 2em;\"></div></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-5\"></h2><p><b class=\"sans\">Multiple plots in same figure</b></p><div class=\"flex\"><python>import matplotlib.pyplot as plt\nfrom math import sin, cos, radians\n\nx_coord = range(0, 540, 20)\ny_sin = [sin(radians(x)) for x in x_coord]\ny_cos = [cos(radians(x)) for x in x_coord]\n    \n# + marker, blue color and use label for legend\nplt.plot(x_coord, y_sin, '+b', label=\"sin(x)\")\n\n# magenta color and use label for legend\nplt.plot(x_coord, y_cos, 'm', label=\"cos(x)\")\nplt.legend()  # show legend\nplt.show()\n</python></div></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-6\"></h2><img src=\"week10/twoplots.png\" style=\"width: 110%;\"></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"saving-a-figure\">Saving a figure</h2><ul>\n<li><inline-code>plt.savefig(filename)</inline-code>: Save the figure in a file (.jpg, .png, etc.)</li>\n</ul><python>import matplotlib.pyplot as plt\nfrom math import sin, radians\n\nx_coord = range(0, 540, 20)\ny_sin = [sin(radians(x)) for x in x_coord]\n\nplt.plot(x_coord, y_sin, 'm')\n\n# the figure won't be displayed, but saved in y_sin.png \nplt.savefig(\"myplot.png\")\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"bar-plots\">Bar Plots</h2><p>When working with data that can be broken down into categories, it might be useful for us to use a bar plot instead.</p><python>import matplotlib.pyplot as plt\n\nmtl_pop = [1293992, 1080545, 1015420, 1016376, 1620693, 1704694]\nyears = ['1966', '1976', '1986', '1996', '2006', '2016']\n\nplt.bar(years, mtl_pop)\n\nplt.title(\"Population of Montreal\")\nplt.show()\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-7\"></h2><img src=\"week10/barplot.png\" style=\"width: 110%;\"><divider></divider></slide>","title":"7.2 — More OOP, Plotting using Matplotlib","date":"2024-06-11","published":true,"section":"Lecture-7.2"}},"__N_SSG":true}