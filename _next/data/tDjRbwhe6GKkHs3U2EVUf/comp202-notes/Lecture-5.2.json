{"pageProps":{"allSlugs":[["Lecture-1.1",[{"title":"1.1 — Programming Basics","slug":"Lecture-1.1"}]],["Lecture-1.2",[{"title":"1.2 — Variables, Arithmetic & String operations","slug":"Lecture-1.2"}]],["Lecture-2.1",[{"title":"2.1 — Function calls, Built-in functions, Expressions","slug":"Lecture-2.1"}]],["Lecture-2.2",[{"title":"2.2 —  Defining functions, Comparing Values, Control flow statements","slug":"Lecture-2.2"}]],["Lecture-2.3",[{"title":"2.3 — return vs. print, while statement","slug":"Lecture-2.3"}]],["Lecture-3.1",[{"title":"3.1 — Modules, String methods, break & continue statements","slug":"Lecture-3.1"}]],["Lecture-3.2",[{"title":"3.2 — Controlling print(), Nested Loops","slug":"Lecture-3.2"}]],["Lecture-3.3",[{"title":"3.3 — Scope of variables, Lists","slug":"Lecture-3.3"}]],["Lecture-4.1",[{"title":"4.1 — List methods, Tuples, Immutable objects","slug":"Lecture-4.1"}]],["Lecture-4.2",[{"title":"4.2 — Sets, Dictionaries","slug":"Lecture-4.2"}]],["Lecture-5.1",[{"title":"5.1 — Iterables, More dict & list operations, Nested lists","slug":"Lecture-5.1"}]],["Lecture-5.2",[{"title":"5.2 — Nested data structures, Comprehensions","slug":"Lecture-5.2"}]],["Lecture-5.3",[{"title":"5.3 — Sorting, Modules, Reading & Writing Files","slug":"Lecture-5.3"}]],["Lecture-6.1",[{"title":"6.1 — Files, Shallow vs. deep copy","slug":"Lecture-6.1"}]],["Lecture-6.2",[{"title":"6.2 — Handling exceptions, Object Oriented Programming (OOP)","slug":"Lecture-6.2"}]],["Lecture-7.1",[{"title":"7.1 — Object Oriented Programming (OOP)","slug":"Lecture-7.1"}]],["Lecture-7.2",[{"title":"7.2 — More OOP, Plotting using Matplotlib","slug":"Lecture-7.2"}]],["Lecture-7.3",[{"title":"7.3 — NumPy & Misc. topics","slug":"Lecture-7.3"}]]],"post":{"slug":"Lecture-5.2","content":"<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"whats-wrong-in-this-example\">What’s wrong in this example?</h2><python>def average(nums):\n    total = 0\n\n    for x in grades:\n       total += x\n\n    return total / len(grades)\n\n\ngrades = [85, 100, 98, 75]\nprint(average(grades))  # 89.5\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"\"></h2><ul>\n<li>Try to avoid using global variables within functions when possible.</li>\n<li>Assignment autograder will fail if you use global variable(s) instead of function parameter(s) inside a function.</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"list-of-dictionaries\">List of dictionaries</h2><p>A dictionary can be used to represent a data record such as student record in a course in the following example.</p><p>A list of such dictionaries can store multiple data records.</p><python>student_records = [\n    {\"name\": \"Student-A\", \"ID\": 2601234, \"grades\": [90, 95, 100]},\n    {\"name\": \"Student-B\", \"ID\": 2601000, \"grades\": [95, 95, 97]},\n    {\"name\": \"Student-C\", \"ID\": 2605000, \"grades\": [80, 85, 90]}\n]\n\n# Each \"grades\" list has grades for 3 assignments.\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-1\"></h2><p>What are assignment 1 grades for “Student-B” ?</p><python>student_records = [\n    {\"name\": \"Student-A\", \"ID\": 2601234, \"grades\": [90, 95, 100]},\n    {\"name\": \"Student-B\", \"ID\": 2601000, \"grades\": [95, 95, 97]},\n    {\"name\": \"Student-C\", \"ID\": 2605000, \"grades\": [80, 85, 90]}\n]\n\nprint(student_records[1][\"grades\"][0])  # 95\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-2\"></h2><p>Display total grade for each student.</p><python>student_records = [\n    {\"name\": \"Student-A\", \"ID\": 2601234, \"grades\": [90, 95, 100]},\n    {\"name\": \"Student-B\", \"ID\": 2601000, \"grades\": [95, 95, 97]},\n    {\"name\": \"Student-C\", \"ID\": 2605000, \"grades\": [80, 85, 90]}\n]\n\nfor record in student_records:\n    name, total_grade = record[\"name\"], sum(record[\"grades\"])\n    print(f\"Total grade for {name} is {total_grade}\")\n</python><output>Total grade for Student-A is 285\nTotal grade for Student-B is 287\nTotal grade for Student-C is 255\n</output></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"comparing-data-structures\">Comparing data structures</h2><p>Data structures — list, tuples, sets and dictionaries can be compared for equality using <inline-code>==</inline-code> and <inline-code>!=</inline-code> operators.</p><python># Lists, order matters\ngrades1 = [85, 80, 100]\ngrades2 = [85, 80, 100]\ngrades3 = [85, 100, 80]\n\n# True only when all elements are equal in order\nprint(grades1 == grades2)  # True\nprint(grades2 == grades3)  # False\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-3\"></h2><python># Comparing tuples, order matters\npoint1 = (1, 1, 2)\npoint2 = (1, 2, 1)\nprint(point1 != point2)  # True\n\n\n# Comparing sets, order does not matter\nfruits1 = {\"apple\", \"orange\", \"banana\"}\nfruits2 = {\"orange\", \"apple\",  \"banana\"}\n\n# True only when sets are of equal length and \n# both sets contain same elements\nprint(fruits1 == fruits2)  # True\nprint(fruits1 == {\"apple\", \"orange\", \"banana\", \"grapes\"})  # False\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-4\"></h2><python># Comparing dictionaries, order does not matter\nphonebook1 = {\"A\": 5140001000, \"B\": 5140002000, \"C\": 5140003000 }\nphonebook2 = { \"B\": 5140002000, \"A\": 5140001000, \"C\": 5140003000 }\n\n# True only when dictionaries are of equal length and \n# both contain same key-value pairs\nprint(phonebook1 == phonebook2)  # True\n\nprint(phonebook1 == {\"A\": 4381001000, \"B\": 5140002000, \n                     \"C\": 5140003000 })  # False\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"comparison-works-for-nested-structures-as-well\">Comparison works for nested structures as well</h2><python>points1 = [(1, 1), (2, 10)]\npoints2 = [(1, 1), (2, 10)]\nprint(points1 == points2)  # True\n\nprint(points1 == [(1, 1), (2, 5)])  # False\nprint(points1 == [(1, 1), [2, 10]])  # False\n\nstudent1 = {\"name\": \"Student-B\", \"grades\": [90, 100, 100]}\nstudent2 = {\"name\": \"Student-B\", \"grades\": [90, 100, 90]}\nprint(student1 == student2)  # False\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"list-set-and-dictionary-comprehensions\">List, set and dictionary comprehensions</h2><p>We often find ourselves repeating the following pattern to create a list.</p><p>Python provides a simpler way to create a list using list comprehension.</p><python>some_list = []\nfor i in some_iterable:\n    some_list.append(some_expression)\n\n# Using list comprehension\nsome_list = [some_expression for i in some_iterable]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-5\"></h2><python>even_nums = [i for i in range(2, 20, 2)]\nprint(even_nums)\n# [2, 4, 6, 8, 10, 12, 14, 16, 18]\n\n\n# Need not use loop variable i in the expression\nzeros = [0 for i in range(7)]\nprint(zeros)\n# [0, 0, 0, 0, 0, 0, 0]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-6\"></h2><python>import math\n\nsine_values = [math.sin(x) for x in [-math.pi/2, 0, math.pi/2]]\nprint(sine_values)\n# [-1.0, 0.0, 1.0]\n\nstring = \"10.0,20.5,100.123\"\nnumbers = [float(word) for word in string.split(\",\")]\nprint(numbers)\n# [10.0, 20.5, 100.123]\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"using-if-statement-in-list-comprehension\">Using if-statement in list comprehension</h2><python>squares_of_odds = []\nfor x in range(1, 20):\n    if x % 2 != 0:\n        squares_of_odds.append(x * x)\n\nprint(squares_of_odds)\n# [1, 9, 25, 49, 81, 121, 169, 225, 289, 361]\n\n# same as above but using list comprehension\nsquares_of_odds = [x * x for x in range(1, 20) if x % 2 != 0]\nprint(squares_of_odds)\n# [1, 9, 25, 49, 81, 121, 169, 225, 289, 361]\n\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"set-and-dictionary-comprehension\">Set and dictionary comprehension</h2><python>odd_squares = {i*i for i in range(1, 20, 2)}\nprint(odd_squares)\n# {1, 121, 225, 289, 9, 169, 361, 81, 49, 25}\n\n\nnames = [\"A\", \"B\", \"C\", \"D\"]\nnames_to_index = {name: i for i, name in enumerate(names)}\nprint(names_to_index)\n# {'A': 0, 'B': 1, 'C': 2, 'D': 3}\n</python><divider></divider></slide>","title":"5.2 — Nested data structures, Comprehensions","date":"2024-05-27","published":true,"section":"Lecture-5.2"}},"__N_SSG":true}