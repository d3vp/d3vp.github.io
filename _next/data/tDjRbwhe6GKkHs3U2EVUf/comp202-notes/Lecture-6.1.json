{"pageProps":{"allSlugs":[["Lecture-1.1",[{"title":"1.1 — Programming Basics","slug":"Lecture-1.1"}]],["Lecture-1.2",[{"title":"1.2 — Variables, Arithmetic & String operations","slug":"Lecture-1.2"}]],["Lecture-2.1",[{"title":"2.1 — Function calls, Built-in functions, Expressions","slug":"Lecture-2.1"}]],["Lecture-2.2",[{"title":"2.2 —  Defining functions, Comparing Values, Control flow statements","slug":"Lecture-2.2"}]],["Lecture-2.3",[{"title":"2.3 — return vs. print, while statement","slug":"Lecture-2.3"}]],["Lecture-3.1",[{"title":"3.1 — Modules, String methods, break & continue statements","slug":"Lecture-3.1"}]],["Lecture-3.2",[{"title":"3.2 — Controlling print(), Nested Loops","slug":"Lecture-3.2"}]],["Lecture-3.3",[{"title":"3.3 — Scope of variables, Lists","slug":"Lecture-3.3"}]],["Lecture-4.1",[{"title":"4.1 — List methods, Tuples, Immutable objects","slug":"Lecture-4.1"}]],["Lecture-4.2",[{"title":"4.2 — Sets, Dictionaries","slug":"Lecture-4.2"}]],["Lecture-5.1",[{"title":"5.1 — Iterables, More dict & list operations, Nested lists","slug":"Lecture-5.1"}]],["Lecture-5.2",[{"title":"5.2 — Nested data structures, Comprehensions","slug":"Lecture-5.2"}]],["Lecture-5.3",[{"title":"5.3 — Sorting, Modules, Reading & Writing Files","slug":"Lecture-5.3"}]],["Lecture-6.1",[{"title":"6.1 — Files, Shallow vs. deep copy","slug":"Lecture-6.1"}]],["Lecture-6.2",[{"title":"6.2 — Handling exceptions, Object Oriented Programming (OOP)","slug":"Lecture-6.2"}]],["Lecture-7.1",[{"title":"7.1 — Object Oriented Programming (OOP)","slug":"Lecture-7.1"}]],["Lecture-7.2",[{"title":"7.2 — More OOP, Plotting using Matplotlib","slug":"Lecture-7.2"}]],["Lecture-7.3",[{"title":"7.3 — NumPy & Misc. topics","slug":"Lecture-7.3"}]]],"post":{"slug":"Lecture-6.1","content":"<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"list-comprehension--examples\">list comprehension — examples</h2><p>Assume that x and y are lists of numbers and both have equal length. Using list comprehension, find their dot product.</p><python>x = [1, 2, 3]\ny = [10, 10, 10]\n\ndot_product = ???\nprint(dot_product)  # 60\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"\"></h2><python>x = [1, 2, 3]\ny = [10, 10, 10]\n\ndot_product = sum([x[i] * y[i] for i in range(len(x))])\nprint(dot_product)  # 60\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-1\"></h2><p>Given a matrix (list of lists), find the maximum of row sums using list comprehension.</p><python>matrix = [[1, 1, 1],\n          [5, 5, 5],\n          [2, 2, 2]]\nmax_sum = ???\nprint(max_sum)  # 15\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-2\"></h2><python>matrix = [[1, 1, 1],\n          [5, 5, 5],\n          [2, 2, 2]]\nmax_sum = max([sum(row) for row in matrix])\nprint(max_sum)  # 15\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"nested-list-comprehensions\">Nested list comprehensions</h2><python>matrix = [[10, 20, 30],\n          [40, 50, 60],\n          [70, 80, 90]]\n\nsquared = [[x ** 2 for x in row] for row in matrix]\n\nprint(squared)\n# [[100, 400, 900],\n#  [1600, 2500, 3600],\n#  [4900, 6400, 8100]]\n\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"with-statement-to-open-files\"><inline-code>with</inline-code> statement to open files</h2><python>with open(\"myfile.txt\", \"r\") as fobj:\n    # file remains open here inside with-statement\n    file_content = fobj.read()\n\n# the file is automatically closed when\n# the with-statement is done\n\nprint(file_content)\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-3\"></h2><p>Any valid operations/methods can be performed on the file object inside the <inline-code>with</inline-code> statement.</p><python>with open(\"myfile.txt\", \"r\") as fobj:\n    for line in fobj:\n        line = line.rstrip(\"\\n\")\n        print(line)\n</python><p>For the Write and Append modes, the <inline-code>write</inline-code> method can be used in the <inline-code>with</inline-code> statement.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-4\"></h2><python>with open(\"myfile.txt\", \"r\") as fobj:\n    print(\"hello\")\n\nprint(fobj.read())\n</python><output>hello\nTraceback (most recent call last):\n  File \"lecture_8.py\", line 4, in &#x3C;module>\n    print(fobj.read())\nValueError: I/O operation on closed file.\n</output></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"reading--writing-files-using-pathlib\">Reading &#x26; writing files using pathlib</h2><p>To read a file entirely into a string:</p><python>from pathlib import Path\n\nfile_content = Path(\"myfile.txt\").read_text()\nprint(file_content)\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-5\"></h2><p>To write text into a file:</p><python>from pathlib import Path\n\ndata = \"\"\"Name,A1,A2,A3\nStudent-A,90,80,100\nStudent-B,100,90,100\n\"\"\"\n\n# this will delete existing contents of the file\nPath(\"grades.txt\").write_text(data)\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"shallow-copy\">Shallow copy</h2><p>When we create a new list using slicing or  <inline-code>list()</inline-code> function on a nested list, inner lists are not copied but they are shared. Such a copy is called <sc>shallow copy</sc>.</p><python>nested_list = [[3, 17, 42], [10, 20, 30]]\n\nnew_copy = nested_list[:]  # shallow copy\n\nnew_copy = list(nested_list)  # shallow copy\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-6\"></h2><python lineno=\"false\">nested_list = [[3, 17, 42], \n               [10, 20, 30]]\n\nnew_copy = nested_list[:]\n</python><img style=\"width: 70%; margin: 1em auto\" src=\"lecture-8.2/shallow_copy.png\"></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-7\"></h2><p>Changing values in a shallow copy affects the original nested list because inner lists are shared.</p><hgrid><python>nested_list = [[3, 17, 42], \n               [10, 20, 30]]\n\nnew_copy = nested_list[:] \n# new_copy = list(nested_list)\n\nnew_copy[0][2] = 123\n\nprint(new_copy)\nprint(nested_list)\n</python><output>[[3, 17, 123], [10, 20, 30]]\n[[3, 17, 123], [10, 20, 30]]\n</output></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-8\"></h2><p>Similary <inline-code>dict()</inline-code>, <inline-code>tuple()</inline-code>, <inline-code>set()</inline-code> functions will make a shallow copy.</p><python lineno=\"false\">student = {\"name\": \"Reza\", \"ID\": 2601000, \"grades\": [95, 95, 97]}\nstudent_copy = dict(student)\n</python><img style=\"width: 100%; margin: 1em auto\" src=\"lecture-8.2/shallow_copy_dict.png\"></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-9\"></h2><p>Changing values via the shallow copy affects the original dictionary because grades list is shared.</p><python>student = {\"name\": \"Reza\", \"ID\": 2601000, \"grades\": [95, 95, 97]}\n\nstudent_copy = dict(student)\nstudent_copy[\"grades\"][0] = 100\n\nprint(student_copy)\nprint(student)\n</python><output>{'name': 'Reza', 'ID': 2601000, 'grades': [100, 95, 97]}\n{'name': 'Reza', 'ID': 2601000, 'grades': [100, 95, 97]}\n</output></slide>\n<slide class=\"ppt-f95 slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"deep-copy-\">Deep copy </h2><p><inline-code>deepcopy</inline-code> function from <inline-code>copy</inline-code> module can copy a nested structure recursively (all inner lists etc. are copied as well). Such a copy is called <sc>deep copy</sc>.</p><hgrid><python>import copy\n\nnested_list = [[3, 17, 42], \n               [10, 20, 30]]\nnew_copy = copy.deepcopy(nested_list)\nnew_copy[0][2] = 123\n\nprint(new_copy)\nprint(nested_list)\n</python><output>[[3, 17, 123], [10, 20, 30]]\n[[3, 17, 42], [10, 20, 30]]\n</output></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-10\"></h2><python>import copy\n\nstudent = {\"name\": \"Reza\", \"ID\": 2601000, \"grades\": [95, 95, 97]}\n\nstudent_copy = copy.deepcopy(student)\nstudent_copy[\"grades\"][0] = 100\n\nprint(student_copy)\nprint(student)\n</python><output>{'name': 'Reza', 'ID': 2601000, 'grades': [100, 95, 97]}\n{'name': 'Reza', 'ID': 2601000, 'grades': [95, 95, 97]}\n</output><divider></divider></slide>","title":"6.1 — Files, Shallow vs. deep copy","date":"2024-06-03","published":true,"section":"Lecture-6.1"}},"__N_SSG":true}