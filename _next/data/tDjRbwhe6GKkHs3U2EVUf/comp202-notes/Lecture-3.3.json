{"pageProps":{"allSlugs":[["Lecture-1.1",[{"title":"1.1 — Programming Basics","slug":"Lecture-1.1"}]],["Lecture-1.2",[{"title":"1.2 — Variables, Arithmetic & String operations","slug":"Lecture-1.2"}]],["Lecture-2.1",[{"title":"2.1 — Function calls, Built-in functions, Expressions","slug":"Lecture-2.1"}]],["Lecture-2.2",[{"title":"2.2 —  Defining functions, Comparing Values, Control flow statements","slug":"Lecture-2.2"}]],["Lecture-2.3",[{"title":"2.3 — return vs. print, while statement","slug":"Lecture-2.3"}]],["Lecture-3.1",[{"title":"3.1 — Modules, String methods, break & continue statements","slug":"Lecture-3.1"}]],["Lecture-3.2",[{"title":"3.2 — Controlling print(), Nested Loops","slug":"Lecture-3.2"}]],["Lecture-3.3",[{"title":"3.3 — Scope of variables, Lists","slug":"Lecture-3.3"}]],["Lecture-4.1",[{"title":"4.1 — List methods, Tuples, Immutable objects","slug":"Lecture-4.1"}]],["Lecture-4.2",[{"title":"4.2 — Sets, Dictionaries","slug":"Lecture-4.2"}]],["Lecture-5.1",[{"title":"5.1 — Iterables, More dict & list operations, Nested lists","slug":"Lecture-5.1"}]],["Lecture-5.2",[{"title":"5.2 — Nested data structures, Comprehensions","slug":"Lecture-5.2"}]],["Lecture-5.3",[{"title":"5.3 — Sorting, Modules, Reading & Writing Files","slug":"Lecture-5.3"}]],["Lecture-6.1",[{"title":"6.1 — Files, Shallow vs. deep copy","slug":"Lecture-6.1"}]],["Lecture-6.2",[{"title":"6.2 — Handling exceptions, Object Oriented Programming (OOP)","slug":"Lecture-6.2"}]],["Lecture-7.1",[{"title":"7.1 — Object Oriented Programming (OOP)","slug":"Lecture-7.1"}]],["Lecture-7.2",[{"title":"7.2 — More OOP, Plotting using Matplotlib","slug":"Lecture-7.2"}]],["Lecture-7.3",[{"title":"7.3 — NumPy & Misc. topics","slug":"Lecture-7.3"}]]],"post":{"slug":"Lecture-3.3","content":"<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"scope-of-variables\">Scope of variables</h2><ul>\n<li>A variable name only exists inside the body of the function in which it is created.\n<ul>\n<li>It does not exist outside the function or in any other functions.</li>\n</ul>\n</li>\n</ul><hgrid><python>def f():\n    x = 3\n    print(\"In f(), x =\", x)\n    \nf()\nprint(x)\n</python><output>In f(), x = 3\nNameError: name 'x' is not defined\n</output></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"\"></h2><ul>\n<li>The <sc>scope</sc> of a variable consists of parts of the program where the variable name exists and can be used.</li>\n<li>Each function has its own <sc>local scope</sc>, which other functions cannot access.</li>\n<li><sc>global scope</sc> consists of names  accessible by the entire module (Python file).</li>\n</ul><p>A variable created inside a function is called a <sc>local variable</sc>.</p><p>A variable created outside any function is called a <sc>global variable</sc>.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-1\"></h2><hgrid><python>def f():\n    x = 3  # local variable\n    # local x is used below!\n    print(\"In f(), x =\", x)  \n\n\nx = 100  # global variable\nf()\nprint(x)  # global x is used\n</python><output>In f(), x = 3\n100\n</output></hgrid><ul>\n<li>As we saw above, it is possible to create a local variable with the same name as a global variable.</li>\n<li>These are considered two different variables, and inside the function only the local one will be used.</li>\n</ul></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-2\"></h2><hgrid><python>def f():\n    # global x is used below!\n    print(\"Inside f(), x =\", x)\n\n\nx = 100  # global variable\nf()\nprint(x)\n</python><output>Inside f(), x = 100\n100\n</output></hgrid><p>What will happen if the global variable <inline-code>x</inline-code> is created after the function call <inline-code>f()</inline-code>?</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"how-variable-name-is-looked-up\">How variable name is looked up?</h2><ul>\n<li>Inside a function, when a name is used:\n<ul>\n<li>First, name is searched within the function (local scope) to see if it exists.</li>\n<li>If name is not found in the function, it is searched globally</li>\n</ul>\n</li>\n<li>Outside a function, name is simply searched globally</li>\n<li>If a name cannot be found anywhere (local or global scope), we get <inline-code>NameError</inline-code> complaining that the name is not defined.</li>\n</ul></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-3\"></h2><p>What will be printed in each case?</p><hgrid margin=\"0\" gap=\"5em\"><python>def f():\n    y = 5\n    print(x)\n\nx = 10\nf()\n</python><python>def f():\n    x = 5 \n    print(x)\n\nx = 10\nf()\nprint(x)\n</python></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-4\"></h2><solution><hgrid gap=\"5em\"><output>10\n</output><output>5\n10\n</output></hgrid></solution></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-5\"></h2><div class=\"ppt-scale-1_25\"><p><b class=\"ppt-f80\">Function parameters are also local to the function.</b></p><iframe width=\"800\" height=\"380\" scrolling=\"no\" style=\"overflow: hidden;\" frameborder=\"0\" src=\"https://pythontutor.com/iframe-embed.html#code=def%20f%28x%29%3A%0A%20%20%20%20print%28%22In%20f%28%29,%20x%20%3D%22,%20x%29%0A%20%20%20%20return%20x%20*%20x%0A%0Ax%20%3D%2010%0Ay%20%3D%20f%28x%29%0Aprint%28f%22Global,%20x%20%3D%20%7Bx%7D,%20y%20%3D%20%7By%7D%22%29&#x26;codeDivHeight=400&#x26;codeDivWidth=360&#x26;cumulative=false&#x26;curInstr=0&#x26;heapPrimitives=true&#x26;origin=opt-frontend.js&#x26;py=3&#x26;rawInputLstJSON=%5B%5D&#x26;textReferences=false\"> </iframe></div></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-6\"></h2><div class=\"ppt-scale-1_25\"><iframe width=\"840\" height=\"420\" scrolling=\"no\" style=\"overflow: hidden;\" frameborder=\"0\" src=\"https://pythontutor.com/iframe-embed.html#code=def%20f%28x%29%3A%0A%20%20%20%20x%20%3D%203%0A%20%20%20%20print%28f%22In%20f%28%29,%20x%20%3D%20%7Bx%7D,%20y%20%3D%20%7By%7D%22%29%0A%20%20%20%20return%20x%20*%20y%0A%0Ax%20%3D%2010%0Ay%20%3D%205%0Az%20%3D%20f%28x%29%0Aprint%28f%22Global,%20x%20%3D%20%7Bx%7D,%20y%20%3D%20%7By%7D,%20z%20%3D%20%7Bz%7D%22%29&#x26;codeDivHeight=400&#x26;codeDivWidth=440&#x26;cumulative=false&#x26;curInstr=0&#x26;heapPrimitives=true&#x26;origin=opt-frontend.js&#x26;py=3&#x26;rawInputLstJSON=%5B%5D&#x26;textReferences=false\"> </iframe></div></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"best-practice\">Best Practice</h2><ul>\n<li>Try to avoid using global variables within functions when possible.\n<ul>\n<li>It is okay to use variables that don’t change (e.g. constants such as <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span></span>)</li>\n<li>It is also okay to use modules inside functions</li>\n</ul>\n</li>\n</ul></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-7\"></h2><redbox><ul>\n<li>Scope is concerned with names only (variables, parameters, etc.) and not objects.</li>\n<li>An object created inside a function can be returned by the function and that object will be available after the function has finished executing.</li>\n</ul></redbox></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"lists\">Lists</h2><ul>\n<li>A list is like a container that holds a sequence of objects.</li>\n<li>Objects contained in a list are called <sc>elements</sc> or <sc>items</sc>.</li>\n<li>Lists are ordered! The order in which the items are stored in the list matters.</li>\n<li>Each item is associated with an index (index <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span></span>: first item, index <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></span>: second item, etc.)</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"creating-a-list\">Creating a list</h2><p>A list is created using square brackets, with each item separated by a comma.</p><python>prime_numbers = [2, 3, 5, 7, 11, 13]\nprint(prime_numbers)\n# [2, 3, 5, 7, 11, 13]\n\nprint(type(prime_numbers))\n# &#x3C;class 'list'>\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-8\"></h2><p>A list can contain items of any type. For example we can have a list of strings:</p><python>days = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\n\n# Number of items in the list\nprint(len(days))  # 7\n\nempty_list = []\nprint(len(empty_list))  # 0\n</python><p>A list can contain any number of items, from zero to as many as the computer’s memory allows.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-9\"></h2><p>A list can contains objects of different types.</p><python># list with mixed types\nnumbers = [1, 'two', 3.75]\n</python><p>Items of a list don’t need to be unique.</p><python># list with duplicate values\nnumbers = [5, \"five\", 5]\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"why-use-a-list\">Why use a list?</h2><python># Suppose we want to store grades for multiple students\n\ngrades1 = 80\ngrades2 = 100\ngrades3 = 65\n# ...\n# How many variables?!!\n\n# Use just one variable name \"grades\"\ngrades = [80, 100, 65]\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"indexing-a-list\">Indexing a list</h2><p>We can access an item inside a list using indexing (square brackets), just as we did for strings.</p><python>days = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\nfirst_day = days[0]\nsecond_day = days[1]\nlast_day = days[6]\nprint(first_day, second_day, last_day)  # Mon Tue Sun\n\n# No item at index 7\nprint(days[7])  \n# IndexError: list index out of range\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-10\"></h2><python>days = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\n\n# Negative indexing can be used as well\nprint(days[-1], days[-2])  # Sun Sat\n\nnumbers = [1, 'two', 3.75]\nprint(numbers[0] + numbers[2])  # 4.75\n\nprint(numbers[0] + numbers[1])\n# TypeError: unsupported operand type(s) for +: 'int' and 'str'\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"modifying-the-content-of-a-list\">Modifying the content of a list</h2><p>We can modify the content of a list after it has been created.</p><p>We can change a single item using its index and the assignment operator.</p><python>days = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\ndays[0] = \"Sun\"\nprint(days)\n# ['Sun', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n\ndays[7] = \"No such day\"\n# IndexError: list assignment index out of range\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-11\"></h2><p><inline-code>for</inline-code> loops are very useful for looping through all the items in a list.</p><python># compute an average of grades\ngrades = [85, 78.5, 98, 75, 100]\ntotal = grades[0] + grades[1] + grades[2] + grades[3] + grades[4] \navg = total / 5\nprint(avg)  # prints 87.3\n</python><hgrid margin=\"0.5rem 0\"><p>For instance, we could use a for loop to compute the average of grades.</p><python>grades = [85, 78.5, 98, 75, 100]\n\ntotal = 0\nfor i in range(5):\n   total += grades[i]\n\navg = total / 5\nprint(avg)  # 87.3\n</python></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-12\"></h2><p>Generalized version:</p><python>grades = [85, 78.5, 98, 75, 100]\n\ntotal = 0\nN = len(grades) \nfor i in range(N):\n   total += grades[i]\n\navg = total / N\nprint(avg)  # 87.3\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"lists--concatenation--and-replication-\">Lists — Concatenation <inline-code>+</inline-code> and Replication <inline-code>*</inline-code></h2><python># lists a and b are joined to produce a third list c:\na = [1, 2]\nb = [10, 11, 12]\nc = a + b\nprint(c)\n# [1, 2, 10, 11, 12]\n\na = [1, 2]\n# resulting list consists of repeated items of list a:\nc = a * 3 \nprint(c)\n# [1, 2, 1, 2, 1, 2]\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"membership-operators-in-and-not-in\">membership operators: <inline-code>in</inline-code> and <inline-code>not in</inline-code></h2><p>We can use them to test if an object is present in a list.</p><python>a = [1, 2]\nb = [10, 11, 12]\n\nprint(1 in a)  # True\nprint(11 in a) # False\nprint(5 not in b) # True\n\nx = 3.14\nprint(x in a or x in b)  # False\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-13\"></h2><p><inline-code>in</inline-code>/<inline-code>not in</inline-code> operators are very useful in simplifying code:</p><hgrid><python># Instead of long conditions like this:\nif x == 5 or x == 7 or x == 10:\n    # do something\n</python><python># Now we can do:\nif x in [5, 7, 10]:\n    # do something\n</python></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"slicing-a-list\">Slicing a list</h2><p>Similar to strings, we can also get a sub-list — parts of a list — using slice notation. Slicing creates a new list.</p><python>days = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\n\nprint(days[2:5])\n# ['Wed', 'Thu', 'Fri']\n\nprint(days[:6:2])\n# ['Mon', 'Wed', 'Fri']\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-14\"></h2><python>days = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\n\n# Make a copy of the whole list\nprint(days[:])\n# ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n\n# Makes a reversed copy of the list\nprint(days[::-1])\n# ['Sun', 'Sat', 'Fri', 'Thu', 'Wed', 'Tue', 'Mon']\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"iterating-through-a-list\">Iterating through a list</h2><p>We can either use an index or loop directly over items in a list:</p><hgrid margin=\"0\"><python>def average(nums):\n    total = 0\n\n    for i in range(len(nums)):\n       total += nums[i]\n\n    return total / len(nums)\n\ngrades = [85, 100, 98, 75]\nprint(average(grades))\n</python><python>def average(nums):\n    total = 0\n\n    for x in nums:\n       total += x\n\n    return total / len(nums)\n\ngrades = [85, 100, 98, 75]\nprint(average(grades))\n</python></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-15\"></h2><p>But when we need to modify a list inside a loop we have to use an index:</p><python>def add_bonus(grades, bonus):\n    \"\"\" Add bonus to each grade in grades list\n        (grade should not exceed 100)    \n        Returns: None\n    \"\"\"\n    for i in range(len(grades)):\n        grades[i] = min(grades[i] + bonus, 100)\n        \n        \nassignment_grades = [55, 60, 67, 97]\nadd_bonus(assignment_grades, 5)\nprint(assignment_grades)  # [60, 65, 72, 100]\n</python><divider></divider></slide>","title":"3.3 — Scope of variables, Lists","date":"2024-05-16","published":true,"section":"Lecture-3.3"}},"__N_SSG":true}