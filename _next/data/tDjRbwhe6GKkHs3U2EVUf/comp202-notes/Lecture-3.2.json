{"pageProps":{"allSlugs":[["Lecture-1.1",[{"title":"1.1 — Programming Basics","slug":"Lecture-1.1"}]],["Lecture-1.2",[{"title":"1.2 — Variables, Arithmetic & String operations","slug":"Lecture-1.2"}]],["Lecture-2.1",[{"title":"2.1 — Function calls, Built-in functions, Expressions","slug":"Lecture-2.1"}]],["Lecture-2.2",[{"title":"2.2 —  Defining functions, Comparing Values, Control flow statements","slug":"Lecture-2.2"}]],["Lecture-2.3",[{"title":"2.3 — return vs. print, while statement","slug":"Lecture-2.3"}]],["Lecture-3.1",[{"title":"3.1 — Modules, String methods, break & continue statements","slug":"Lecture-3.1"}]],["Lecture-3.2",[{"title":"3.2 — Controlling print(), Nested Loops","slug":"Lecture-3.2"}]],["Lecture-3.3",[{"title":"3.3 — Scope of variables, Lists","slug":"Lecture-3.3"}]],["Lecture-4.1",[{"title":"4.1 — List methods, Tuples, Immutable objects","slug":"Lecture-4.1"}]],["Lecture-4.2",[{"title":"4.2 — Sets, Dictionaries","slug":"Lecture-4.2"}]],["Lecture-5.1",[{"title":"5.1 — Iterables, More dict & list operations, Nested lists","slug":"Lecture-5.1"}]],["Lecture-5.2",[{"title":"5.2 — Nested data structures, Comprehensions","slug":"Lecture-5.2"}]],["Lecture-5.3",[{"title":"5.3 — Sorting, Modules, Reading & Writing Files","slug":"Lecture-5.3"}]],["Lecture-6.1",[{"title":"6.1 — Files, Shallow vs. deep copy","slug":"Lecture-6.1"}]],["Lecture-6.2",[{"title":"6.2 — Handling exceptions, Object Oriented Programming (OOP)","slug":"Lecture-6.2"}]],["Lecture-7.1",[{"title":"7.1 — Object Oriented Programming (OOP)","slug":"Lecture-7.1"}]],["Lecture-7.2",[{"title":"7.2 — More OOP, Plotting using Matplotlib","slug":"Lecture-7.2"}]],["Lecture-7.3",[{"title":"7.3 — NumPy & Misc. topics","slug":"Lecture-7.3"}]]],"post":{"slug":"Lecture-3.2","content":"<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"continue-statement\"><inline-code>continue</inline-code> statement</h2><p><inline-code>continue</inline-code> statement is useful to skip some steps in a loop.</p><p>After a <inline-code>continue</inline-code> statement is executed, code that follows the statement is skipped and execution continues from the next step of the loop.</p><python>for i in range(1, 50):\n    if i % 2 == 0 or i % 3 == 0:\n        continue\n    print(i)\n</python><output>1 5 7 11 13 17 19 23 25 29 31 35 37 41 43 47 49\n</output></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"assignment-1\">Assignment 1</h2><ul>\n<li>Read the instruction pages</li>\n<li>Ask questions on Ed Discussion — posts can be made anonymous\n<ul>\n<li>Make the post private when you want to include code</li>\n</ul>\n</li>\n<li>Thinking about testing your solutions:\n<ul>\n<li>Q1: use the blood type compatibility table to test your code with different values</li>\n<li>Q2: Try different strings of lengths 1–10</li>\n<li>Q3: For small <inline-code>n</inline-code>, you can use the given formula to verify your solution</li>\n</ul>\n</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"controlling-the-flow-of-execution-with-return-statement\">Controlling the flow of execution with <inline-code>return</inline-code> statement</h2><p>As we have seen, <inline-code>return</inline-code> statement allows us to return a value from a function back to the code that calls the function.</p><p>But at the same time return statement also ends execution of the function.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"\"></h2><p>When return statement is executed, no further code in the function gets executed.</p><hgrid><python>def display(message):\n    print(\"*** \" + message + \" ***\")\n    return\n    print(\"This will never be displayed\")\n    \n    \ndisplay(\"hello\")\n</python><output>*** hello ***\n</output></hgrid><p><inline-code>return</inline-code> can be very useful when placed inside an <inline-code>if</inline-code> statement if we want to exit from the function under certain conditions.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-1\"></h2><p>Using return statement, we can simplify the prime number example:</p><hgrid><python># We saw this before\ndef is_prime(num):\n    prime = True\n\n    if num &#x3C; 2:\n        prime = False\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                prime = False\n                break\n\n    return prime\n</python><python># Simplified version\ndef is_prime(num):\n    if num &#x3C; 2:\n        return False\n\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n\n    return True\n</python></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-2\"></h2><redbox><p><b>Important</b>: we must make sure that all branches/cases in the function return the correct values.</p><p>In previous example, if we forget the last return statement in the simplified <inline-code>is_prime</inline-code> function, <inline-code>return None</inline-code> will happen implicitly, which would be incorrect.</p></redbox></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"be-careful--incorrect-indentation-changes-logic-1\">Be careful — incorrect indentation changes logic (1)</h2><hgrid class=\"ppt-f90\" margin=\"0 0\"><python>def remove_spaces(s):\n    result = \"\" \n    for i in range(len(s)):\n        letter = s[i]\n        if letter != \" \":\n            result = result + letter\n\n    return result\n</python><python>def remove_spaces(s):\n    result = \"\" \n    for i in range(len(s)):\n        letter = s[i]\n    if letter != \" \":\n        result = result + letter\n\n    return result\n</python></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"be-careful--incorrect-indentation-changes-logic-2\">Be careful — incorrect indentation changes logic (2)</h2><hgrid class=\"ppt-f90\" margin=\"0 0\"><python>def remove_spaces(s):\n    result = \"\" \n    for i in range(len(s)):\n        letter = s[i]\n        if letter != \" \":\n            result = result + letter\n\n    return result\n</python><python>def remove_spaces(s):\n    result = \"\" \n    for i in range(len(s)):\n        letter = s[i]\n        if letter != \" \":\n            result = result + letter\n\n        return result  # what will this do?\n</python></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"ascii-code-and-special-characters\">ASCII code and special characters</h2><div style=\"margin: 0 auto;\" class=\"ppt-f80\">Recall ASCII table from a previous lecture:</div><img style=\"margin: 0 auto; width: 70%;\" src=\"module-1/ASCII-Table.png\"></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-3\"></h2><p>Python has built-in functions to convert ASCII code (decimal) to/from a single character.</p><python>print(ord(\"a\"))  # 97, the ASCII code for letter \"a\"\nprint(ord(\"A\"))  # 65\nprint(ord(\"$\"))  # 36\n\nprint(ord(\"hi\"))  # doesn't work for more than one character\n# TypeError: ord() expected a character, but string of length 2 found\n\nprint(chr(70))  # F, the character for ASCII code 70\n\nprint(chr(103))  # g\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-4\"></h2><greenbox><p>Write a program that  shifts each letter in a string to the left by 3 steps according to ASCII table.<br>\ni.e. <code>A → >, B → ?, C → @, D → A, E → B</code>, etc.</p></greenbox><python>word = \"Python\"\n\nresult = \"\"\nfor i in range(len(word)):\n    code = ord(word[i])  # Get ASCII code for the letter\n    code = code - 3  # Shift code by 3\n    # Get letter for the code and add it to result:\n    result = result + chr(code)  \n    \nprint(result)  # Mvqelk\n\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-5\"></h2><p>Text is stored in a file as a sequence of character codes.</p><hgrid margin=\"1em 0\" gap=\"1em\"><python lineno=\"false\">cat dog\n</python><seqbox text=\"99,97,116,32,100,111,103\" margin=\"0\" w=\"2.5\" h=\"2\"></seqbox></hgrid><p>Multiple lines in text:</p><hgrid margin=\"1em 0\" gap=\"1em\"><python lineno=\"false\">cat\ndog\n</python><seqbox text=\"99,97,116,10,100,111,103\" margin=\"0\" w=\"2.5\" h=\"2\"></seqbox></hgrid><p>The <em>newline character</em>, which represents “enter” or “return” key, is also stored when text contains multiple lines.</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"escape-characters\">Escape characters</h2><p>There are special characters, which we may not directly include in a string, e.g.:</p><ul>\n<li><i>newline character</i>: This is the character representing “enter” or “return” key.</li>\n<li><i>tab character</i>: This is the character representing “tab” key.</li>\n</ul><p>Such special characters can be used in a string using escape characters.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-6\"></h2><python># Trying to enter a newline character directly fails:\nmessage = \"Hello\nworld\"\n</python><output>    message = \"Hello\n                   ^\nSyntaxError: EOL while scanning string literal\n</output></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-7\"></h2><p>To include a newline character in a string we can use the escape character <inline-code>\\n</inline-code> in the string:</p><hgrid><python>message = \"hello\\nworld\"\nprint(message)\n</python><output>hello\nworld\n</output></hgrid><p><inline-code>\\n</inline-code> is stored as a single character even though it looks like two.</p><python lineno=\"false\">print(ord(\"\\n\"))  # 10\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-8\"></h2><p>Another escape character is <inline-code>\\t</inline-code> which represents the tab character.<br>\nIt is useful as a separator when displaying values:</p><hgrid><python># print uses space as separator by default\nprint(\"Khalid\", 85)\nprint(\"Reza\", 90)\n\n# Using tab as separator\nprint(\"Khalid\", 85, sep=\"\\t\")\nprint(\"Reza\", 90, sep=\"\\t\")\n</python><output>Khalid 85\nReza 90\nKhalid\t85\nReza\t90\n</output></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"controlling-print-function\">Controlling print() function</h2><p>In previous example, we used a <sc>keyword argument</sc> <inline-code>sep=</inline-code> to tell print which separator to use between values.</p><p>Unlike the usual arguments, keyword arguments are given in the form <inline-code>name=value</inline-code>; in the example <inline-code>sep</inline-code> is the name of argument and <inline-code>\"\\t\"</inline-code> is the value.</p><python># separator can be any string\nprint(\"Alice\", 90, 3.14, sep=\",\")\n# Alice,90,3.14\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-9\"></h2><python>print(\"Alice\", 90, 3.14, sep=\"|\")\n# Alice|90|3.14\n\n# even longer than one character\nprint(\"Alice\", 90, 3.14, sep=\"-----\")\n# Alice-----90-----3.14\n\nprint(\"Alice\", 90, 3.14, sep=\"\")  # No separator!\n# Alice903.14\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-10\"></h2><p>By default, <inline-code>print()</inline-code> function displays a newline  character <inline-code>\\n</inline-code> at end of line.</p><hgrid><python>print(\"Good\", \"morning\")\nprint()  # no arguments, just prints \"\\n\"\nprint(123, 3.14)\n</python><output margin=\"-1em 0 0 0\">Good morning\n\n123 3.14\n</output></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-11\"></h2><p>We can change the <inline-code>end</inline-code> character using another keyword argument to <inline-code>print()</inline-code> function, <inline-code>end=</inline-code>.</p><hgrid><python>print(\"A sequence of numbers:\")\nprint(1, end=\",\")\nprint(4, end=\",\")\nprint(9, end=\",\")\n</python><output>A sequence of numbers:\n1,4,9,\n</output></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-12\"></h2><p><inline-code>end=</inline-code> is useful in a loop:</p><python>N = 10\nfor i in range(N):\n    print(i*i, end=\", \")  # comma and a space\n</python><output>0, 1, 4, 9, 16, 25, 36, 49, 64, 81, \n</output><greenbox><p>Change the above example to not print the last comma. E.g.,</p><output>0, 1, 4, 9, 16, 25, 36, 49, 64, 81\n</output></greenbox></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-13\"></h2><solution><python>N = 10\nfor i in range(N):\n    if i == N - 1:\n        print(i * i)\n    else:\n        print(i * i, end=\", \")\n</python></solution></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"multiline-strings\">Multiline strings</h2><p>Using <inline-code>\\n</inline-code>, we can create a single string that contains all of the following lines:</p><python>shopping_list = \"Shopping list\\n- Milk\\n- Eggs\\n- Apples\\n\"\nprint(shopping_list)\n</python><output>Shopping list\n- Milk\n- Eggs\n- Apples\n</output></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-14\"></h2><p>Python provides a better create multiline strings using <i>triple quotes</i>: <inline-code>'''</inline-code> or <inline-code>\"\"\"</inline-code>.</p><python>>>> shopping_list = \"\"\"Shopping list\n- Milk\n- Eggs\n- Apples\n\"\"\"\n>>> shopping_list\n'Shopping list\\n- Milk\\n- Eggs\\n- Apples\\n'\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"nested-loops\">Nested Loops</h2><p>We can have a for/while loop inside other for/while loops.</p><p>This is useful when we have two sequences and we need all combinations/pairs of items from the sequences.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-15\"></h2><greenbox><p>Write a program that prints all pairs of numbers that sum to <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>7</mn></mrow><annotation encoding=\"application/x-tex\">7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">7</span></span></span></span></span> when two six-sided dice are rolled.</p></greenbox><hgrid><python># outer loop for first die d1:\nfor d1 in range(1, 7):  \n    # inner loop for second die d2\n    for d2 in range(1, 7):\n        if d1 + d2 == 7:\n            print(d1, d2)\n</python><output>1 6\n2 5\n3 4\n4 3\n5 2\n6 1\n</output></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-16\"></h2><greenbox><p>Write a program that takes two string—one with consonants and other with vowels—and combines each consonant with every vowel to print a syllable.</p></greenbox><hgrid margin=\"0\"><python>consonants = \"bdfghjklmn\"\nvowels = \"aeiou\"\n</python><output>ba be bi bo bu \nda de di do du \nfa fe fi fo fu \nga ge gi go gu \nha he hi ho hu \nja je ji jo ju \nka ke ki ko ku \nla le li lo lu \nma me mi mo mu \nna ne ni no nu\n</output></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-17\"></h2><solution><python>consonants = \"bdfghjklmn\"\nvowels = \"aeiou\"\n\nfor i in range(len(consonants)):\n    for j in range(len(vowels)):\n        syllable = consonants[i] + vowels[j]\n        print(syllable, end=\" \")\n    print()  # to start printing from next line\n\n</python></solution></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-18\"></h2><p>Time for some problems on Ed Lessons.</p><divider></divider></slide>","title":"3.2 — Controlling print(), Nested Loops","date":"2024-05-13","published":true,"section":"Lecture-3.2"}},"__N_SSG":true}