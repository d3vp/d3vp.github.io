{"pageProps":{"titles":["2.1 — Programming Basics","2.2 — Variables, Arithmetic & String operations","2.3 — Function Calls, Expressions","3.1 — Defining functions, Errors & Debugging","3.2 — Boolean Expressions, Comparison & Logical Operators","3.3 — Conditional execution using if statement","3.4 — for loop & String indexing, slicing","Python Style Guide","4.1 — Escape Characters & Controlling print()","4.2 — String methods & in operator","4.3 — while statement & Nested loops","4.4 — return statement & Importing modules","5.1 — Scope of Variables","5.2 — Lists & List Operations","5.3 — List Functions & Methods","5.4 — Tuples","6.1 — Object Identity, Immutability, Unpacking","6.2 — Sets","6.3 — Dictionaries","7.1 — Nested data structures & comparisons","7.2 — Iterables & comprehensions","7.3 — Reading and writing files"],"slugs":["Lecture-2.1","Lecture-2.2","Lecture-2.3.1","Lecture-3.1","Lecture-3.2","Lecture-3.3","Lecture-3.4","style-guide","Lecture-4.1","Lecture-4.2","Lecture-4.3","Lecture-4.4","Lecture-5.1","Lecture-5.2","Lecture-5.3","Lecture-5.4","Lecture-6.1","Lecture-6.2","Lecture-6.3","Lecture-7.1","Lecture-7.2","Lecture-7.3"],"post":{"title":"7.3 — Reading and writing files","slug":"Lecture-7.3","content":"<p>A file is a sequence of characters or bytes stored on a storage device such as a hard disk.</p>\n<h2>How to work with a file in Python</h2>\n<ul>\n<li>Open the file using the built-in function <inline-code>open()</inline-code></li>\n<li>Read data from the file or write data into the file</li>\n<li>Close the file</li>\n</ul>\n<h2>Opening a file with <code>open()</code></h2>\n<p>Built-in function <inline-code>open(filename, mode)</inline-code>:</p>\n<ul>\n<li>takes the following arguments:\n<ul>\n<li><inline-code>filename</inline-code> (str): name of the file to read (if the file is in the current directory) or full path to the file.</li>\n<li><inline-code>mode</inline-code> (str): <inline-code>'r'</inline-code> for reading, <inline-code>'w'</inline-code> for writing, <inline-code>'a'</inline-code> for appending. If this argument is omitted, it defaults to <inline-code>'r'</inline-code></li>\n</ul>\n</li>\n<li>Returns: a <sc>file object</sc> which allows reading from/writing to the file.</li>\n</ul>\n<python>filename = \"quotes.txt\"\nfobj = open(filename, \"r\") # mode \"r\" for reading\n</python>\n<p>For the following examples, download the files from Ed Lessons and keep them in the same directory as the python program.</p>\n<h2>Reading a file with <code>read()</code> method of file object</h2>\n<p>File objects have a method <inline-code>read(size)</inline-code> that takes one optional argument:</p>\n<ul>\n<li><inline-code>size</inline-code>: the number of characters to read from the file\n<ul>\n<li>If omitted, the entire file will be read.</li>\n</ul>\n</li>\n<li>Returns: a string containing the characters in the file</li>\n</ul>\n<h2>Closing a file with <code>close()</code> method of file object</h2>\n<ul>\n<li><inline-code>close()</inline-code> method takes no argument and returns nothing. It close the file associated with the file object</li>\n</ul>\n<python>filename = \"quotes.txt\"\nfobj = open(filename, \"r\") # mode \"r\" for reading \n\nfile_content = fobj.read() # read whole file as a string\nprint(file_content) # print the string \n\nfobj.close()  # close the file\n</python>\n<h3>Why close a file?</h3>\n<p>Closing the file is important for many reasons</p>\n<ul>\n<li>Operating System (e.g Windows, Mac OS) may lock the file until it is closed (Other programs may not use the file as long as it is open)</li>\n<li>Too many open files may cause your program/computer to slow down</li>\n</ul>\n<h2>Reading a file line by line</h2>\n<ul>\n<li>The file object returned by <inline-code>open()</inline-code> is an iterable that can produce a sequence of lines in the file.</li>\n<li>So we can use the file object in a <inline-code>for</inline-code> loop.</li>\n<li>Each line will have a trailing newline (<inline-code>\"\\n\"</inline-code>) character.</li>\n</ul>\n<python>filename = \"quotes.txt\"\nfobj = open(filename, \"r\")\n\nfor line in fobj: # file object is iterable\n    line = line.rstrip(\"\\n\")  # Remove trailing \"\\n\" character\n    print(line) \n\nfobj.close()\n</python>\n<h2>Reading a file as list of lines</h2>\n<python>filename = \"quotes.txt\"\nfobj = open(filename, \"r\")\n\n# Read whole file, split into lines and return a list of lines\nall_lines = fobj.readlines() \n\n# Each line will have a trailing newline character \"\\n\"\n\nprint(all_lines)\n\nfobj.close()\n</python>\n<h2>Writing text to a file in Python</h2>\n<p>To write to a file in Python:</p>\n<ul>\n<li>Open the file with open() using mode <inline-code>'w'</inline-code> for “write.”\n<ul>\n<li>If the file does not exist, it will be created.</li>\n<li><span class=\"bgred px05\">If the file exists, it will be deleted and replaced with an empty file.</span></li>\n</ul>\n</li>\n<li>Call <inline-code>write(s)</inline-code> method on the file object to write the string <inline-code>s</inline-code> into the file.</li>\n<li>Close the file.</li>\n</ul>\n<python>filename = \"grades.txt\"\nfobj = open(filename, \"w\") # mode \"w\" for writing \n\nfobj.write(\"Name,A1,A2,A3\\n\") # write line to file\n\nfobj.write(\"Reza,90,80,100\\n\") # write another line\n\nfobj.write(\"Dev,100,90,100\\n\") # write another line\n\n\nfobj.close()\n</python>\n<h2>Appending text to a file in Python</h2>\n<p>Appending means adding text to the end of a file without changing/deleting text already present in the file.</p>\n<ul>\n<li>Open the file with open() using mode <inline-code>'a'</inline-code> for “append.”\n<ul>\n<li>If the file does not exist, it will be created.</li>\n<li>If the file exists, it is NOT deleted.</li>\n</ul>\n</li>\n<li>Call <inline-code>write(s)</inline-code> method on the file object, to write the string <inline-code>s</inline-code> at the end of the file.</li>\n<li>Close the file.</li>\n</ul>\n<python>filename = \"grades.txt\"\nfobj = open(filename, \"a\") # mode \"a\" for appending \n\nfobj.write(\"Khalid,85,90,97\\n\") \n\nfobj.close()\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}