{"pageProps":{"allSlugs":[["Lecture-1",[{"title":"1 — Programming Basics","slug":"Lecture-1"}]],["Lecture-2.1",[{"title":"2.1 — Variables, Arithmetic & String operations","slug":"Lecture-2.1"}]],["Lecture-2.2",[{"title":"2.2 — Defining functions, Errors & Debugging","slug":"Lecture-2.2"}]],["Lecture-3.1",[{"title":"3.1 — Order of Expression Evaluation, Comparing Values, Conditional Execution","slug":"Lecture-3.1"}]],["Lecture-3.2",[{"title":"3.2 — if statement, for loop, Indexing & Slicing Strings","slug":"Lecture-3.2"}]],["Lecture-4.1",[{"title":"4.1 — return vs. print, while statement, Modules","slug":"Lecture-4.1"}]],["Lecture-4.2",[{"title":"4.2 — String methods, break & continue statements","slug":"Lecture-4.2"}]],["Lecture-5.1",[{"title":"5.1 — Controlling print(), Nested Loops, Lists","slug":"Lecture-5.1"}]],["Lecture-5.2",[{"title":"5.2 — Scope of variables, List operations","slug":"Lecture-5.2"}]],["Lecture-6.1",[{"title":"6.1 — Tuples, Immutable objects, Sets","slug":"Lecture-6.1"}]],["Lecture-6.2",[{"title":"6.2 — More list & set operations, Dictionaries","slug":"Lecture-6.2"}]],["Lecture-7.1",[{"title":"7.1 — Iterables, Unpacking, Nested Lists","slug":"Lecture-7.1"}]],["Lecture-7.2",[{"title":"7.2 — Nested data structures, Comprehensions, Modules","slug":"Lecture-7.2"}]],["Lecture-8.1",[{"title":"8.1 — Nested list comprehensions, Reading & Writing Files","slug":"Lecture-8.1"}]],["Lecture-8.2",[{"title":"8.2 — Shallow vs. deep copy, Handling exceptions","slug":"Lecture-8.2"}]],["Lecture-9.1",[{"title":"9.1 — Object Oriented Programming (OOP)","slug":"Lecture-9.1"}]],["Lecture-9.2",[{"title":"9.2 — Keyword arguments, More on OOP","slug":"Lecture-9.2"}]],["Lecture-10.1",[{"title":"10.1 — NumPy","slug":"Lecture-10.1"}]],["Lecture-10.2",[{"title":"10.2 — Plotting using Matplotlib, More Numpy","slug":"Lecture-10.2"}]],["Lecture-11.1",[{"title":"11.1 — More Numpy, Linear algebra, Random numbers","slug":"Lecture-11.1"}]]],"post":{"slug":"Lecture-2.2","content":"<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"function-composition\">Function composition</h2><p>Function composition is calling one function with the result of another function.</p><p>It is a very useful thing to do especially when we do not need to store intermediate results.</p><div class=\"hgrid\"><div><div class=\"b\">Using intermediate variables</div><python>x = -5\ny = -8\nabs_x = abs(x)\nabs_y = abs(y)\nz = min(abs_x, abs_y)\nprint(x, y, z)\n</python></div><div><div class=\"b\">Using composition</div><python>x = -5\ny = -8\nz = min(abs(x), abs(y))\nprint(x, y, z)\n</python></div></div></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"types-of-errors\">Types of Errors</h2><p><b>Syntax Errors</b>: When syntax is incorrect such as wrong punctuations, invalid characters, missing quotes or parentheses etc.<br>\nProgram does not run at all in the case of syntax errors.</p><python># The following code has Syntax error due to missing double-quotes:\nx = 5\nprint(\"Square of x is)\nprint(x ** 2)\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"\"></h2><div class=\"ppt-f94\"><p><b>Runtime Errors</b>, also called <sc>Exceptions</sc>, occur when there is a problem in the program during execution.<br>\nAll code executes until an exception occurs.</p><python># The following code produces NameError because \n# variable y was not created before it is used.\nx = 5\nprint(\"Value of x is\", x)\nprint(\"Square of x is\", y ** 2)\n</python><p><b>Semantic</b> or Logic errors are said to occur when a program executes without a problem but does not produce correct output as expected.</p><p><sc>Debugging</sc> is the process of finding and removing errors in a program.</p></div></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"defining-a-function\">Defining a function</h2><p>A function is a <i>named</i> block of code that performs a task.</p><p>So far we have been using (calling) functions to do specific tasks — <inline-code>print()</inline-code>, <inline-code>input()</inline-code>, etc.</p><p>We can also define/create our own function:</p><python>def function_name(arg1, arg2, ..., argN):  # function header\n    # function body\n    statement1\n    statement2\n    .\n    .\n    statementN\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-1\"></h2><ul>\n<li>\n<p><inline-code>def</inline-code> is a Python keyword used to define functions</p>\n</li>\n<li>\n<p>Notice how statements are indented by spaces, typically 4 spaces. In Thonny, we can just use tab key once to indent by 4 spaces.</p>\n</li>\n<li>\n<p>When we define a function using <inline-code>def</inline-code> keyword:</p>\n<ul>\n<li>it is not executed.</li>\n<li>Only the function name is created, which refers to the code block inside the function.</li>\n</ul>\n</li>\n<li>\n<p>When we call a function, the code block inside the function is <i>actually</i> executed.</p>\n</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"function-with-no-arguments\">Function with no arguments</h2><p><span class=\"ppt-f94\">Such functions always do the same thing each time they are executed.</span></p><div class=\"hgrid\"><div><python># Function definition\ndef display_greeting():\n    print(\"+------------+\")\n    print(\"|  Welcome!  |\")\n    print(\"+------------+\")\n\n# Function call\ndisplay_greeting()\n\n# Call it again\ndisplay_greeting()\n</python></div><div><output>+------------+\n|  Welcome!  |\n+------------+\n+------------+\n|  Welcome!  |\n+------------+\n</output></div></div></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"functions-with-arguments-and-return-value\"><span class=\"ppt-f90\">Functions with arguments and return value</span></h2><p>A function can return a value using <inline-code>return</inline-code> statement.</p><div class=\"hgrid\"><div><python>def f(x):\n    result = x * x - x - 1\n    return result\n    # OR: return x * x - x - 1\n\n# Call the function f\ny = f(5)\nprint(y)  # 19\n\n# Call again\ny = f(10)\nprint(y)  # 89\n</python></div><div><python># two arguments\ndef mean(x, y):\n    return (x + y) / 2\n\n\nprint(mean(3, 4))  # 3.5\n</python></div></div></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-2\"></h2><div class=\"bgred px2 py025 br5\"><p>Parentheses <inline-code>()</inline-code> are required to call a function. Omitting them is a common mistake.</p><p>When a function is called, correct number of arguments must be passed. It is an error to pass too many or too few arguments than what a function definition expects.</p></div></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"why-create-our-own-functions\">Why create our own functions?</h2><ul>\n<li>Functions allow code re-use; duplication of code can be avoided.</li>\n<li>They help organize code into sections, which makes programs easier to read and understand.</li>\n<li>They make programs easier to fix.</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"docstrings\">Docstrings</h2><p>A <sc>docstring</sc> (documentation string) is a multiline (triple-quoted) string that we write after the header of a function to explain how the function works.</p><p>It is an important part of programming to write such documentation.<br>\nYou will be expected do so in your assignments.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-3\"></h2><python>def euclidean_distance(x1, y1, x2, y2):\n    \"\"\"\n    Computes Euclidean distance between two 2D points.\n\n    Args:\n        x1: x-coordinate of first point (float) \n        y1: y-coordinate of first point (float) \n        x2: x-coordinate of second point (float) \n        y2: y-coordinate of second point (float) \n\n    Returns: the euclidean distance as a float\n    \"\"\"\n    d = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    return d ** 0.5\n</python><divider></divider></slide>","title":"2.2 — Defining functions, Errors & Debugging","date":"2023-01-09","published":true,"section":"Lecture-2.2"}},"__N_SSG":true}