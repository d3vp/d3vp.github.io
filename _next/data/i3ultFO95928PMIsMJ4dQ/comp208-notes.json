{"pageProps":{"allPosts":[{"slug":"Lecture-1.md","content":"\n:::blockquote{.notes-only}\nIn the beginning was the Tao. The Tao gave birth to Space and Time.\nTherefore Space and Time are the Yin and Yang of programming.\n:cite[— [Tao of Programming](https://www.mit.edu/~xela/tao.html)]\n:::\n\n##  Binary Numbers \n\nIn decimal system, a number is expressed as a sequence of digits $0$ to $9$.\nFor example, `Two thousand twenty one ⇔ 2021`\n\nIn binary number system the set of digits, is called binary digits or :sc[bits]: $\\{0, 1\\}$.  \n\nA binary number is expressed as a sequence of bits.  \nFor example, $183$ in binary is $10110111$.\n\n## Converting from decimal to binary\n\n::decimal-binary\n\n## Converting from binary to decimal\n\n::binary-decimal\n\n## Groups of bits\n\nA group of $8$ bits is called a :i[byte]  e.g. $11010111$\n- $1$ kilobyte (kB) = $1000$ bytes\n- $1$ megabyte (MB) = $10^6$  (million) bytes\n- $1$ gigabyte (GB) = $10^9$ (billion) bytes\n- $1$ terabyte (TB) = $10^{12}$ bytes (1000 billion)\n\n## What is programming?\n\nProgramming is the process of creating a set of instructions — a program — to tell a computer how to perform a task.\n\nPrograms take input data, perform some computation — numerical or symbolic (text) — and produce output data.\n\nComputers can perform only basic binary operations (such as add or multiply two numbers)\n- How do we communicate complex instructions to computers? — Use a programming language!\n\n\n## Levels of programming languages\n\n:::div{.my2}\n| Low-level languages                                    | High-level languages                              |\n|--------------------------------------------------------|---------------------------------------------------|\n| Closer to machine, difficult for humans                | Closer to humans,  easier for humans to work with |\n|                                                        |                                                   |\n| Less portable, provide  less abstraction over hardware | More portable, more abstraction over hardware     |\n| Examples: Assembly Language                            | Examples: Java, Python                            |\n:::\n\n\n## How do computers understand high-level languages? :style{.ppt-tight}\n\nHigh-level languages are translated into Machine code (for CPU). \n\nProgramming languages come in two main flavors — :i[compiled] languages or :i[interpreted] languages:  \n\n:::div{style=\"font-size: 0.9em; margin: 0 -3em 0 -3em;\"}\n| :sc[Compiled] (e.g. C/C++, Java)                                       | :sc[Interpreted] (e.g. Python)                                            |\n|:------------------------------------------------------------------------|:---------------------------------------------------------------------------|\n| High-level program (source code)  ➞  :sc[compiler] ➞ binary executable | High-level program (source code) ➞ Executed directly by :sc[interpreter]  |\n|                                                                        |                                                                           |\n| Once compiled, the binary program can be executed without compiler.    | The interpreter is required on the machine where the program is executed. |\n:::\n\n::divider\n\n## Data in binary\n\nComputers can understand only binary numbers  \n\nHow can we encode data in the real world into binary numbers?\n\n::img{src=\"module-1/data-in-binary.svg\" style=\"margin: 2rem auto;\" .ppt-w110}\n\n## Integers in binary\n\nWe already saw how to represent positive integers in binary e.g.  \n:div[$109 = 1101101_2$]{style=\"text-align: center;\"}\nFor signed integers (to differentiate negative and positive), an extra leftmost bit is used for sign only, e.g.  \n    :div[$-109 = \\colorbox{lightblue}{1}1101101_2$]{style=\"text-align: center;\"} \n    :div[$+109 = \\colorbox{lightblue}{0}1101101_2$]{style=\"text-align: center;\"}\n\n::div[(For more info: https://en.wikipedia.org/wiki/Signed_number_representations)]{.smaller}\n\n## Real numbers in binary\n\n64-bit :sc[Floating point] format is used to represent numbers with decimal point, e.g.  \n:div[$\\colorbox{lightblue}{0}\\colorbox{lightpink}{10000000000}\\colorbox{lightgreen}{1001001000011111101101010100010001000010110100011000} = 3.141592653589793$]{style=\"text-align: center;\"}\n\nFloating point format has a :i[finite precision], but digits of $\\pi$ run forever: :div[$3.1415926535897932384626433832795028841...$]{style=\"text-align: center;\"}\n\nBut with only 64-bits we can only have precision up to a fixed digits after decimal point: $3.141592653589793$\n\n::div[(For more info: https://en.wikipedia.org/wiki/Double-precision_floating-point_format)]{.smaller}\n\n## Text in binary\n\n::p[Letters and punctuations in human languages are encoded in binary using a :i[Character Encoding] such as ASCII or UTF-8 (Unicode).]{.ppt-m-3}\n\n::image{style=\"margin: 0 auto; width: 80%;\" src=\"module-1/ASCII-Table.png\" .ppt-img50}  \n::div[(source: https://simple.wikipedia.org/wiki/ASCII)]{style=\"font-size: 0.6em; margin: 0 auto;\"}\n\n## Images, audio & video in binary\n\nEven for these complex data, the idea remains the same.  \n\nWe use a format to store bytes in a file and programs know what to do (play music, show image, etc) based on the format.  \n\nWe already know some of these formats:\n- Images: jpeg, png\n- Audio: mp3, m4a, wma\n- Video: mp4, avi, wmv\n\n\n::divider\n\n## Thonny Demo — Editor vs Shell\n\nPython interpreter can work in an interactive or :i[shell] mode in which lines of code are executed immediately as soon as they are entered and output is visible immediately.  \n\nShell mode is apparent whenever you see the prompt `>>>`.\n\nIn :i[Script] mode, a Python file (`.py`) is executed by interpreter as a program (whole file, not line-by-line).\n\nThonny allows us to use both modes.\n\n## Comments\n\nComments are annotations we add to our program and are ignored by the Python interpreter.\n\nIn Python, we start a comment using `#`.\n\n```python\n# Author: Deven\n# My first program\n\n# This is a comment on its own line & it will be ignored\nprint(\"Hello, world!\")  # str\nprint(123)  # int\nprint(1.614)  # float \n```\n\n##    \nWe use comments to:\n- Make the code easier to read and understand by explaining how it works.\n- Indicate authorship and license.\n- Disable some code (prevent it from executing) but still keeping it in the file.\n\n\nIn Thonny, we can use `Edit menu -> Toggle comment` to comment/uncomment the selected lines.\n\n\n## Objects and Data Types\n\nAll data in a Python program is represented by :sc[objects]. An object always has a :sc[type] (or :sc[class]) associated with it.\n\n:::div{.hgrid}\n```python\n>>> 5\n5\n>>> 3.1415\n3.1415\n>>> \"Hello\"\n'Hello'\n```\n```python\n# Using type() function to know the type of objects\n>>> type(5)\n<class 'int'>\n>>> type(3.1415)\n<class 'float'>\n>>> type(\"Hello\")\n<class 'str'>\n```\n:::\n\n##\n\nAn object's type determines the operations that the object supports:\n\n```python\n#  objects of int type can be added using +\n>>> 10 + 5\n15\n\n# But an object of type str cannot be added to an int using +\n>>> \"Hello\" + 5\nTraceback (most recent call last):\n  File \"<pyshell>\", line 1, in <module>\nTypeError: can only concatenate str (not \"int\") to str\n```\n\n## Summary\n \nWe saw the three basic data types in Python:\n- `int`: Integers such as $..., -1, 0, 1, 2, ...$\n- `float`: Floating-point numbers such as $-1.2, 3.14,$ etc.\n- `str`: Text data (a sequence of characters) such as \"hello world\", \"Python\", etc.\n\nThe terms :sc[Object] and :sc[Value] are used interchangeably.  \nSo are the terms :sc[Class] and :sc[Type].\n\n\n::divider","title":"1 — Programming Basics","date":"2023-01-03","published":true}]},"__N_SSG":true}