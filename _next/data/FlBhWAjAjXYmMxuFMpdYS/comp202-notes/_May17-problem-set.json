{"pageProps":{"titles":["L1.1 — Computer and Programming Basics","L1.2 — Variables & Expressions","L2.1 — Control Flow Statements","Python Style Guide","May 14 — Problem Set","L2.2 — print(), String methods & while loop","May 17 — Problem Set","L3.1 — More loops & Defining functions","May 19 — Problem Set"],"slugs":["Lecture-1.1","Lecture-1.2","Lecture-2.1","style-guide","_May14-problem-set","Lecture-2.2","_May17-problem-set","Lecture-3.1","_May19-problem-set"],"post":{"title":"May 17 — Problem Set","slug":"_May17-problem-set","content":"<h1>Problems</h1>\n<ol>\n<li>\n<p>Write a program called that takes as input two integers <inline-code>x</inline-code> and <inline-code>y</inline-code> and prints their <i>greatest common divisor</i>.<br>\nThe program does that using the Euclidean algorithm:</p>\n<ul>\n<li>If the numbers <inline-code>x</inline-code> and <inline-code>y</inline-code> are equal, than any of them is their greatest common divisor</li>\n<li>Otherwise, replace the bigger number by the difference between the bigger and the smaller one.</li>\n<li>Repeat the previous step until the two numbers are equal.</li>\n</ul>\n<p>Change the above program to also print the <i>least common multiple</i> of the two numbers.<br>\nYou can compute this by taking the quotient of the division between their product and their greatest common divisor.</p>\n<solution><python>x = int(input(\"Enter x: \"))\ny = int(input(\"Enter y: \"))\n\nproduct = x * y\n\n# x and y are int so we can compare for equality\nwhile x != y:\n    if x > y:\n        x -= y\n    else:\n        y -= x\n        \n# After the loop, x and y must be equal\n# and any of them the GCD\nprint(\"GCD is\", x)\nprint(\"LCM is\", product // x)\n</python></solution>\n</li>\n<li>\n<p>A man who can benchpress his own weight is regarded as physically very strong.<br>\nThe weight a person can lift depends on their muscle mass: <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mi>i</mi><mi>m</mi><mi>u</mi><mi>m</mi><mi mathvariant=\"normal\">_</mi><mi>l</mi><mi>i</mi><mi>f</mi><mi>t</mi><mo>=</mo><mn>10</mn><mo>×</mo><mi>m</mi><mi>u</mi><mi>s</mi><mi>c</mi><mi>l</mi><mi>e</mi><mi mathvariant=\"normal\">_</mi><mi>m</mi><mi>a</mi><mi>s</mi><msup><mi>s</mi><mrow><mn>2</mn><mi mathvariant=\"normal\">/</mi><mn>3</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">maximum\\_lift = 10 \\times muscle\\_mass^{2/3}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00444em;vertical-align:-0.31em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.198em;vertical-align:-0.31em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">s</span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mtight\">/</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span></span></span><br>\nBatman currently weighs <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>80</mn><mi>k</mi><mi>g</mi><mo>=</mo><mn>30</mn><mi>k</mi><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">80 kg = 30 kg</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">8</span><span class=\"mord\">0</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">3</span><span class=\"mord\">0</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span></span> of brain <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>+</mo><mn>30</mn><mi>k</mi><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">+ 30 kg</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">+</span><span class=\"mord\">3</span><span class=\"mord\">0</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span></span> of fat <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>+</mo><mn>20</mn><mi>k</mi><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">+ 20 kg</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">+</span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span></span> of muscle (no bones?!).<br>\nIf he starts training very hard, he will be able to increase his muscle mass by <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0.1</mn><mi>k</mi><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">0.1 kg</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span></span> everyday, and reduce his fat by <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0.05</mn><mi>k</mi><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">0.05 kg</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">5</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span></span> everyday. When will he be able to benchpress his own weight?</p>\n<p>Write a program that prints how many days of training Batman will need.</p>\n<python>brain = 30  # brain mass in kg\nfat = 30    # fat mass in kg\nmuscle = 20 # muscle mass in kg\n\n# write code here\n</python>\n<p>Suggested approach:</p>\n<ul>\n<li>Write a while loop that simulates what will happen to Batman as he trains</li>\n<li>Include variables for all the important components of the problem</li>\n<li>Update the value of the variables at each turn of the loop</li>\n<li>Ask yourself when the loop should stop, and write the stopping condition of the loop</li>\n<li>Finally (outside the loop), print out the result</li>\n</ul>\n<p>For fun: If a genetic mutation caused Batman to have a maximum lift of only <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn><mo>×</mo><mi>m</mi><mi>u</mi><mi>s</mi><mi>c</mi><mi>l</mi><mi>e</mi><mi mathvariant=\"normal\">_</mi><mi>m</mi><mi>a</mi><mi>s</mi><msup><mi>s</mi><mrow><mn>2</mn><mi mathvariant=\"normal\">/</mi><mn>3</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">3 \\times muscle\\_mass^{2/3}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.198em;vertical-align:-0.31em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">s</span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mtight\">/</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span></span></span>, how much training would he need?</p>\n<solution><python>brain = 30  # brain mass in kg\nfat = 30  # fat mass in kg\nmuscle = 20  # muscle mass in kg\nday = 0  # counter variable keeping track of day\n\nmaximum_lift = 10 * muscle**(2 / 3)\ntotal_weight = brain + fat + muscle\n\n# as long as lift capacity is less than total weight,\n# keep training\nwhile maximum_lift &#x3C; total_weight:  # inequality okay for float\n    muscle += 0.1\n    fat -= 0.05\n    maximum_lift = 10 * muscle**(2 / 3)\n    total_weight = brain + fat + muscle\n    day += 1  # increment day counter\n\nprint(\"Batman will need \", day, \"days of training\")\n</python></solution>\n</li>\n<li>\n<p>We will write this program incrementally:<br>\n(A) First, write a program that generates a random integer <inline-code>secret</inline-code> between <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></span> and <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>100</mn></mrow><annotation encoding=\"application/x-tex\">100</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span></span> and prints it.<br>\n(B) Modify the program so that it does not print the <inline-code>secret</inline-code> number but it asks the user to guess the <inline-code>secret</inline-code> number. The program should print if the guess was too low, too high, or correct.<br>\n(C) Modify the program so that it asks the user to keep guessing, until the correct guess is received.<br>\n(D) Finally, modify it so that it displays how many tries were needed to guess the number.</p>\n<solution><python>import random\n\n# generate an secret number between 1 and 100\nsecret = random.randint(1, 100)\n\n#print(secret)\n\n# Ask for a guess from the user\nguess = int(input(\"Please enter your guess: \"))\nnum_guesses = 1\n\n# keep asking the user for a guess,\n# until they don't guess correctly\nwhile guess != secret:\n    # give feedback to the user\n    if guess &#x3C; secret:\n        print(\"Too low!\")\n    else:\n        print(\"Too high!\")\n\n    # ask the user for a new guess\n    guess = int(input(\"Guess again: \"))\n    num_guesses += 1\n\nprint(\"You got it! # of Attempts:\", num_guesses)\n</python></solution>\n</li>\n<li>\n<p>DNA sequences can be represented in Python using strings made of A, C, G, or T’s.<br>\nA <i>homopolymer</i> is a sequence made entirely of the same nucleotide, such as <inline-code>AAAAA</inline-code>, <inline-code>GG</inline-code>, <inline-code>TTTTTTTT</inline-code>.  Suppose a DNA sequence is stored in a variable called seq.<br>\nUsing <inline-code>while</inline-code> loop, write the program checks if seq is a homopolymer, and prints the result.<br>\nThe program should have case-insensitive comparisons.</p>\n<solution><python>seq = \"AAAAAAA\"\n# seq = \"AAAAGA\"\n\n# convert to uppercase for case insensitive comparison\nseq = seq.upper()\n\n# One way to solve the problem:\n\nis_homopolymer = True\ni = 0\nwhile i &#x3C; len(seq) and is_homopolymer:\n    if seq[i] != seq[0]:\n        is_homopolymer = False\n    i += 1\n\nif is_homopolymer:\n    print(\"homopolymer\")\nelse:\n    print(\"not homopolymer\")\n\n\n# We can also have following condition for line 11:\n# while i &#x3C; len(seq):\n# but this will check all letters unnecessarily\n\n\n# Another way to solve the problem:\n# Compare all consecutive letters \n\n# is_homopolymer = True\n# i = 1\n# while i &#x3C; len(seq) and is_homopolymer:\n#     if seq[i-1] != seq[i]:\n#         is_homopolymer = False\n#     i += 1\n</python></solution>\n</li>\n<li>\n<p>Recall the palindrome problem from previous problem set:</p>\n<python>string = input(\"Enter a string: \")\n\nj = len(string) - 1\nis_palindrome = True  # assume string is palindrome\nfor i in range(len(string)):\n    if string[i] != string[j]:\n        # found at least one mismatch\n        # so our assumption is False now\n        is_palindrome = False\n    j = j - 1\n\nif is_palindrome:\n    print(\"palindrome\")\nelse:\n    print(\"not palindrome\")\n</python>\n<p>Change this program to use <inline-code>while</inline-code> loop only, <inline-code>for</inline-code> loop and <inline-code>if</inline-code> statement are not allowed. (You can use <inline-code>if</inline-code> statement at the end of program just to print <inline-code>palindrome</inline-code> and <inline-code>not palindrome</inline-code>.)</p>\n<p>Change this program again to compare two letters only once. You can do this by simply adding a condition that prevents the indices from crossing each other (note that <inline-code>i</inline-code> goes from left to right, while <inline-code>j</inline-code> goes right to left).</p>\n<solution><python>string = input(\"Enter a string: \")\n\ni = 0\nj = len(string) - 1\nis_palindrome = True  # assume string is palindrome\n\nwhile i &#x3C; len(string) and i &#x3C; j and is_palindrome:\n    is_palindrome = string[i] == string[j]\n    i += 1\n    j -= 1\n\nif is_palindrome:\n    print(\"palindrome\")\nelse:\n    print(\"not palindrome\")\n</python></solution>\n</li>\n<li>\n<p>Read the section “7.5 Square roots” of the textbook (Think Python second edition) and write the complete program using <inline-code>while</inline-code> loop. Ignore the use of <inline-code>while True</inline-code> and <inline-code>break</inline-code> in the textbook; write the program using <inline-code>while some_condition</inline-code> instead, where you have to come up with the appropriate <inline-code>some_condition</inline-code> (a boolean expression).</p>\n<solution><python>num = float(input(\"Enter the number: \"))\n\n# Start estimate of square root as num itself\nx = num\nepsilon = 0.0000001\n\n# Compute new estimate\ny = (x + num / x) / 2\n\n# Compute new estimate until difference is small enough\nwhile abs(y - x) > epsilon:\n    # set approximate square root to new estimate\n    x = y\n    \n    # Compute new estimamte\n    y = (x + num / x) / 2\n\n\nprint(\"Square root is\", x)\n</python></solution>\n</li>\n</ol>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}