{"pageProps":{"titles":["L1.1 — Computer and Programming Basics","L1.2 — Variables & Expressions","L2.1 — Control Flow Statements","Python Style Guide","May 14 — Problem Set","L2.2 — print(), String methods & while loop","May 17 — Problem Set","L3.1 — More loops & Defining functions","May 19 — Problem Set","L3.2 — Lists","May 21 — Problem Set","L4.1 — Tuples, Dictionaries, Sets","May 26 — Problem Set","May 28 — Problem Set","L4.2 — Nested data structures","June 2 — Problem Set","June 4 — Problem Set","L5.1 — Handling Exceptions, File IO","L5.2 — Comparing data structures, Writing modules, Matplotlib","June 9 — Problem Set","L6.1 — Object oriented programming"],"slugs":["Lecture-1.1","Lecture-1.2","Lecture-2.1","style-guide","_May14-problem-set","Lecture-2.2","_May17-problem-set","Lecture-3.1","_May19-problem-set","Lecture-3.2","_May21-problem-set","Lecture-4.1","_May26-problem-set","_May28-problem-set","Lecture-4.2","_June2-problem-set","_June4-problem-set","Lecture-5.1","Lecture-5.2","_June9-problem-set","Lecture-6.1"],"post":{"title":"May 19 — Problem Set","slug":"_May19-problem-set","content":"<h1>Review</h1>\n<h2><inline-code>break</inline-code> statement</h2>\n<p><inline-code>break</inline-code> statement can be used to terminate a loop before it normally ends.</p>\n<p>After a break statement is executed, no other code inside the loop is executed.</p>\n<python>for i in range(10):\n    if i > 5:\n        break\n    print(i, end=\" \")\n\n# Output:\n# 0 1 2 3 4 5 \n</python>\n<p>Homopolymer revisited:</p>\n<python>seq = \"AAAAAAA\"\n# seq = \"AAAAGA\"\n\nis_homopolymer = True\nfor i in range(len(seq)):\n    if seq[i] != seq[0]:\n        # Found different letter\n        is_homopolymer = False\n        break  # don't loop further\n\nif is_homopolymer:\n    print(\"homopolymer\")\nelse:\n    print(\"not homopolymer\")\n</python>\n<h2>Nested Loop</h2>\n<p>Write a program that prints all pairs of numbers that can occur when two six-sided dice are rolled.</p>\n<python># outer loop for first die d1:\nfor d1 in range(1, 7):  \n    # inner loop for second die d2\n    for d2 in range(1, 7):\n        print(d1, d2)\n</python>\n<h2>Defining functions</h2>\n<h3>A function that takes arguments and <i>prints</i> result.</h3>\n<python>def cube_root(x):\n    print(\"Cube root of\", x, \"is\", x ** (1/3))\n    \n    \ncube_root(10)\n# Output:\n# Cube root of 10 is 2.154434690031884\n</python>\n<h3>A function that takes an argument and <i>returns</i> result:</h3>\n<python>def cube_root(x):\n    return x**(1 / 3)\n    \n    \nx = 10\nroot = cube_root(x)\nprint(\"Cube root of\", x, \"is\", root)\n# Output:\n# Cube root of 10 is 2.154434690031884\n</python>\n<h3>One function can call other function:</h3>\n<python>def f(x):\n    return x * x\n\n\ndef g(x):\n    y = x + 1\n    return f(y)\n\n\nprint(g(5))\n# outputs:\n# 36\n</python>\n<h3>A function exits on <inline-code>return</inline-code> statement</h3>\n<python>def is_prime(num):\n    if num &#x3C; 2:\n        return False\n\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n\n    return True\n</python>\n<h1>Problems</h1>\n<ol>\n<li>\n<p>What does the following function do (assuming <inline-code>s</inline-code> and <inline-code>t</inline-code> are strings)?</p>\n<python>def mystery(s, t): \n    i = 0\n    while(i &#x3C; len(s)):\n        if(s[i] == t[i]):\n            break \n        i += 1\n    return i\n</python>\n<solution><p>The function returns the first index where letters match in string <inline-code>s</inline-code> and <inline-code>t</inline-code>.</p></solution>\n</li>\n<li>\n<p>You are given the following <inline-code>is_prime</inline-code> function that takes one integer as argument and returns <inline-code>True</inline-code> if such integer is a prime, <inline-code>False</inline-code> otherwise.</p>\n<python>def is_prime(num):\n    if num &#x3C; 2:\n        return False\n\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n\n    return True\n</python>\n<p>Create a function <inline-code>first_n_primes</inline-code> which takes one argument <inline-code>n</inline-code> and prints first <inline-code>n</inline-code> prime numbers on a single line, separated by a space. You should call <inline-code>is_prime</inline-code> function inside <inline-code>first_n_primes</inline-code>.</p>\n<solution><python>def first_n_primes(n):\n    \"\"\"Prints first n prime numbers\n    \n    Args:\n        n: an integer > 0\n    \n    Returns: None\n    \"\"\"\n    count = 0  # Keep count of how many primes printed.\n    i = 2  # Start with first prime\n    while count &#x3C; n:\n        if is_prime(i):\n            print(i, end=\" \")\n            count += 1\n        i += 1  # go to next number\n\n\nfirst_n_primes(20)\n</python></solution>\n</li>\n<li>\n<p>Recall the <inline-code>math</inline-code> module; it provides the following two functions:</p>\n<ul>\n<li><inline-code>math.sin(x)</inline-code> — sine of x, where x in measured in radians</li>\n<li><inline-code>math.radians(x)</inline-code> — convert angle x from degrees to radians</li>\n</ul>\n<p>Write a function <inline-code>sine</inline-code> that takes one argument—angle <inline-code>x</inline-code> in <i>degrees</i> and displays the value <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">sin(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span></span>.</p>\n<solution><python>import math\n\n\ndef sine(x):\n    \"\"\"Compute sine of a given angle.\n        \n    Args:\n        x: a float for angle in degrees\n    \n    Returns: a float\n    \"\"\"\n    return math.sin(math.radians(x))\n\n\nprint(sine(90))\nprint(sine(30)) \n</python></solution>\n</li>\n<li>\n<p>Write a function <inline-code>multiples</inline-code> that takes as input two arguments, <inline-code>num</inline-code> and <inline-code>limit</inline-code>. The function should prints all of the multiples of <inline-code>num</inline-code> that are smaller than <inline-code>limit</inline-code>. For example, calling <inline-code>multiples(3, 20)</inline-code> should print: <inline-code>3 6 9 12 15 18 </inline-code></p>\n<solution><python>def multiples(num, limit):\n    x = num  # start with the first multiple\n    i = 1\n    while x &#x3C; limit:\n        print(x, end=\" \")\n        i += 1\n        x = num * i\n        \nmultiples(3, 20)\n</python></solution>\n</li>\n<li>\n<p>Modify <inline-code>is_prime</inline-code> function above to return the smallest divisor of <inline-code>num</inline-code> (excluding <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></span> as divisor). If <inline-code>num</inline-code> is prime, return <inline-code>num</inline-code> itself. Examples:</p>\n<python>>>> smallest_divisor(5)\n5\n>>> smallest_divisor(15)\n3\n</python>\n<solution><python>def smallest_divisor(num):\n    for i in range(2, num):\n        if num % i == 0:\n            return i\n\n    return num\n</python></solution>\n</li>\n<li>\n<p>Modify <inline-code>smallest_divisor</inline-code> function above to return the largest divisor of <inline-code>num</inline-code> (excluding <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></span> as divisor). If <inline-code>num</inline-code> is prime, return <inline-code>num</inline-code> itself. Examples:</p>\n<python>>>> largest_divisor(5)\n5\n>>> largest_divisor(15)\n5\n</python>\n<solution><python>def largest_divisor(num):\n    largest = num\n    for i in range(2, num):\n        if num % i == 0:\n            largest = i\n\n    return largest\n</python></solution>\n</li>\n<li>\n<p>You are given the following function that takes a string <inline-code>s</inline-code> and returns a string without duplicate letters in <inline-code>s</inline-code> removed:</p>\n<python>def remove_duplicates(s):\n    no_duplicates = \"\"\n\n    for c in s:\n        if c not in no_duplicates:\n            no_duplicates += c\n\n    return no_duplicates\n</python>\n<p>Write a function <inline-code>count_common_letters</inline-code> that takes two strings as arguments, <inline-code>s1</inline-code> and <inline-code>s2</inline-code>, and returns how many letters the two strings have in common. Examples:</p>\n<python>>>> count_common_letters(\"banana\", \"cat\")\n1\n>>> count_common_letters(\"Silent\", \"listen\")\n6\n</python>\n<p>The function should be ignore case i.e should consider upper and lower case letters to be the same.</p>\n<solution><python>def count_common_letters(s1, s2):\n    # first let's remove the duplicates from one of the strings\n    # while converting all the letters to lower case\n    s1_no_duplicates = remove_duplicates(s1.lower())\n\n    # convert the letters in s2 to lower case\n    s2 = s2.lower()\n\n    # create a variable to keep count\n    count = 0\n\n    # go through the unique characters of s1 and check if\n    # they also appear in s2.\n    for c in s1_no_duplicates:\n        if c in s2:\n            count += 1\n\n    return count\n</python></solution>\n</li>\n<li>\n<p>Write a function <inline-code>get_index</inline-code> that takes two strings <inline-code>s</inline-code> and <inline-code>c</inline-code> as arguments. The string <inline-code>c</inline-code> would contain only one character. The function returns the index of the first occurrence of <inline-code>c</inline-code> in <inline-code>s</inline-code>. If <inline-code>c</inline-code> is not present in <inline-code>s</inline-code>, then the function returns <inline-code>-1</inline-code>. Examples:</p>\n<python>>>> get_index(\"artichoke\", \"k\")\n7\n>>> get_index(\"koala\", \"e\")\n-1\n>>> get_index(\"Apple\", \"A\")\n0\n</python>\n<solution><python>def get_index(s, c):\n    for i in range(len(s)):\n        if s[i] == c:\n            return i\n    return -1\n\n\nprint(get_index(\"artichoke\", \"k\"))\nprint(get_index(\"koala\", \"e\"))\nprint(get_index(\"Apple\", \"A\"))\n</python></solution>\n</li>\n<li>\n<p>Write a function <inline-code>multiplication_table</inline-code> that takes two integers <inline-code>start</inline-code> and <inline-code>end</inline-code>. The function prints a multiplication table, where each row contains <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>10</mn></mrow><annotation encoding=\"application/x-tex\">10</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span></span></span></span></span> columns for <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>10</mn></mrow><annotation encoding=\"application/x-tex\">10</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span></span></span></span></span> multiples of a number <inline-code>i</inline-code> where <inline-code>start &#x3C;= i &#x3C;= end</inline-code>. For example,</p>\n<div class=\"w120\"><output>>>> multiplication_table(20, 25)\n20\t40\t60\t80\t100\t120\t140\t160\t180\t200\t\n21\t42\t63\t84\t105\t126\t147\t168\t189\t210\t\n22\t44\t66\t88\t110\t132\t154\t176\t198\t220\t\n23\t46\t69\t92\t115\t138\t161\t184\t207\t230\t\n24\t48\t72\t96\t120\t144\t168\t192\t216\t240\t\n25\t50\t75\t100\t125\t150\t175\t200\t225\t250\n</output></div>\n<div class=\"w120\"><output>>>> multiplication_table(33, 37)\n33\t66\t99\t132\t165\t198\t231\t264\t297\t330\t\n34\t68\t102\t136\t170\t204\t238\t272\t306\t340\t\n35\t70\t105\t140\t175\t210\t245\t280\t315\t350\t\n36\t72\t108\t144\t180\t216\t252\t288\t324\t360\t\n37\t74\t111\t148\t185\t222\t259\t296\t333\t370\n</output></div>\n<solution><python>def multiplication_table(start, end):\n    for i in range(start, end+1):\n        for j in range(1, 11):\n            print(i * j, end = \"\\t\")\n        print()\n\nmultiplication_table(20, 25)\n\n# multiplication_table(33, 37)\n</python></solution>\n</li>\n</ol>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}