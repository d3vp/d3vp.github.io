{"pageProps":{"allSlugs":[["Lecture-1",[{"title":"1 — Programming Basics","slug":"Lecture-1"}]],["Lecture-2.1",[{"title":"2.1 — Variables, Arithmetic & String operations","slug":"Lecture-2.1"}]],["Lecture-2.2",[{"title":"2.2 — Function calls, Defining functions, Types of Errors","slug":"Lecture-2.2"}]],["Lecture-3.1",[{"title":"3.1 — Order of Expression Evaluation, Comparing Values, Conditional Execution","slug":"Lecture-3.1"}]],["Lecture-3.2",[{"title":"3.2 — if statement, for loop, Indexing & Slicing Strings","slug":"Lecture-3.2"}]],["Lecture-4.1",[{"title":"4.1 — return vs. print, while statement, Modules","slug":"Lecture-4.1"}]],["Lecture-4.2",[{"title":"4.2 — String methods, break & continue statements","slug":"Lecture-4.2"}]],["Lecture-5.1",[{"title":"5.1 — Controlling print(), Nested Loops, Lists","slug":"Lecture-5.1"}]],["Lecture-5.2",[{"title":"5.2 — Scope of variables, List operations","slug":"Lecture-5.2"}]],["Lecture-6.1",[{"title":"6.1 — Tuples, Immutable objects, Sets","slug":"Lecture-6.1"}]],["Lecture-6.2",[{"title":"6.2 — More list & set operations, Dictionaries","slug":"Lecture-6.2"}]],["Lecture-7.1",[{"title":"7.1 — Iterables, Unpacking, Nested Lists","slug":"Lecture-7.1"}]],["Lecture-7.2",[{"title":"7.2 — Nested data structures, Comprehensions, Modules","slug":"Lecture-7.2"}]],["Lecture-8.1",[{"title":"8.1 — Nested list comprehensions, Reading & Writing Files","slug":"Lecture-8.1"}]],["Lecture-8.2",[{"title":"8.2 — Shallow vs. deep copy, Handling exceptions","slug":"Lecture-8.2"}]],["Lecture-9.1",[{"title":"9.1 — Object Oriented Programming (OOP)","slug":"Lecture-9.1"}]],["Lecture-9.2",[{"title":"9.2 — Keyword arguments, More on OOP","slug":"Lecture-9.2"}]]],"post":{"slug":"Lecture-7.1","content":"<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"whats-wrong-in-this-example\">What’s wrong in this example?</h2><python>def average(nums):\n    total = 0\n\n    for x in grades:\n       total += x\n\n    return total / len(grades)\n\n\ngrades = [85, 100, 98, 75]\nprint(average(grades))  # 89.5\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"\"></h2><ul>\n<li>Try to avoid using global variables within functions when possible.</li>\n<li>Assignment autograder will fail if you use global variable(s) instead of function parameter(s) inside a function.</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"iterable\">Iterable</h2><p>An <sc>iterable</sc> is a kind of object that can produce a sequence of other objects and hence can be used in a <inline-code>for</inline-code> loop.</p><ul>\n<li>range: sequence of integers</li>\n<li>strings: sequence of characters</li>\n<li>tuples: (immutable) sequence of any object</li>\n<li>lists: sequence of any object</li>\n<li>dictionaries: sequence of tuples (key, value)</li>\n<li>sets: collection of immutable objects (but order is not defined)</li>\n</ul></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-1\"></h2><p>Iterables can be used as arguments of the functions <inline-code>list()</inline-code>, <inline-code>set()</inline-code>, <inline-code>tuple()</inline-code>, <inline-code>dict()</inline-code>, etc.</p><python># range object only stores start, end and step size.\nprint(range(10, 101, 10))  # range(10, 101, 10)\n\n# list stores all objects in memory \nl = list(range(10, 101, 10))\nprint(l)\n# [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n\ns = set(range(10, 101, 10))\nprint(s)\n# {100, 70, 40, 10, 80, 50, 20, 90, 60, 30}\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-2\"></h2><greenbox><p>“Performance of searching a list, a set and dictionary” from last week.</p></greenbox></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"sorting-a-list-using-sort-method\">Sorting a list using <inline-code>sort</inline-code> method</h2><python># list.sort() : \n#   Sorts the list \"in place\" i.e. list will be modified.\n#   Returns None.\n#   The list is sorted in ascending order.\n\ngrades = [90, 70, 60.5, 70, 80]\ngrades.sort()\nprint(grades)  # [60.5, 70, 70, 80, 90]\n\n\ngrades.sort(reverse=True)  # descending order\nprint(grades)  # [90, 80, 70, 70, 60.5]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-3\"></h2><python>grades = [90, 70, 60.5, 70, 80, \"A\"]\ngrades.sort()\n# TypeError: '&#x3C;' not supported between instances of 'str' and 'int'\n\n\n# Works with strings as well\nfruits = [\"banana\", \"orange\", \"apple\"]\nfruits.sort()\nprint(fruits)  # ['apple', 'banana', 'orange']\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"sorted-function\"><inline-code>sorted</inline-code> function</h2><python># sorted(iterable): \n#   Return a new list containing all items from \n#   the iterable in ascending order.\n#   If any items cannnot be compared to each other, TypeError occurs.\n\ngrades = [90, 70, 60.5, 70, 80]\nsorted_grades = sorted(grades)\nprint(sorted_grades)  # [60.5, 70, 70, 80, 90]\nprint(grades)  # [90, 70, 60.5, 70, 80]\n\n# Sort in descending order\nsorted_grades = sorted(grades, reverse=True)\nprint(sorted_grades)  # [90, 80, 70, 70, 60.5]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-4\"></h2><python># string is iterable\nword = \"pineapple\"\nsorted_letters = sorted(word)\nprint(sorted_letters)\n# ['a', 'e', 'e', 'i', 'l', 'n', 'p', 'p', 'p']\n\n\n# set is iterable\nfruits = {\"banana\", \"orange\", \"apple\"}\nsorted_fruits = sorted(fruits)\nprint(sorted_fruits)  # ['apple', 'banana', 'orange']\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-5\"></h2><python># dictionary is considered as an iterable of its keys\ninventory = {\"sofa\": 5, \"table\": 10, \"chair\": 20, \"mattress\": 5}\nsorted_names = sorted(inventory)\nprint(sorted_names)  # ['chair', 'mattress', 'sofa', 'table']\n\n# same as above\nsorted_names = sorted(inventory.keys())\nprint(sorted_names)  # ['chair', 'mattress', 'sofa', 'table']\n\n# iterable of values in the dictionary\nsorted_counts = sorted(inventory.values())\nprint(sorted_counts)  # [5, 5, 10, 20]\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"packing-vs-unpacking\">Packing vs Unpacking</h2><p>When we create a string, a list, or a tuple, we are packing several elements into a single object.</p><python>s = \"cat\"\nmy_list = [5, 'a']\nmy_tuple = (0, 3, 7)\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-6\"></h2><p><sc>Unpacking</sc> allows us to assign values in a string/list/tuple to multiple variables.<br>\nWe must know the exact length of the string/list/tuple.</p><python>s = \"cat\"\na, b, c = s\n# a, b and c are all strings\nprint(a)  # c\nprint(b)  # a\nprint(c)  # t\n\nmy_list = [5, 'cat']\nx, y = my_list\nprint(x)  # 5\nprint(y)  # cat\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-7\"></h2><python># Parentheses are optional in this context.\nmy_tuple = 0, 3, 7\nx, y, z = my_tuple\nprint(x)  # 0\nprint(y)  # 3\nprint(z)  # 7\n\n# Variables must match number of elements\ntup = 1, 2, 3 \nx, y = tup\n# ValueError: too many values to unpack (expected 2)\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"multiple-assignment-using-packingunpacking-on-same-line\">Multiple assignment using packing/unpacking on same line</h2><python># We are creating a tuple on the right side and \n# unpacking it into 3 variables.\ncity, population, area = 'Montreal', 1704694, 431.5\nprint(city)  # Montreal\nprint(population)  # 1704694\nprint(area)  # 431.5\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"returning-a-tuple-from-a-function-and-unpacking\">Returning a tuple from a function and unpacking</h2><python>def min_max(mylist):\n    # Return a tuple of two elements\n    return min(mylist), max(mylist)\n    \n    \n# Unpack the returned tuple into 2 variables\nx, y = min_max([2, -3, 10, 20])\nprint(x)  # -3\nprint(y)  # 20\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"nested-lists\">Nested Lists</h2><p>An element of a list can be another list!<br>\nSuch lists are called <sc>nested</sc> lists.</p><python>nested_list = [[1], [1, 2, 3], [1, 2]]\nprint(type(nested_list))\n# &#x3C;class 'list'>\n\nprint(nested_list[0])\n# [1]\nprint(nested_list[1])\n# [1, 2, 3]\nprint(nested_list[2])\n# [1, 2]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-8\"></h2><p>Nested lists are useful to store data which come in form of a table or spreadsheet.</p><python>#                      Name,     A1,  A2,  A3\nstudent_grades = [[\"Student-A\",  90,  95, 100], \n                  [\"Student-B\",  85,  90,  98], \n                  [\"Student-C\",  70,  75,  80]] \n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-9\"></h2><p>We can perform same operations on nested lists as we saw earlier: indexing, slicing, etc.</p><python>student_grades = [[\"Student-A\",  90, 95, 100],\n                  [\"Student-B\",  85, 90, 98],\n                  [\"Student-C\",  70, 75, 80]]\n\n# Print name of 2nd student\nprint(student_grades[1][0]) \n# Student-B\n\n# Change A2 grade for Student-B\nstudent_grades[1][2] = 100\nprint(student_grades)\n# [['Student-A', 90, 95, 100], ['Student-B', 85, 100, 98], \n#  ['Student-C', 70, 75, 80]]\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"iterating-in-a-row-first-order\">Iterating in a <i>row-first</i> order</h2><hgrid><python>matrix = [[81, 75, 90, 60], \n          [80, 70, 85, 55],\n          [40, 50, 45, 85]]\n\nnum_rows = len(matrix)  \nnum_cols = len(matrix[0]) \n\nprint(\"Row-first order:\")\nfor r in range(num_rows):\n    for c in range(num_cols):\n        print(matrix[r][c], end=\" \")\n    print()\n</python><output>Row-first order:\n81 75 90 60 \n80 70 85 55 \n40 50 45 85 \n</output></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"iterating-in-a-column-first-order\">Iterating in a <i>column-first</i> order</h2><hgrid><python>matrix = [[81, 75, 90, 60], \n          [80, 70, 85, 55],\n          [40, 50, 45, 85]]\n\nnum_rows = len(matrix)  \nnum_cols = len(matrix[0])\n\nprint(\"\\nColumn-first order:\")\nfor c in range(num_cols):\n    for r in range(num_rows):\n        print(matrix[r][c], end=\" \")\n    print()\n</python><output>Column-first order:\n81 80 40 \n75 70 50 \n90 85 45 \n60 55 85\n</output></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"list-of-tuples\">List of tuples</h2><python>points = [(1, 1, 3), (4, 10.5, 9), (7, 4.4, 9.7)]\n\n# List element can be modified:\npoints[1] = (4, 12, 10)  # Assign new point\nprint(points)  # [(1, 1, 3), (4, 12, 10), (7, 4.4, 9.7)]\n\n# Trying to change the second points's z-coordinate\npoints[1][2] = 20  \n# TypeError: 'tuple' object does not support item assignment\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-10\"></h2><p>Iterating over list of tuples:</p><hgrid><python>points = [(1, 1, 3), (4, 10.5, 9), \n          (7, 4.4, 9.7)]\n\nfor p in points:  # p is a tuple\n    print(p)\n\n# Unpack a tuple into 3 variables\nfor x, y, z in points:  \n    print(x, y, z)\n</python><output>(1, 1, 3)\n(4, 10.5, 9)\n(7, 4.4, 9.7)\n1 1 3\n4 10.5 9\n7 4.4 9.7\n</output></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-11\"></h2><greenbox><p>Time for some problems on Ed Lessons.</p></greenbox><divider></divider></slide>","title":"7.1 — Iterables, Unpacking, Nested Lists","date":"2024-02-10","published":true,"section":"Lecture-7.1"}},"__N_SSG":true}