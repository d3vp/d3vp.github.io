{"pageProps":{"allSlugs":[["Lecture-1",[{"title":"1 — Programming Basics","slug":"Lecture-1"}]],["Lecture-2.1",[{"title":"2.1 — Variables, Arithmetic & String operations","slug":"Lecture-2.1"}]],["Lecture-2.2",[{"title":"2.2 — Function calls, Defining functions, Types of Errors","slug":"Lecture-2.2"}]],["Lecture-3.1",[{"title":"3.1 — Order of Expression Evaluation, Comparing Values, Conditional Execution","slug":"Lecture-3.1"}]],["Lecture-3.2",[{"title":"3.2 — if statement, for loop, Indexing & Slicing Strings","slug":"Lecture-3.2"}]],["Lecture-4.1",[{"title":"4.1 — return vs. print, while statement, Modules","slug":"Lecture-4.1"}]],["Lecture-4.2",[{"title":"4.2 — String methods, break & continue statements","slug":"Lecture-4.2"}]],["Lecture-5.1",[{"title":"5.1 — Controlling print(), Nested Loops, Lists","slug":"Lecture-5.1"}]]],"post":{"slug":"Lecture-4.1","content":"<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"assignment-1\">Assignment 1</h2><ul>\n<li>Read the instruction pages</li>\n<li>Ask questions on Ed Discussion — posts can be made anonymous\n<ul>\n<li>Make the post private when you want to include code</li>\n</ul>\n</li>\n<li>It is not enough that your solution passes all the given “public” tests\n<ul>\n<li>Make sure your solution will work for other values not given in the examples</li>\n<li>Q1: use the blood type compatibility table to test your code with different values</li>\n<li>Q2: Try different strings of lengths 1–10</li>\n<li>Q3: For small <inline-code>n</inline-code>, you can use the given formula to verify your solution</li>\n</ul>\n</li>\n</ul></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"\"></h2><div class=\"ppt-scale-1_25\"><p><b class=\"ppt-f80\">What does this mystery function do?</b></p><iframe width=\"800\" height=\"420\" scrolling=\"no\" style=\"overflow: hidden;\" frameborder=\"0\" src=\"https://pythontutor.com/iframe-embed.html#code=def%20mystery%28s%29%3A%20%20%20%20%20%0A%20%20%20%20result%20%3D%20%22%22%0A%20%20%20%20for%20i%20in%20range%28len%28s%29%29%3A%0A%20%20%20%20%20%20%20%20result%20%3D%20s%5Bi%5D%20%2B%20result%0A%0A%20%20%20%20return%20result%0A%0Anew_string%20%3D%20mystery%28%22hello%22%29%0Aprint%28new_string%29&#x26;codeDivHeight=400&#x26;codeDivWidth=350&#x26;cumulative=false&#x26;curInstr=0&#x26;heapPrimitives=true&#x26;origin=opt-frontend.js&#x26;py=3&#x26;rawInputLstJSON=%5B%5D&#x26;textReferences=false\"> </iframe></div></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"functions-and-return-value-none\">Functions and return value <inline-code>None</inline-code></h2><p>Functions that do not have an explicit <inline-code>return</inline-code> statement, return a special value <inline-code>None</inline-code>.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-1\"></h2><p>The following 3 functions are equivalent because</p><ul>\n<li>Python implicitly returns <inline-code>None</inline-code> for a function that does not  use a return statement</li>\n<li>if the <inline-code>return</inline-code> statement is used without a value, <inline-code>None</inline-code> is returned.</li>\n</ul><python>def greeting():\n    print(\"Welcome!\")\n</python><hgrid><python>def greeting():\n    print(\"Welcome!\")\n    return\n</python><python>def greeting():\n    print(\"Welcome!\")\n    return None\n</python></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-2\"></h2><hgrid><div><p><b>Function that prints</b></p><python>def f(x):\n    result = x * x - x - 1\n    print(result)\n\nf(5)  # No print here\n\ny = f(10) + 10  # TypeError\n</python><p>Less flexible to use; cannot be used with other expressions</p></div><div><p><b>Function that returns a value</b></p><python>def f(x):  \n    result = x * x - x - 1\n    return result\n\nprint(f(5))  # print here\n\ny = f(10) + 10  # works\n</python><p>More flexible to use; can be used with other expressions</p></div></hgrid><p>It is usually advisable to keep functions “pure” and do <inline-code>print()</inline-code>, <inline-code>input()</inline-code> outside the functions when possible.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-3\"></h2><p>Try the problem “Max of three numbers” on Ed Lessons.</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"short-circuit-evaluation\">Short Circuit Evaluation</h2><p>The evaluation of a boolean expression with <inline-code>and</inline-code> and <inline-code>or</inline-code> stops as soon as the end result can be inferred.</p><p>For example, in the expression below evaluates to <inline-code>False</inline-code> no matter what <inline-code>not (x >= 1 or y == 3)</inline-code> evaluates to.</p><python lineno=\"false\">>>> 2 &#x3C; 1 and not (x >= 1 or y == 3)\nFalse\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-4\"></h2><p>In general, for any expression with <inline-code>and</inline-code> operator:</p><python lineno=\"false\">left_operand and right_operand\n</python><p>if <inline-code>left_operand</inline-code> is <inline-code>False</inline-code>, Python does not evaluate <inline-code>right_operand</inline-code>.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-5\"></h2><p>Similarly, for any expression with <inline-code>or</inline-code> operator:</p><python lineno=\"false\">left_operand or right_operand\n</python><p>if <inline-code>left_operand</inline-code> is <inline-code>True</inline-code>, Python does not evaluate <inline-code>right_operand</inline-code>.</p><p>For example,</p><python lineno=\"false\"># Evaluates to True no matter what (x &#x3C; 5) evaluates to\n>>> 1 == 1 or (x &#x3C; 5)\nTrue\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"why-is-short-circuit-evaluation-useful\">Why is Short Circuit Evaluation useful?</h2><ul>\n<li>It can save time, e.g. when <inline-code>right_operand</inline-code> has a computationally expensive function call.</li>\n<li>It can avoid unnecessary errors as show below.</li>\n</ul><python>>>> x = 0\n>>> 1 / x &#x3C; 0.5  # cannot divide a number by zero\nZeroDivisionError: division by zero\n\n>>> x != 0 and 1 / x &#x3C; 0.5\nFalse\n>>> x = 3\n>>> x != 0 and 1 / x &#x3C; 0.5\nTrue\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-6\"></h2><p><b>Common mistake when using logical operators</b></p><hgrid><python lineno=\"false\">x == \"a\" or \"b\"  # Incorrect\n\nx == \"a\" or x == \"b\"  # Correct\n</python><python lineno=\"false\">x == \"a\" and \"b\"  # Incorrect\n\nx == \"a\" and x == \"b\"  # Correct\n</python></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"while-statement\"><inline-code>while</inline-code> statement</h2><p><inline-code>while</inline-code> statement is another way to repeatedly execute a block of code.</p><p>General format of a while loop:</p><div class=\"px1 py025 br5\" style=\"background-color: white; width: 90%; white-space: pre;\"><p><code>Initialize variables so that</code> <code class=\"bggreen ibox\">condition</code> <code>is True</code>\n<code class=\"b\">while</code> <code class=\"bggreen ibox\">condition</code> <code class=\"b\">:</code>\n<code>    </code><code class=\"bgblue ibox\">code block</code>\n<code>    </code><code>update variables that affect</code> <code class=\"bggreen ibox\">condition</code></p></div></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-7\"></h2><p>What <inline-code>while</inline-code> loop does:</p><ol>\n<li>Evaluate the <code class=\"bggreen ibox\">condition</code></li>\n<li>If <code class=\"bggreen ibox\">condition</code> evaluates to <inline-code>False</inline-code>, loop body is not executed.</li>\n<li>If <code class=\"bggreen ibox\">condition</code> evaluates to <inline-code>True</inline-code>, run the loop body (all indented lines of code)<br>\na) In loop body we perform some task, <code class=\"bgblue ibox\">code block</code>, and update variables that may change the <code class=\"bggreen ibox\">condition</code> value<br>\nb) Go back to step 1</li>\n</ol></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-8\"></h2><python># a program to compute sum of first N numbers\nN = 10\n\ntotal = 0\n\ni = 1  # Set value so that condition below is True \nwhile i &#x3C;= N:  # Check if condition is True\n    # main task of summing numbers:\n    total = total + i  \n    \n    # update i, affects value of condition i &#x3C;= N \n    i = i + 1\n\n# print result outside the loop   \nprint(total)\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-9\"></h2><p>It is a common mistake to forget updating the condition inside loop body.</p><p>See what happens when you remove/comment out the line <inline-code>i = i + 1</inline-code> in the previous example.</p><p>The loop will never end — an infinite loop!</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"augmented-assignment-statements\">Augmented assignment statements</h2><p>Augmented assignment is the combination, in a single statement, of a arithmetic operation and an assignment statement:</p><hgrid><python>x = 3\ny = 5\n\nx += 1  # same as: x = x + 1\nx += y  # x = x + y\nx += x * y  # x = x + x * y\n\nx -= 5  # x = x - 5\n\nx *= 2  # x = x * 2\n</python><div><ul>\n<li>Similarly, other operators exist: <inline-code>/=</inline-code>, <inline-code>//=</inline-code>, <inline-code>%=</inline-code>, <inline-code>**=</inline-code>.</li>\n<li>These are very useful, especially when updating the condition in while loop.</li>\n</ul></div></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"loops-with-indefinite-number-of-steps\">Loops with indefinite number of steps</h2><p>So far we have seen loops that work with fixed number of steps.</p><p>But while loop can be used for repeating code for unknown number of steps.</p><greenbox><p>Write a program to keep asking for password until correct password is entered.</p><p>Assume that correct (secret) password is <inline-code>abcd1234</inline-code>.</p></greenbox></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-10\"></h2><python>password = input(\"Enter password: \")\n\nwhile password != \"abcd1234\":\n    print(\"Incorrect password, try again!\")\n    \n    password = input(\"Enter password: \")\n    \n# Below line executes only after the above loop ends,\n# i.e. when the correct password was entered.\nprint(\"Login successful!\")\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"for-vs-while-loops\"><inline-code>for</inline-code> vs <inline-code>while</inline-code> loops</h2><ul>\n<li><inline-code>for</inline-code> loops are better when we want to go over a fixed sequence such as a string or a sequence of numbers</li>\n<li><inline-code>while</inline-code> loop is more flexible as it allows arbitrary conditions and number of steps. e.g. do something until user enters correct data</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"importing-modules\">Importing modules</h2><p>A <sc>module</sc> is a Python file (typically a <inline-code>.py</inline-code> file) containing function definitions, statements, etc.</p><p>Many modules such as <inline-code>math</inline-code> and <inline-code>random</inline-code> are already installed with Python.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-11\"></h2><p>Using <inline-code>import</inline-code> statement, we can use functions, variables etc. from a module in our program:</p><python>import math\n\n# Call a function defined in a module using dot operator\nx = math.sqrt(16)\nprint(x)\n\ny = math.sin(math.pi / 2)\nprint(y)\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-12\"></h2><p>Another way to import functions, variables from the module:</p><python>from math import sqrt, sin, pi\n\n# Now, we can call sqrt and sin without the \"math.\" prefix\nx = sqrt(16)\nprint(x)\n\ny = sin(pi / 2)\nprint(y)\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-13\"></h2><p>Use <inline-code>help()</inline-code> function in Python Shell to see list of all function contained in <inline-code>math</inline-code> module:</p><python lineno=\"false\">>>> import math\n>>> help(math) # will display a long doc, not showing here\n\n>>> help(math.sqrt) # show help on a specific function\nHelp on built-in function sqrt in module math:\n\nsqrt(x, /)\n    Return the square root of x.\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"random-module\"><inline-code>random</inline-code> module</h2><p>In Python, we can generate random numbers using the <inline-code>random</inline-code> module.</p><p>The module provides us with a lot of different functions but for the moment we’ll focus on the following:</p><ul>\n<li><inline-code>random()</inline-code> – It returns a random float value between <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0.0</mn></mrow><annotation encoding=\"application/x-tex\">0.0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0.0</span></span></span></span></span> (inclusive) and <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1.0</mn></mrow><annotation encoding=\"application/x-tex\">1.0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1.0</span></span></span></span></span> (exclusive)</li>\n<li><inline-code>randint(x, y)</inline-code> – It returns a random integer between x and y, both included.</li>\n</ul></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-14\"></h2><p>Each time we execute these functions, we will get a different value, try it!</p><python>import random\n\nprint(random.random())  # 0.12826246225939641\n\nprint(random.randint(1, 10))  # 9\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-15\"></h2><greenbox><p>Try the problem “Guessing Game” on Ed Lessons.</p></greenbox><divider></divider></slide>","title":"4.1 — return vs. print, while statement, Modules","date":"2024-01-22","published":true,"section":"Lecture-4.1"}},"__N_SSG":true}