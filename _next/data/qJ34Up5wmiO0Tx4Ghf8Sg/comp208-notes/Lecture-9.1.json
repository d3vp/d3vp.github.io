{"pageProps":{"titles":["2.1 — Programming Basics","2.2 — Variables, Arithmetic & String operations","2.3 — Function Calls, Expressions","3.1 — Defining functions, Errors & Debugging","3.2 — Boolean Expressions, Comparison & Logical Operators","3.3 — Conditional execution using if statement","3.4 — for loop & String indexing, slicing","Python Style Guide","4.1 — Escape Characters & Controlling print()","4.2 — String methods & in operator","4.3 — while statement & Nested loops","4.4 — return statement & Importing modules","5.1 — Scope of Variables","5.2 — Lists & List Operations","5.3 — List Functions & Methods","5.4 — Tuples","6.1 — Object Identity, Immutability, Unpacking","6.2 — Sets","6.3 — Dictionaries","7.1 — Nested data structures & comparisons","7.2 — Iterables & comprehensions","7.3 — Reading and writing files","8.1 — Default arguments & Modules","8.2 — Handling Exceptions","9.1 — Object Oriented Programming (OOP)","9.2 — More on methods & __str__","10.1 — NumPy","10.2 — Plotting using Matplotlib"],"slugs":["Lecture-2.1","Lecture-2.2","Lecture-2.3.1","Lecture-3.1","Lecture-3.2","Lecture-3.3","Lecture-3.4","style-guide","Lecture-4.1","Lecture-4.2","Lecture-4.3","Lecture-4.4","Lecture-5.1","Lecture-5.2","Lecture-5.3","Lecture-5.4","Lecture-6.1","Lecture-6.2","Lecture-6.3","Lecture-7.1","Lecture-7.2","Lecture-7.3","Lecture-8.1","Lecture-8.2","Lecture-9.1","Lecture-9.2","Lecture-10.1","Lecture-10.2"],"post":{"title":"9.1 — Object Oriented Programming (OOP)","slug":"Lecture-9.1","content":"<h2>Objects</h2>\n<ul>\n<li>An object consists of data and a set of methods can be provided to work with it.</li>\n<li>For example, a string is a collection of characters and methods like <code>isupper</code> or <code>split</code> can be called <i>on it</i>.</li>\n<li>Python is an object-oriented language. This means that it uses objects to represent data and provides methods related to them.</li>\n</ul>\n<h2>Object-oriented programming (OOP)</h2>\n<ul>\n<li>Up to now, we have been using functions to organize our code, and built-in types <code>(list, str, list, or dict)</code> to organize our data.</li>\n<li>OOP is a way to use programmer-defined data classes to organize code and data.</li>\n</ul>\n<h2>Class and objects</h2>\n<ul>\n<li>A class is like a <i>blueprint/template</i> for creating objects. It specifies what data the objects have and what methods can operate on the data.</li>\n<li>An object is an <sc>instance</sc> of some class. The terms <i>instance</i> and <i>object</i> are used interchangeably.</li>\n</ul>\n<h2>Example — Student</h2>\n<p>We want to define a class that would be a good template for objects representing students.</p>\n<p>Useful data:</p>\n<ul>\n<li>Name</li>\n<li>Student ID</li>\n<li>Current courses</li>\n<li>Past grades</li>\n</ul>\n<p>Useful methods:</p>\n<ul>\n<li>compute_GPA</li>\n<li>add_course</li>\n<li>drop_course</li>\n</ul>\n<p>Each instance of the class (i.e., each object) would represent one particular student.</p>\n<h1>Defining a class</h1>\n<ul>\n<li>We define a class using the keyword <inline-code>class</inline-code> as follows:</li>\n<li>In a Python file, we can define as many classes as we want.</li>\n</ul>\n<python>class MyNewClass:\n   \"\"\" a new data type \"\"\"\n\nprint(MyNewClass)\n# &#x3C;class '__main__.MyNewClass'>\n</python>\n<ul>\n<li>From the header we see that the class is called <inline-code>MyNewClass</inline-code></li>\n<li>The body of this class only contains a docstring for the moment and no other code.</li>\n<li>Class names should follow the UpperCamelCase convention.</li>\n</ul>\n<p>Note that the full name of the type is <inline-code>__main__.MyNewClass</inline-code> where <inline-code>__main__</inline-code> is the default module name of the main program that we execute.</p>\n<h2>Instantiating a class</h2>\n<p>We can now create an object of this type by calling the class as if it were a function.</p>\n<python>class Student:\n    \"\"\" Represents a student \"\"\"\n\nstudent1 = Student() \nprint(student1)\n# &#x3C;__main__.Student object at 0x7fa7806c9310>\n\nstudent2 = Student() \nprint(student2)\n# &#x3C;__main__.Student object at 0x7fa7806c9290>\n</python>\n<ul>\n<li>The variables <inline-code>student1</inline-code> and <inline-code>student2</inline-code>refer to two different objects of type <inline-code>Student</inline-code>.</li>\n<li>When we print the objects, we see what class the objects belongs to, and the identity of the objects.</li>\n</ul>\n<h2>Attributes</h2>\n<python>class Student:\n    \"\"\" Represents a student \"\"\"\n\n\nstudent1 = Student()\n# Create an attribute in the Student object:\nstudent1.name = \"Reza\"  \n\n# Use the attribute inside Student object:\nprint(student1.name)  # Reza\n\nprint(name)  # NameError: name 'name' is not defined\n</python>\n<ul>\n<li>We can create a variable that belongs to a specific object.</li>\n<li>These variables are called <sc>attributes</sc>.</li>\n<li>We create attributes by assigning values to an object using the dot notation.</li>\n<li>Attributes can be accessed only through the object they belong to, using dot notation.</li>\n</ul>\n<h2>Visualization</h2>\n<div class=\"my2\"></div>\n<iframe width=\"800\" height=\"400\" frameborder=\"0\" src=\"https://pythontutor.com/iframe-embed.html#code=class%20Student%3A%0A%20%20%20%22%22%22%20Represents%20a%20student%0A%20%20%20%22%22%22%0A%0Astudent1%20%3D%20Student%28%29%0Astudent1.name%20%3D%20%22Deven%22%0Aname%20%3D%20student1.name%0Aprint%28name%29%0A&#x26;codeDivHeight=400&#x26;codeDivWidth=350&#x26;cumulative=false&#x26;curInstr=0&#x26;heapPrimitives=nevernest&#x26;origin=opt-frontend.js&#x26;py=3&#x26;rawInputLstJSON=%5B%5D&#x26;textReferences=false\"> </iframe>\n<h2>Try it!</h2>\n<ul>\n<li>Define a class <inline-code>Student</inline-code>.</li>\n<li>Write a function that takes as arguments a string <inline-code>name</inline-code> and an integer <inline-code>id_num</inline-code> and returns a <inline-code>Student</inline-code> object with two attributes <inline-code>name</inline-code> and <inline-code>id_num</inline-code>.</li>\n<li>Write a function that takes as arguments two Student objects and returns the <inline-code>name</inline-code> of the student with the larger <inline-code>id_num</inline-code>.</li>\n<li>Test the above functions by creating two objects of Student class.</li>\n</ul>\n<python>class Student:\n    \"\"\" Represents a student. \"\"\"\n\n\ndef create_student(name, id_num):\n    new_student = Student() # creates an object of Student class\n    new_student.name = name\n    new_student.id_num = id_num\n    return new_student\n\n\ndef larger_ID(student1, student2):\n    if student1.id_num > student2.id_num:\n        return student1.name\n    else:\n        return student2.name\n\n\ns1 = create_student(\"Reza\", 26000)\nprint(s1.name)  # Reza\nprint(s1.id_num)  # 26000\n\ns2 = create_student(\"Jane\", 26001)\nprint(larger_ID(s1, s2))  # Jane\n</python>\n<h1>Constructor</h1>\n<ul>\n<li>A constructor (also known as initializer method) is a special method named <inline-code>__init__</inline-code>.</li>\n<li>It is invoked automatically whenever a new object is created.</li>\n<li>The constructor is used to create the attributes of an object and to set their initial value.</li>\n<li>We define it using the following syntax:\n<python>class MyNewClass:\n    def __init__(self):\n        # do something when the object is being created\n</python>\n</li>\n<li><inline-code>self</inline-code> refers to the object that is being initialized. It is not a keyword.</li>\n</ul>\n<h2>Examples</h2>\n<p>Let’s write a constructor for the <inline-code>Student</inline-code> class that takes no arguments (besides <inline-code>self</inline-code>) and prints out “Creating a new student”.</p>\n<python>class Student:\n    \"\"\" Represents a student \"\"\"\n    \n    def __init__(self):\n        print(\"Creating a new student\")\n\n\nstudent1 = Student()  # __init__ will be called here\n</python>\n<output>Creating a new student\n</output>\n<p>Now let’s modify constructor and have it take some arguments:</p>\n<ul>\n<li><inline-code>name</inline-code> (string) of the student and their <inline-code>id_num</inline-code> (int)</li>\n<li>Create attributes <inline-code>name</inline-code> and <inline-code>id_num</inline-code> using <inline-code>self</inline-code> and set their values to the respective arguments.</li>\n</ul>\n<python>class Student:\n    \"\"\" Represents a student \"\"\"\n    \n    # constructor:\n    def __init__(self, name, id_num):\n        print(\"Creating a new student\")\n        # Create attributes:\n        self.name = name\n        self.id_num = id_num\n\n\nstudent1 = Student(\"Deven\", 12345)  # two arguments\n# Creating a new student\n\nprint(student1.name, student1.id_num)\n# Deven 12345\n\nstudent2 = Student(\"Reza\", 5000) \n# Creating a new student\n\nprint(student2.name, student2.id_num)\n# Reza 5000\n</python>\n<p>What happens in example above when we do not create attributes in <inline-code>__init__</inline-code> ?</p>\n<h1>Methods</h1>\n<p>We can define methods inside a class as we have been defining functions inside a module.</p>\n<ul>\n<li><sc>Instance methods</sc> – methods that are associated to a specific instance of the class.</li>\n<li>These methods are called on an instance (object) and they can access data specific to that instance.</li>\n</ul>\n<python>class MyNewClass:\n    def my_method(self, argument1, argument2, ..., argumentN):\n        # do something \n</python>\n<ul>\n<li>\n<p>The first argument of every instance method is always refers to the object on which we are calling the method.</p>\n<python>obj = MyNewClass()  # Create an instance\n\nobj.my_method(argument1, argument2, ..., argumentN)  # call my_method on obj\n</python>\n</li>\n<li>\n<p>By convention, this argument is always named <inline-code>self</inline-code>. (<inline-code>self</inline-code> is not a keyword! We could use any other name for the first argument and it would not be an error.)</p>\n</li>\n</ul>\n<h2>Example</h2>\n<p>Let’s go back to the Student class:</p>\n<ul>\n<li>Add a method <inline-code>display_info()</inline-code> that displays the information of a student i.e. prints the attributes of the instance.</li>\n</ul>\n<python>class Student:\n    \"\"\" Represents a student. \"\"\"\n    \n    def __init__(self, student_name, id_num):\n        self.name = student_name\n        self.id_num = id_num\n    \n    def display_info(self):\n        print(\"Name of student:\", self.name)\n        print(\"Student ID:\", self.id_num)\n\n\ns1 = Student(\"Reza\", 26000)\ns1.display_info()\n# Name of student: Reza\n# Student ID: 26000\n\ns2 = Student(\"Jane\", 26001)\ns2.display_info()\n# Name of student: Jane\n# Student ID: 26001\n</python>\n<h2>Understanding <inline-code>self</inline-code></h2>\n<div class=\"my2\"></div>\n<div style=\"margin-left: -5em;\"><iframe width=\"1100\" height=\"650\" frameborder=\"0\" src=\"https://pythontutor.com/iframe-embed.html#code=class%20Student%3A%0A%20%20%20%20%22%22%22%20Represents%20a%20student.%20%22%22%22%0A%20%20%20%20%0A%20%20%20%20def%20__init__%28self,%20student_name,%20id_num%29%3A%0A%20%20%20%20%20%20%20%20self.name%20%3D%20student_name%0A%20%20%20%20%20%20%20%20self.id_num%20%3D%20id_num%0A%20%20%20%20%0A%20%20%20%20def%20display_info%28self%29%3A%0A%20%20%20%20%20%20%20%20print%28%22Name%20of%20student%3A%22,%20self.name%29%0A%20%20%20%20%20%20%20%20print%28%22Student%20ID%3A%22,%20self.id_num%29%0A%0A%0As1%20%3D%20Student%28%22Reza%22,%2026000%29%0As1.display_info%28%29%0A%0As2%20%3D%20Student%28%22Jane%22,%2026001%29%0As2.display_info%28%29&#x26;codeDivHeight=400&#x26;codeDivWidth=350&#x26;cumulative=false&#x26;curInstr=0&#x26;heapPrimitives=nevernest&#x26;origin=opt-frontend.js&#x26;py=3&#x26;rawInputLstJSON=%5B%5D&#x26;textReferences=false\"> </iframe></div>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}