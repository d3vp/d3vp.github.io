{"pageProps":{"allSlugs":[["Lecture-1",[{"title":"1 — Programming Basics","slug":"Lecture-1"}]],["Lecture-2.1",[{"title":"2.1 — Variables, Arithmetic & String operations","slug":"Lecture-2.1"}]],["Lecture-2.2",[{"title":"2.2 — Defining functions, Errors & Debugging","slug":"Lecture-2.2"}]],["Lecture-3.1",[{"title":"3.1 — Order of Expression Evaluation, Comparing Values, Conditional Execution","slug":"Lecture-3.1"}]],["Lecture-3.2",[{"title":"3.2 — if statement, for loop, Indexing & Slicing Strings","slug":"Lecture-3.2"}]],["Lecture-4.1",[{"title":"4.1 — return vs. print, while statement, Modules","slug":"Lecture-4.1"}]],["Lecture-4.2",[{"title":"4.2 — String methods, break & continue statements","slug":"Lecture-4.2"}]],["Lecture-5.1",[{"title":"5.1 — Controlling print(), Nested Loops, Lists","slug":"Lecture-5.1"}]],["Lecture-5.2",[{"title":"5.2 — Scope of variables, List operations","slug":"Lecture-5.2"}]],["Lecture-6.1",[{"title":"6.1 — Tuples, Immutable objects, Sets","slug":"Lecture-6.1"}]],["Lecture-6.2",[{"title":"6.2 — More list & set operations, Dictionaries","slug":"Lecture-6.2"}]],["Lecture-7.1",[{"title":"7.1 — Iterables, Unpacking, Nested Lists","slug":"Lecture-7.1"}]],["Lecture-7.2",[{"title":"7.2 — Nested data structures, Comprehensions, Modules","slug":"Lecture-7.2"}]],["Lecture-8.1",[{"title":"8.1 — Nested list comprehensions, Reading & Writing Files","slug":"Lecture-8.1"}]],["Lecture-8.2",[{"title":"8.2 — Shallow vs. deep copy, Handling exceptions","slug":"Lecture-8.2"}]],["Lecture-9.1",[{"title":"9.1 — Object Oriented Programming (OOP)","slug":"Lecture-9.1"}]],["Lecture-9.2",[{"title":"9.2 — Keyword arguments, More on OOP","slug":"Lecture-9.2"}]]],"post":{"slug":"Lecture-9.2","content":"<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"defining-functionsmethods-with-keyword-arguments\">Defining functions/methods with keyword arguments</h2><p>A keywords argument has a default value in function or method definition.</p><python lineno=\"false\" margin=\"1em 0\">def func(pos1, pos2, ..., name1=value1, name2=value2, ...):\n</python><p>Here, <inline-code>pos1</inline-code>, <inline-code>pos2</inline-code>, etc are positional arguments and<br>\n<inline-code>name1</inline-code>, <inline-code>name2</inline-code>, etc are keyword arguments with default values <inline-code>value1</inline-code>, <inline-code>value2</inline-code>, respectively.</p><p>Keyword arguments cannot appear before positional arguments.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"\"></h2><p>If the function is called without passing a keyword argument, that argument gets its default value.</p><python>def greet(name, greeting=\"Hello\", num_of_times=1): \n    for i in range(num_of_times):\n        print(greeting, name)\n\n# try the following one at a time:\n# greet(\"Dev\")\n# greet(\"Dev\", greeting=\"Hi\")\n# greet(\"Dev\", num_of_times=3)\n# greet(\"Dev\", greeting=\"Hi\", num_of_times=3)\n# greet(\"Dev\", num_of_times=3, greeting=\"Hi\")\n</python></slide>\n<slide class=\"ppt-f90 slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"oop-continued-\">OOP continued </h2><python>class Student:\n    \"\"\" Represents a student. \"\"\"\n    \n    def __init__(self, student_name, id_num):\n        self.name = student_name\n        self.id_num = id_num\n    \n    def display_info(self):\n        print(\"Name of student:\", self.name)\n        print(\"Student ID:\", self.id_num)\n\n\nnew_student = Student(\"Bob\", 260000000)\nnew_student.display_info()\n# Name of student: Bob\n# Student ID: 260000000\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-1\"></h2><p>Let’s add a new attribute to store courses and a new method which allows adding a course.</p><python>s1 = Student(\"Robin\", 26005)\ns1.add_course(\"COMP 208\")\ns1.add_course(\"POLI 220\", pass_fail=True)\ns1.add_course(\"MATH 250\")\ns1.display_info()\n</python><output>Name of student: Robin\nStudent ID: 26005\nCourses: COMP 208, POLI 220 (pass/fail), MATH 250\n</output></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-2\"></h2><ul>\n<li>Add an attribute <inline-code>courses</inline-code>, initializing it to empty dictionary. This dictionary will store a course name as a key and a boolean value to indicate whether the course is registered as pass/fail.</li>\n<li>Update <inline-code>display_info</inline-code> method to also display a comma-separate list of course names. If there are no courses in the <inline-code>courses</inline-code> dictionary, do not display any line for it.</li>\n<li>Add a method <inline-code>add_course</inline-code> that takes as a course name (<inline-code>str</inline-code>) and a keyword argument <inline-code>pass_fail</inline-code> (default value: <inline-code>False</inline-code>) and adds them to the attribute <inline-code>courses</inline-code>.</li>\n</ul><p>Code available in the file <inline-code>student_methods.py</inline-code>.</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"displaying-objects-__str__-method\">Displaying objects: <inline-code>__str__</inline-code> method</h2><p>When we display <inline-code>student1</inline-code> we see what class the object belongs to, and the identity of the object.</p><python>s1 = Student(\"Dev\", 26001)\nprint(s1)\n</python><output>&#x3C;__main__.Student object at 0x7f8cd66aa890>\n</output><p>Wouldn’t it be nice to display <inline-code>name</inline-code>, <inline-code>id_num</inline-code> and other attributes when we do <inline-code>print(student1)</inline-code>?</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"__str__-method\"><inline-code>__str__</inline-code> method</h2><ul>\n<li>\n<p>We can change the string representation of our class objects by implementing a method called <inline-code>__str__</inline-code> in our class.</p>\n<python>def __str__(self):\n    # must return a string\n</python>\n</li>\n<li>\n<p>If we do that, then when we call <inline-code>print(obj)</inline-code> or <inline-code>str(obj)</inline-code> with an instance <inline-code>obj</inline-code> of our class, <inline-code>__str__</inline-code> method is called automatically and the returned string is used.</p>\n</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"try-it\">Try it!</h2><p>In the <inline-code>Student</inline-code> class, add a <inline-code>__str__</inline-code> method that returns a string in the following format:</p><pre><code>Name: &#x3C;name attribute>\nStudent ID: &#x3C;id_num attribute>\nCourses: &#x3C;comma-separated courses>\n</code></pre><p>Then, try to use print with an object of Student class.</p><p>Code available in the file <inline-code>student_str.py</inline-code>.</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"example--list-of-student-objects\">Example — List of Student objects</h2><python>students = [Student(\"Dev\", 260001),\n            Student(\"Reza\", 260005)]\n\n# Create a student object and append it to the list\nstudents.append(Student(\"Alice\", 260011))\n\nprint(students[2])  # uses __str__ of Student class\n# Name: Alice\n# Student ID: 260011\n# Courses: None registered.\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-3\"></h2><python># Continued from previous slide:\n\nprint(students) # Does not use __str__ of Student class\n# [&#x3C;__main__.Student object at 0x10ad16100>,\n#  &#x3C;__main__.Student object at 0x10ad169d0>,\n#  &#x3C;__main__.Student object at 0x10ad16a00>]\n\n\nfor s in students:\n    print(s)  # uses __str__ of Student class\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-4\"></h2><p>Try questions on Ed Lessons.</p><divider></divider></slide>","title":"9.2 — Keyword arguments, More on OOP","date":"2023-03-02","published":true,"section":"Lecture-9.2"}},"__N_SSG":true}