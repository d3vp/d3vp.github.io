{"pageProps":{"titles":["L1.1 — Computer and Programming Basics","L1.2 — Variables & Expressions","L2.1 — Control Flow Statements","Python Style Guide","May 14 — Problem Set","L2.2 — print(), String methods & while loop","May 17 — Problem Set","L3.1 — More loops & Defining functions","May 19 — Problem Set","L3.2 — Lists","May 21 — Problem Set","L4.1 — Tuples, Dictionaries, Sets","May 26 — Problem Set","May 28 — Problem Set","L4.2 — Nested data structures","June 2 — Problem Set","June 4 — Problem Set"],"slugs":["Lecture-1.1","Lecture-1.2","Lecture-2.1","style-guide","_May14-problem-set","Lecture-2.2","_May17-problem-set","Lecture-3.1","_May19-problem-set","Lecture-3.2","_May21-problem-set","Lecture-4.1","_May26-problem-set","_May28-problem-set","Lecture-4.2","_June2-problem-set","_June4-problem-set"],"post":{"title":"L4.1 — Tuples, Dictionaries, Sets","slug":"Lecture-4.1","content":"<h1>Object Identity</h1>\n<ul>\n<li>Each object is assigned an <sc>ID</sc> at its creation (think of a memory address).</li>\n<li>This ID is unique and constant for this object as long as the object exists.</li>\n<li>The built-in function <inline-code>id()</inline-code> can be used to retrieve the ID of an object.</li>\n</ul>\n<python>>>> x = 500\n>>> y = x\n\n# x and y both point to the same object, \n# therefore the IDs are the same.\n>>> id(x) == id(y)\nTrue\n\n# x and y point to two different objects, \n# therefore we expect x and y to have different IDs.\n>>> x = 500\n>>> y = 400\n>>> id(x) == id(y)\nFalse\n\n# x and y point to two different objects (with the same value, but different!),\n# therefore we expect x and y to have different IDs.\n>>> x = 500\n>>> y = 500\n>>> id(x) == id(y)\nFalse\n</python>\n<h2>Identity operators</h2>\n<ul>\n<li><inline-code>is</inline-code> and <inline-code>is not</inline-code> are comparison operators used to determine if the two operands have the same identity (i.e refer to the same object)</li>\n<li>Note that this is NOT the same thing as checking for equality using <inline-code>==</inline-code> operator!\n<ul>\n<li>Using <inline-code>is</inline-code> operator means: are two variables referring to one and the same object?</li>\n<li>Using <inline-code>==</inline-code> operator means: are two variables referring to objects that contain same data?</li>\n</ul>\n</li>\n</ul>\n<div class=\"flex\"><python>>>> x = 500 \n>>> y = 500 \n>>> z = x \n>>> x == y \nTrue\n>>> x == z \nTrue\n</python><python>>>> x = 500 \n>>> y = 500 \n>>> z = x \n>>> x is y \nFalse\n>>> x is z \nTrue\n</python><python>>>> x = 500 \n>>> y = 300\n>>> x is y \nFalse\n>>> x == y\nFalse\n>>> x is not y\nTrue\n</python></div>\n<h1>Mutable vs Immutable objects</h1>\n<p><sc>Immutable</sc>: the content of the object cannot be changed after the object has been created.</p>\n<ul>\n<li>e.g. <inline-code>str</inline-code>, <inline-code>int</inline-code>, <inline-code>float</inline-code>, <inline-code>tuple</inline-code></li>\n</ul>\n<p><sc>Mutable</sc>: the content of the object can be changed after its creation without changing its identity.</p>\n<ul>\n<li>e.g. <inline-code>list</inline-code>, <inline-code>dict</inline-code>, <inline-code>set</inline-code></li>\n</ul>\n<h2>Strings are immutable</h2>\n<p>Unlike lists, we cannot use the square brackets to modify a character in the string.<br>\nFor example:</p>\n<python>>>> s = \"cats\"\n>>> s[0] = \"r\"\nTypeError: 'str' object does not support item assignment\n</python>\n<p>All strings operations that seem to change a string actually <i>create</i> a new string.</p>\n<python>s = \"cat\"\nt = s\nprint(\"Before\", id(s) == id(t))\ns = s.replace('c','r')\nprint(\"After\", id(s) == id(t))\nprint(\"s:\", s)\nprint(\"t:\", t)\n</python>\n<output>Before True\nAfter False\ns: rat\nt: cat\n</output>\n<h2>Lists are mutable</h2>\n<p>The following code does not create a copy of the list <inline-code>x</inline-code>.<br>\nIt simply create a new variable name for the same list.</p>\n<python>x = [1, 2, 3]\ny = x  # new name y for same list\n\nprint(x is y)  # True\n</python>\n<p>Let us see some implications of this.</p>\n<p>What would the following examples print?</p>\n<div class=\"flex\"><div><python>x = 5\ny = x\ny = y + 3 \nprint(x, y)\n</python><solution><output>5 8\n</output></solution></div><div><python>x = [5, 6, 7]\ny = x\ny[0] = y[0] + 3\nprint(x[0], y[0])\n</python><solution><output>8 8\n</output></solution></div></div>\n<p>What would the following examples print?</p>\n<div class=\"flex\"><div><python>def example(x):\n    x = x * 5\n\nx = 5\nexample(x) \nprint(x)\n</python><solution><output>5\n</output></solution></div><div><python>def example(x):\n    x[0] = x[0] * 5\n\nx = [5, 6, 7]\nexample(x)\nprint(x[0])\n</python><solution><output>25\n</output></solution></div></div>\n<p>In the following illustrations, think about what is modified?</p>\n<ul>\n<li>Whether a variable changes its value i.e. the variable refers to a different value</li>\n<li>Whether a list object is modified i.e. some element of the list is changed.</li>\n</ul>\n<iframe width=\"800\" height=\"350\" frameborder=\"0\" src=\"http://pythontutor.com/iframe-embed.html#code=x%20%3D%205%0Ay%20%3D%20x%0Ay%20%3D%20y%20%2B%203%20%0Aprint%28x,%20y%29&#x26;codeDivHeight=400&#x26;codeDivWidth=350&#x26;cumulative=false&#x26;curInstr=0&#x26;heapPrimitives=true&#x26;origin=opt-frontend.js&#x26;py=3&#x26;rawInputLstJSON=%5B%5D&#x26;textReferences=false\"> </iframe>\n<div class=\"my2\"></div>\n<iframe width=\"800\" height=\"400\" frameborder=\"0\" src=\"https://pythontutor.com/iframe-embed.html#code=x%20%3D%20%5B5,%206,%207%5D%0Ay%20%3D%20x%0Ay%5B0%5D%20%3D%20y%5B0%5D%20%2B%203%0Aprint%28x%5B0%5D,%20y%5B0%5D%29&#x26;codeDivHeight=400&#x26;codeDivWidth=350&#x26;cumulative=false&#x26;curInstr=0&#x26;heapPrimitives=true&#x26;origin=opt-frontend.js&#x26;py=3&#x26;rawInputLstJSON=%5B%5D&#x26;textReferences=false\"> </iframe>\n<div class=\"my2\"></div>\n<iframe width=\"800\" height=\"400\" frameborder=\"0\" src=\"https://pythontutor.com/iframe-embed.html#code=def%20example%28x%29%3A%0A%20%20%20%20x%20%3D%20x%20*%205%0A%0Ax%20%3D%205%0Aexample%28x%29%20%0Aprint%28x%29&#x26;codeDivHeight=400&#x26;codeDivWidth=350&#x26;cumulative=false&#x26;curInstr=0&#x26;heapPrimitives=true&#x26;origin=opt-frontend.js&#x26;py=3&#x26;rawInputLstJSON=%5B%5D&#x26;textReferences=false\"> </iframe>\n<div class=\"my2\"></div>\n<iframe width=\"800\" height=\"500\" frameborder=\"0\" src=\"https://pythontutor.com/iframe-embed.html#code=def%20example%28x%29%3A%0A%20%20%20%20x%5B0%5D%20%3D%20x%5B0%5D%20*%205%0A%0Ax%20%3D%20%5B5,%206,%207%5D%0Aexample%28x%29%0Aprint%28x%5B0%5D%29&#x26;codeDivHeight=400&#x26;codeDivWidth=350&#x26;cumulative=false&#x26;curInstr=0&#x26;heapPrimitives=true&#x26;origin=opt-frontend.js&#x26;py=3&#x26;rawInputLstJSON=%5B%5D&#x26;textReferences=false\"> </iframe>\n<div class=\"my2\"></div>\n<h2>List vs String — Examples</h2>\n<p>What will be printed in each of the following examples?</p>\n<div class=\"flexc my2\"><python>def my_function(a):\n    for i in range(len(a)):\n        a[i] = i\n\nx = [1, 2, 3, 4]\nmy_function(x)\nprint(x)\n</python><solution><output>[0, 1, 2, 3]\n</output></solution></div>\n<div class=\"flexc my2\"><python>def my_function(t):\n    t = t.replace('c', 'r')\n\ns = \"cat\"\nmy_function(s)\nprint(s)\n</python><solution><output>cat\n</output></solution></div>\n<div class=\"flexc my2\"><python>letters = ['w', 'o', 'r', 'd']\nfor i in range(len(letters)):\n    if(letters[i] == 'o'):\n        letters[i] = 'a'\n\nprint(letters)\n</python><solution><output>['w', 'a', 'r', 'd']\n</output></solution></div>\n<div class=\"flexc my2\"><python>s = \"word\"\nfor i in range(len(s)):\n   if(s[i] == 'o'):\n       s[i] = 'a'\nprint(s)\n</python><solution><output>TypeError: 'str' object does not support item assignment\n</output><p>One correct way would be to create a new string:</p><python>s = \"word\"\nt = \"\"\nfor i in range(len(s)):\n    if(s[i] == 'o'):\n        t = t + 'a'\n    else:\n        t = t + s[i]\n\nprint(t)\n</python></solution></div>\n<h2>What modifies a list?</h2>\n<ul>\n<li>Assigning a value to an element using its index.\n<python>a = [1, 2, 3]\na[0] = 5\n</python>\n</li>\n<li>Using the slice assignment to modify the elements of a list.\n<python>a = [1, 2, 3]\na[:2] = [5]\n</python>\n</li>\n<li>Using methods like <code>append(), insert(), remove() , pop(), sort()</code>, etc.</li>\n</ul>\n<h2>What does not modify a list?</h2>\n<ul>\n<li>Slicing! It is a useful tool to create new lists out of an existing lists.\n<python>a = [1, 2, 3]\nb = a[:]  # makes a copy of a\nprint(a is b)  # False! The two variables refer to different objects.\n</python>\n</li>\n<li>The <inline-code>+</inline-code> and <inline-code>*</inline-code> operators create a new list\n<python>a = [1, 2, 3]\nb = a  # does not copy, just a new name for same list\nb = b + [4]  # b now refers to a new list [1, 2, 3, 4]\n             # a still refers to [1, 2, 3]\nprint(a is b)  # False\n</python>\n</li>\n</ul>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>Tuples</h1>\n<ul>\n<li>A tuple is an ordered collection of objects, like lists.</li>\n<li>A tuple is <i>immutable</i>. A tuple object cannot change after it is created.</li>\n<li>We create a tuple using parentheses <inline-code>()</inline-code> instead of square brackets <inline-code>[]</inline-code>.</li>\n</ul>\n<python>>>> tup = (1, 2, 3)\n>>> print(type(tup))\n&#x3C;class 'tuple'>\n\n# tuple with only one element\n>>> tup = (10,)  # comma is required!\n>>> print(tup, type(tup))\n(10,) &#x3C;class 'tuple'>\n</python>\n<p>We can use <inline-code>tuple</inline-code> function to convert other sequences such as lists and strings into a tuple.</p>\n<python>>>> word = \"apple\"\n>>> tup = tuple(word)\n>>> print(tup)\n('a', 'p', 'p', 'l', 'e')\n\n>>> primes = [2, 3, 5, 7]\n>>> primes = tuple(primes)\n>>> print(primes)\n(2, 3, 5, 7)\n</python>\n<h2>Tuples are immutable</h2>\n<p>Elements cannot be added, removed or changed in a tuple.</p>\n<p>Therefore, unlike lists, none of the operations that modify a tuple are allowed.</p>\n<python>>>> x = (1, 1, 2, 3, 5, 8)\n>>> x[3] = 100\nTypeError: 'tuple' object does not support item assignment\n\n>>> x[:2] = (11, 12)\nTypeError: 'tuple' object does not support item assignment\n</python>\n<p>In general, operations that do not modify a tuple are available.</p>\n<python>>>> tup = (45, 23, 'abc') \n\n# Indexing and slicing work the same way as lists.\n>>> print(tup[1])\n23\n>>> print(tup[1:])\n(23, 'abc')\n\n>>> len(tup)  # number of elements in a tuple\n3\n\n# Similary min(), max(), and sum() functions work with tuples\n\n# Following methods are available for tuples\n>>> tup.index(\"abc\")\n2\n>>> tup.count(23)\n1\n</python>\n<p>Since a tuple is a sequence, we can use it in a for loop just like a list:</p>\n<python>numbers = (1, 2, 3)\n\nfor n in numbers:\n    print(n)\n\n# prints:\n# 1\n# 2\n# 3\n</python>\n<h2>Why use tuples?</h2>\n<p>If lists are more flexible than tuples, why should we use tuples?</p>\n<ul>\n<li>Immutability is useful to avoid changing data by mistake.</li>\n<li>We can use tuples as keys in a dictionary!</li>\n<li>Programs are a bit faster when working with tuples.</li>\n</ul>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>Sets</h1>\n<ul>\n<li>A set is a an unordered collection of <i>immutable</i> objects.</li>\n<li>A set always contains unique elements, unlike lists and tuples which allow duplicates.</li>\n<li>A set is unordered i.e. we cannot use indexing or slicing on a set object</li>\n</ul>\n<python>>>> numbers = {1, 2, 3}\n>>> print(numbers)\n{1, 2, 3}\n>>> print(type(numbers))\n&#x3C;class 'set'>\n\n# only unique values are kept\n>>> numbers = {1, 2, 3, 1, 3}\n>>> print(numbers)\n{1, 2, 3}\n>>> len(numbers)\n3\n</python>\n<h2>Other ways to create a set</h2>\n<python># a set can be created from any sequence\n# such as list, tuple or a string\n>>> things = set([10, 42, \"apple\", 42])\n>>> print(things)\n{10, 'apple', 42}\n\n>>> word = \"pineapple\"\n>>> letters = set(word)\n>>> print(letters)\n{'n', 'a', 'p', 'l', 'i', 'e'}\n\n# create an empty set\n>>> empty_set = set()\n>>> len(empty_set)\n0\n\n# This does not create an empty set!\n>>> empty_dictionary = {}\n>>> print(type(empty_dictionary))\n&#x3C;class 'dict'>\n</python>\n<h2>Set elements must be immutable</h2>\n<p>A set can contain <inline-code>int</inline-code>, <inline-code>float</inline-code>, <inline-code>str</inline-code>, <inline-code>bool</inline-code> and <inline-code>tuple</inline-code> objects because they are all immutable.</p>\n<p>But a set cannot contain a list because lists are mutable.</p>\n<python># tuples are immutable so allowed in set\n>>> points = {(1, 1), (3, 10), (3, 10)}\n>>> print(points)\n{(3, 10), (1, 1)}\n\n# lists are mutable so not allowed\n>>> points = {[1, 1], [3, 10], [3, 10]}\nTypeError: unhashable type: 'list'\n</python>\n<h2>Set operators and methods</h2>\n<python># set.add(x):\n#   Adds an element x to the set if x does not exist in the set. \n#   Does not return anything.\n>>> numbers = {1, 2, 3}\n>>> numbers.add(20)\n>>> print(numbers)\n{1, 2, 3, 20}\n>>> numbers.add(3)\n>>> print(numbers)\n{1, 2, 3, 20}\n\n# set.remove(x):\n#   Remove an element x from the set. Does not return anything.\n#   Throws KeyError if element x is not present in the set.\n>>> numbers = {1, 2, 3}\n>>> numbers.remove(2)\n>>> print(numbers)\n{1, 3}\n>>> numbers.remove(5)\nKeyError: 5\n\n# in/not in operators to check if element exists in a set\n>>> numbers = {1, 2, 3}\n>>> print(2 in numbers)\nTrue\n>>> print(5 not in numbers)\nTrue\n>>> shapes = {'circle', 'square'}\n>>> print(\"circle\" in shapes)\nTrue\n\n\n# For the following methods, suppose A and B are sets.\n\n# A.intersection(B):\n#    Returns a new set that contains elements that are\n#    present in both A and B   \n>>> odd = {3, 5, 7, 9, 25}\n>>> squares = {4, 9, 25, 36}\n>>> odd_squares = odd.intersection(squares)\n>>> print(odd_squares)\n{9, 25}\n\n# Intersection can also be done using operator &#x26;\n>>> odd_squares = odd &#x26; squares\n>>> print(odd_squares)\n{9, 25}\n\n\n# A.union(B):\n#    Returns a new set that contains elements that are\n#    present in  A or B or both\n\n>>> x = {1, 2, 3}\n>>> y = {2, 3, 5}\n>>> all_numbers = x.union(y)\n>>> print(all_numbers)\n{1, 2, 3, 5}\n\n# Same above but using an operator |\n>>> all_numbers = x | y\n>>> print(all_numbers)\n{1, 2, 3, 5}\n\n\n# A.difference(B):\n#   Returns a new set that contains elements that are\n#   present only in A but not in B\n>>> x = {1, 2, 3}\n>>> y = {2, 3, 5}\n>>> diff = x.difference(y)\n>>> print(diff)\n{1}\n\n# Same as above but using operator -\n>>> diff = x - y\n>>> print(diff)\n{1}\n\n# All of the above methods work the same when elements are\n# of other types such as strings. \n</python>\n<h2>Sets cannot be indexed or sliced because they are not ordered</h2>\n<python>>>> primes = {2, 3, 5, 7, 11}\n>>> primes[4]\nTypeError: 'set' object is not subscriptable\n</python>\n<p>But you can use for loop to iterate over the elements:</p>\n<python># The order in which items will be printed is not defined\n# because sets are not ordered\nnumbers = {10, 1, 5, 20}\nfor n in numbers:\n    print(n)\n</python>\n<output>1\n10\n20\n5\n</output>\n<h2>Why use sets?</h2>\n<ul>\n<li>Set are faster than lists and tuples, when inserting, removing and searching elements.</li>\n<li>When ordering of elements is important or when elements are mutable, use lists or tuples</li>\n<li>When only unique immutable elements need to be stored, use sets.</li>\n</ul>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>Dictionaries</h1>\n<h2>Motivation</h2>\n<p>Suppose we would like to store the following enrollment data:</p>\n<div class=\"my2\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>semester</th><th>no. of students</th></tr></thead><tbody><tr><td>F2017</td><td>816</td></tr><tr><td>W2018</td><td>613</td></tr><tr><td>F2018</td><td>709</td></tr><tr><td>W2019</td><td>590</td></tr><tr><td>F2019</td><td>744</td></tr></tbody></table></div>\n<p>We can do this using two lists for the two columns:</p>\n<python>semesters = ['F2017', 'W2018', 'F2018', 'W2019', 'F2019']\nstudents = [816, 613, 709, 590, 744]\n</python>\n<p>What should we do if we want to add new data?</p>\n<python>semesters.append(\"F2020\")\nstudents.append(550)\n# ['F2017', 'W2018', 'F2018', 'W2019', 'F2019', 'F2020']\n# [816, 613, 709, 590, 744, 550]\n</python>\n<p>What if we want to modify the value for a specific semester?</p>\n<python>idx = semesters.index(\"W2018\")\nstudents[idx] = 600\n</python>\n<p>What we if try to add an entry for a semester that already exists?<br>\nList allows duplicates so it does not check if a semester already exists.</p>\n<h3>Use a dictionary!</h3>\n<ul>\n<li>You can think of an element of a dictionary as an ordered pair:\n<ul>\n<li>The first element of the pair is called a <sc>key</sc>.</li>\n<li>The second element is referred to as the <sc>value</sc>.</li>\n</ul>\n</li>\n<li>A dictionary is called a <i>mapping</i> type because it maps key objects to value objects.</li>\n<li>Elements in a dictionary are often called <i>items</i>.</li>\n</ul>\n<python># A dictionary is created using a sequence of key-value pairs\nenrollment = {'F2017': 816, 'W2018': 613, 'F2018': 709,\n              'W2019': 590, 'F2019': 744}\nprint(type(enrollment))\n# &#x3C;class 'dict'>\n\n# Number of key-value pairs\nprint(len(enrollment))\n# 5\n\n# This is an empty dictionary, not a set!\nempty_dict = {}\nprint(len(empty_dict)) # 0\n</python>\n<h2>Note on keys and values</h2>\n<ul>\n<li>Keys\n<ul>\n<li>Have to be immutable objects.</li>\n<li>Have to be unique in a dictionary. A dictionary cannot contain two items with the same key.</li>\n</ul>\n</li>\n<li>Values\n<ul>\n<li>Values can be of any type; both mutable and immutable values are allowed.</li>\n<li>Many keys can map to the same value. i.e. values need not be unique.</li>\n</ul>\n</li>\n</ul>\n<h2>Dictionary Lookup</h2>\n<p>With lists, we can access an element of the list through its index.</p>\n<p>With dictionaries, we can access a value stored in the dictionary through the key associated with it.</p>\n<python>enrollment = {'F2017': 816, 'W2018': 613, 'F2018': 709,\n              'W2019': 590, 'F2019': 744}\n\n\nnum_students = enrollment[\"F2018\"]\nprint(num_students)  # 709\n\n# Key must exist in the dictionary if we want to access its value\nprint(enrollment[\"F2020\"])  # KeyError: 'F2020'\n</python>\n<h2>Adding an item</h2>\n<p>We can add a new item by specifying a key and a value: <inline-code>dictionary[key] = value</inline-code></p>\n<python>\n# A dictionary is created using a sequence of key-value pairs\nenrollment = {'F2018': 709, 'W2019': 590, 'F2019': 744}\n\n\n# add an item\nenrollment[\"F2020\"] = 800\n\n# add another item\nenrollment[\"W2020\"] = 900\n\nprint(enrollment)\n# {'F2018': 709, 'W2019': 590, 'F2019': 744, 'F2020': 800, 'W2020': 900}\n\n# change an existing item\nenrollment[\"F2018\"] = 700\n\nprint(enrollment)\n# {'F2018': 700, 'W2019': 590, 'F2019': 744, 'F2020': 800, 'W2020': 900}\n</python>\n<h2>Removing an item</h2>\n<p>We can delete an item using the following syntax:<br>\n<inline-code>del dictionary[key]</inline-code></p>\n<python>enrollment = {'F2018': 709, 'W2019': 590, 'F2019': 744}\n\n\ndel enrollment[\"F2019\"]\n\nprint(enrollment)\n# {'F2018': 709, 'W2019': 590}\n\ndel enrollment[\"F2020\"]\n# KeyError: 'F2020'\n\n</python>\n<h2>Examples</h2>\n<p>What will be printed in the following examples?</p>\n<div class=\"flexc bggreen my2 p2 wfc\"><python>d = {'x' : 0, 'y' : 1, 'z' : 2} \nx = d['y']\nprint(x)\n</python><solution><output>1\n</output></solution></div>\n<div class=\"flexc bggreen my2 p2 wfc\"><python>d = {'x' : 0, 'y' : 1, 'z' : 2} \nx = d[0]\nprint(x)\n</python><solution><output>KeyError: 0\n</output></solution></div>\n<h2>Check for membership</h2>\n<p>We can check if a key is part of a dictionary using the <inline-code>in</inline-code> and <inline-code>not in</inline-code> operators.</p>\n<python>d = {'x' : 0, 'y' : 1, 'z' : 2} \nprint('x' in d) #  True \nprint(0 in d) #  False\nprint(0 not in d) #  True\n</python>\n<h2>Iterating through a dictionary</h2>\n<p>We can use a for loop to iterate through all the keys in a dictionary.</p>\n<python>enrollment = {'F2018': 709, 'W2019': 590, 'F2019': 744}\n\nfor key in enrollment:\n    print(key, \"->\", enrollment[key])\n</python>\n<output>F2018 -> 709\nW2019 -> 590\nF2019 -> 744\n</output>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}