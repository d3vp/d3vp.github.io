{"pageProps":{"titles":["L1.1 — Computer and Programming Basics","L1.2 — Variables & Expressions","L2.1 — Control Flow Statements","Python Style Guide","May 14 — Problem Set","L2.2 — print(), String methods & while loop","May 17 — Problem Set","L3.1 — More loops & Defining functions","May 19 — Problem Set","L3.2 — Lists","May 21 — Problem Set","L4.1 — Tuples, Dictionaries, Sets","May 26 — Problem Set","May 28 — Problem Set","L4.2 — Nested data structures","June 2 — Problem Set","June 4 — Problem Set"],"slugs":["Lecture-1.1","Lecture-1.2","Lecture-2.1","style-guide","_May14-problem-set","Lecture-2.2","_May17-problem-set","Lecture-3.1","_May19-problem-set","Lecture-3.2","_May21-problem-set","Lecture-4.1","_May26-problem-set","_May28-problem-set","Lecture-4.2","_June2-problem-set","_June4-problem-set"],"post":{"title":"May 26 — Problem Set","slug":"_May26-problem-set","content":"<h1>Problems</h1>\n<ol>\n<li>\n<p>Write a function that takes as argument a list of integers, it increases the value of each element in the list by its index, and finally returns the list. For example,</p>\n<python>>>> increment_by_index([8, 4, 6, -1])  # add 0, 1, 2, 3\n[8, 5, 8, 2]\n    \n>>> increment_by_index([5, 2, -3, 1, 15])  # add 0, 1, 2, 3, 4\n[5, 3, -1, 4, 19]\n\n>>> increment_by_index([])\n[]\n</python>\n<p>Is returning the list necessary?</p>\n<solution><python>def increment_by_index(numbers):\n    \"\"\" \n    Creates a new list with the elements of numbers where each element\n    it has been increased by its own index. It returns this new list.  \n    \"\"\"\n    # create a new list\n    new_list = []\n    \n    # iterate through all possible indices\n    for index in range(len(numbers)):\n        # access the element by using numbers[index]\n        new_list.append(numbers[index] + index)\n        \n    return new_list\n</python><p>It is necessary to return the list because the function does not modify its argument; instead it creates a new list which must be returned.</p></solution>\n</li>\n<li>\n<p>Write a function that takes a positive integer, <inline-code>n</inline-code>, as argument and returns a list with <inline-code>n</inline-code> random numbers between 0 and 1.</p>\n<solution><python>from random import random\n\ndef random_list(n):\n    result = []\n    for i in range(n):\n        result.append(random())\n        \n    return result\n\n\nprint(random_list(10))\n</python></solution>\n</li>\n<li>\n<p>Write a function that takes as arguments two lists of strings and returns the number of indices at which the elements in both lists have the same length. Assume that both lists have same length.\nFor example, if the arguments are:</p>\n<pre><code>    [\"cat\", \"goat\", \"house\", \"puppy\"]  \n    [\"cow\", \"horse\", \"dog\", \"mouse\"]\n</code></pre>\n<p>The function should return 2 since both at index 0 and index 3, the elements have the same length.</p>\n<solution><python>def count_equal_length(list1, list2):\n    count = 0\n    \n    # Assume lists have same length\n    for i in range(len(list1)):\n        # check if lengths of strings at index i are same\n        if len(list1[i]) == len(list2[i]):\n            count += 1\n\n    return count\n\n\ncount = count_equal_length([\"cat\", \"goat\", \"house\", \"puppy\"],\n                        [\"cow\", \"horse\", \"dog\", \"mouse\"])\nprint(count)\n\n</python></solution>\n</li>\n<li>\n<p>Write a function that takes a list of strings <inline-code>words</inline-code>, and a string <inline-code>letters</inline-code> as arguments. The function returns <inline-code>True</inline-code> if all the elements of the list are made up by characters contained in the string <inline-code>letters</inline-code>, <inline-code>False</inline-code> otherwise.</p>\n<python>>>> w1 = ['cat', 'at', 'car']\n>>> l = \"catr\"\n>>> from_same_letters(w1, l)\nTrue\n\n>>> w2 = ['apple', 'cat']\n>>> from_same_letters(w2, l)\nFalse\n\n>>> from_same_letters([], \"abc\")\nTrue\n</python>\n<solution><python>def from_same_letters(words, letters):\n    \"\"\" Checks if all strings in a list are made up of given letters.\n\n    Args:\n        words: a list of strings\n        letters: a string\n\n    Returns: False if any strings in words contains a character not present in letters,\n             True, otherwise.\n    \"\"\"\n    # iterate through the strings inside words\n    for word in words:\n        # check if all their characters also appear in the string letters\n        # iterate through the characters of w\n        for char in word:\n            if char not in letters:\n                return False\n    \n    return True\n</python></solution>\n</li>\n<li>\n<p>Consider the following function that computes Euclidean distance between two 2D points:</p>\n<python>def euclidean_distance(x1, y1, x2, y2):\n    \"\"\"\n    Computes Euclidean distance between two 2D points.\n\n    Args:\n        x1: x-coordinate of first point (float) \n        y1: y-coordinate of first point (float) \n        x2: x-coordinate of second point (float) \n        y2: y-coordinate of second point (float) \n\n    Returns: the euclidean distance as a float\n    \"\"\"\n    d = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    return d ** 0.5\n</python>\n<p>Modify this function so that it takes two arguments—<inline-code>p1</inline-code> and <inline-code>p2</inline-code> for two points—each of them can be a list or tuple of length 2, where the first number is x-coordinate and the second number is y-coordinate of that point.\nRewrite the code in the function to reflect this change.</p>\n<python>dist = euclidean_distance([1, 1], [2, 3])  # lists\nprint(dist)  # 2.23606797749979\n\ndist = euclidean_distance((1, 1), (2, 3))  # tuples\nprint(dist)  # 2.23606797749979\n</python>\n<solution><python>def euclidean_distance(p1, p2):\n   \"\"\"\n   Computes Euclidean distance between two 2D points.\n\n   Args:\n       p1: list/tuple of length 2\n       p2: list/tuple of length 2\n\n   Returns: the euclidean distance as a float\n   \"\"\"\n   d = (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2\n   return d ** 0.5\n\n\ndist = euclidean_distance([1, 1], [2, 3])  # lists\nprint(dist)  # 2.23606797749979\n\ndist = euclidean_distance((1, 1), (2, 3))  # tuples\nprint(dist)  # 2.23606797749979\n\n</python></solution>\n</li>\n</ol>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}