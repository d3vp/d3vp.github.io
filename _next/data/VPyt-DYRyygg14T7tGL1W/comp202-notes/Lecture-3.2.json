{"pageProps":{"titles":["L1.1 — Computer and Programming Basics","L1.2 — Variables & Expressions","L2.1 — Control Flow Statements","Python Style Guide","May 14 — Problem Set","L2.2 — print(), String methods & while loop","May 17 — Problem Set","L3.1 — More loops & Defining functions","May 19 — Problem Set","L3.2 — Lists","May 21 — Problem Set","L4.1 — Tuples, Dictionaries, Sets","May 26 — Problem Set","May 28 — Problem Set","L4.2 — Nested data structures","June 2 — Problem Set","June 4 — Problem Set","L5.1 — Handling Exceptions, File IO","L5.2 — Comparing data structures, Writing modules, Matplotlib","June 9 — Problem Set"],"slugs":["Lecture-1.1","Lecture-1.2","Lecture-2.1","style-guide","_May14-problem-set","Lecture-2.2","_May17-problem-set","Lecture-3.1","_May19-problem-set","Lecture-3.2","_May21-problem-set","Lecture-4.1","_May26-problem-set","_May28-problem-set","Lecture-4.2","_June2-problem-set","_June4-problem-set","Lecture-5.1","Lecture-5.2","_June9-problem-set"],"post":{"title":"L3.2 — Lists","slug":"Lecture-3.2","content":"<h1>Lists</h1>\n<ul>\n<li>A list is like a container that holds a sequence of arbitrary objects.</li>\n<li>Objects in a list are called <sc>elements</sc>.</li>\n<li>Lists are ordered! The order in which the elements are stored in the list matters.</li>\n<li>Each element is associated to an index (index <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></span>: first element, index <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></span>: second element, etc.)</li>\n</ul>\n<h2>Creating a list</h2>\n<python># A list is created using square brackets, \n# with each element separated by a comma.\n>>> prime_numbers = [2, 3, 5, 7, 11, 13]\n>>> print(prime_numbers)\n[2, 3, 5, 7, 11, 13]\n\n>>> print(type(prime_numbers))\n&#x3C;class 'list'>\n</python>\n<p>A list can contain elements of any type. For example we can have a list of strings:</p>\n<python>>>> days = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\n\n# Number of elements in the list\n>>> len(days)\n7\n\n>>> empty_list = []\n>>> len(empty_list)\n0\n</python>\n<p>A list can contain any number of elements, from zero to as many as the computer’s memory allows.</p>\n<p>A list can contains objects of different types.</p>\n<python># list with mixed types\n>>> numbers = [1, 'two', 3.75]\n</python>\n<p>Elements of a list don’t need to be unique.</p>\n<python># list with duplicate values\n>>> numbers = [5, \"five\", 5]\n</python>\n<h3>Why use a list?</h3>\n<python># Suppose we want to store grades for multiple students\n\ngrades1 = 80\ngrades2 = 100\ngrades3 = 65\n# ...\n# How many variables?!!\n\n# Use just one variable name \"grades\"\ngrades = [80, 100, 65]\n</python>\n<h2>What can we do with a list?</h2>\n<ul>\n<li>Add elements to the list e.g. adding new contact on your phone</li>\n<li>Access elements from the list e.g. search a contact on your phone</li>\n<li>Modify elements inside the list e.g. changing grades of a student</li>\n<li>Deleting elements from the list e.g. remove someone from a friend list</li>\n</ul>\n<h2>Indexing a list</h2>\n<p>We can access an element inside a list using indexing (square brackets), just as we did for strings.</p>\n<python>>>> days = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\n>>> first_day = days[0]\n>>> second_day = days[1]\n>>> last_day = days[6]\n>>> print(first_day, second_day, last_day)\nMon Tue Sun\n\n# No element at index 7\n>>> print(days[7])  \nIndexError: list index out of range\n\n>>> numbers = [1, 'two', 3.75]\n>>> print(numbers[0] + numbers[2])\n4.75\n>>> print(numbers[0] + numbers[1])\nTypeError: unsupported operand type(s) for +: 'int' and 'str'\n</python>\n<h2>Slicing a list</h2>\n<p>Similar to strings, we can also get a sub-list — parts of a list — using slice notation.</p>\n<python>>>> days = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\n>>> print(days[2:5])\n['Wed', 'Thu', 'Fri']\n\n>>> print(days[:6:2])\n['Mon', 'Wed', 'Fri']\n\n# Makes a copy of the list\n>>> print(days[:])\n['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n\n# Makes a reversed copy of the list\n>>> print(days[::-1])\n['Sun', 'Sat', 'Fri', 'Thu', 'Wed', 'Tue', 'Mon']\n</python>\n<h2>Concatenation (+) and Replication (*)</h2>\n<p>The operators <inline-code>+</inline-code> and <inline-code>*</inline-code> work for lists as they worked for a string:</p>\n<python># lists a and b are joined to produce a third list c:\n>>> a = [1, 2]\n>>> b = [10, 11, 12]\n>>> c = a + b\n>>> print(c)\n[1, 2, 10, 11, 12]\n>>> print(a + b)  # without extra variable c\n[1, 2, 10, 11, 12]\n\n>>> a = [1, 2]\n# resulting list consists of repeated elements of list a:\n>>> c = a * 3 \n>>> print(c)\n[1, 2, 1, 2, 1, 2]\n>>> print(a * 3)\n[1, 2, 1, 2, 1, 2]\n</python>\n<h2>membership operators: <inline-code>in</inline-code> and <inline-code>not in</inline-code></h2>\n<p>The <inline-code>in</inline-code> and <inline-code>not in</inline-code> operators test for membership.</p>\n<p>We can use them to test if an object is an element of a list.</p>\n<python>>>> a = [1, 2]\n>>> b = [10, 11, 12]\n>>> 1 in a\nTrue\n>>> 11 in a\nFalse\n>>> 5 not in b\nTrue\n\n>>> x = 3.14\n>>> x in a or x in b\nFalse\n</python>\n<p>These operators very useful in simplifying code:</p>\n<div class=\"flex\"><python># Instead of long conditions like this:\nif x == 5 or x == 7 or x == 10:\n    # do something\n</python><python># Now we can do:\nif x in [5, 7, 10]:\n    # do something\n</python></div>\n<div class=\"p2 my2 bggreen\"><p><sc>Example</sc></p><p>We can use a list to store assignment grades:</p><python>grades = [85, 78.5, 98, 75, 100]\n\n# print average grade\n</python><p>Write code to print the average grade.</p><solution><python>grades = [85, 78.5, 98, 75, 100]\ntotal = grades[0] + grades[1] + grades[2] + grades[3] + grades[4] \navg = total / 5\nprint(avg)  # prints 87.3\n</python></solution></div>\n<h2>Lists and Loops</h2>\n<p>For loops are very useful for looping through all the elements in an list.\nFor instance we could use a for loop to compute the sum of all the elements in the list grades:</p>\n<python>grades = [85, 78.5, 98, 75, 100]\n\ntotal = 0\nfor i in range(5):\n   total += grades[i]\n\navg = total / 5\nprint(avg) # prints 87.3\n</python>\n<p>Above code can be generalized!</p>\n<python>grades = [85, 78.5, 98, 75, 100]\n\ntotal = 0\nN = len(grades)  # Number of elements in grades list\nfor i in range(N):\n   total += grades[i]\n\navg = total / N\nprint(avg) # prints 87.3\n</python>\n<p>Alternatively, we can avoid using an index if we don’t need to use an index in our loop:</p>\n<python>grades = [85, 78.5, 98, 75, 100]\n\ntotal = 0\nN = len(grades)  # Number of elements in grades list\nfor g in grades:\n   total += g\n\navg = total / N\nprint(avg) # # prints 87.3\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>Modifying the content of a list</h1>\n<p>Unlike strings, we can modify the content of a list after it has been created!</p>\n<p>We can change a single element using its index and the assignment operator.</p>\n<python>>>> days = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\n>>> days[0] = \"Sun\"\n>>> print(days)\n['Sun', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n\n>>> days[7] = \"No such day\"\nIndexError: list assignment index out of range\n</python>\n<h2>Updating contiguous elements</h2>\n<p>We can modify several contiguous elements using slice assignment.\nThe syntax of the slice assignment is as follow:</p>\n<pre><code>list_object[start:stop:step] = iterable\n</code></pre>\n<p>For now, think of <inline-code>iterable</inline-code> to be a sequence such as a list or a string.</p>\n<p>Examples:</p>\n<python>>>> days = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\n>>> print(days[1:3])\n['Tue', 'Wed']\n\n>>> days[1:3] = [5, 8]\n>>> print(days)\n['Mon', 5, 8, 'Thu', 'Fri', 'Sat', 'Sun']\n\n>>> print(days[1::2])\n[5, 'Thu', 'Sat']\n>>> days[1::2] = [\"\", \"\", \"\"]\n>>> print(days)\n['Mon', '', 8, '', 'Fri', '', 'Sun']\n</python>\n<div class=\"p2 my2 bggreen\"><p>What will be printed?</p><python>my_list = [\"banana\", 3.75, 5]\nmy_list[1:2] = [\"cat\", \"dog\", \"ferret\"]\nprint(my_list)\n</python><solution><output>['banana', 'cat', 'dog', 'ferret', 5]\n</output></solution></div>\n<div class=\"p2 my2 bggreen\"><p>What will be printed?</p><python>my_list = [\"banana\", 3.75, 5] \nmy_list[1:3] = 5\nprint(my_list)\n</python><solution><output>TypeError: can only assign an iterable\n</output></solution></div>\n<div class=\"p2 my2 bggreen\"><p>What will be printed?</p><python>my_list = [\"banana\", 3.75, 5] \nmy_list[:] = [5] \nprint(my_list)\n</python><solution><output>[5]\n</output></solution></div>\n<div class=\"p2 my2 bggreen\"><p>What will be printed?</p><python>my_list = [1, 2, 3, 4, 5, 6] \nmy_list[0:2] = [] \nprint(my_list)\n</python><solution><p>First two elements are deleted!</p><output>[3, 4, 5, 6]\n</output></solution></div>\n<div class=\"p2 my2 bggreen\"><p>What will be printed?</p><python>my_list = [\"banana\", 3.75, 5] \nmy_list[1:] = \"apple\" \nprint(my_list)\n</python><solution><p>The string “apple” is considered as a sequence (or iterable) in this case.</p><output>['banana', 'a', 'p', 'p', 'l', 'e']\n</output></solution></div>\n<div class=\"p2 my2 bggreen\"><p>What will be printed?</p><python>my_list = [\"banana\", 3.75, 5] \nmy_list[1:] = [\"apple\"] \nprint(my_list)\n</python><solution><p>In this case the sequence we are trying to assign is <inline-code>[\"apple\"]</inline-code> (and not <inline-code>\"apple\"</inline-code>).<br>\nAnd <inline-code>[\"apple\"]</inline-code> contains one element: <inline-code>\"apple\"</inline-code> which replaces the elements after <inline-code>\"banana\"</inline-code>.</p><output>['banana', 'apple']\n</output></solution></div>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>List functions and methods</h1>\n<h2>Built-in functions that work with list objects</h2>\n<python>>>> grades = [85, 78.5, 98, 75, 100]\n\n# len(x): \n#   Returns the number of elements in the list x.\n>>> len(grades)\n5\n\n# sum(x): \n#   Returns the sum of all the numbers in list x.\n#   A TypeError occurs when some element is not a number.\n>>> sum(grades)\n436.5\n\n# min(x) / max(x) : \n#   Returns the smallest/largest element in the list x.\n#   A TypeError occurs if the elements cannot be compared.\n>>> min(grades)\n75\n>>> max(grades)\n100\n>>> min([\"apple\", 3, 1234])\nTypeError: '&#x3C;' not supported between instances of 'int' and 'str'\n\n# sorted(x): \n#   Creates and returns a new list which is a sorted version of the list x. \n#   The sorting is done in ascending order.\n#   If any elements cannnot be compared to each other, TypeError occurs.\n>>> numbers = [10, 5, 20, 3]\n>>> sorted_list = sorted(numbers)\n>>> print(sorted_list)\n[3, 5, 10, 20]\n>>> print(numbers)\n[10, 5, 20, 3]\n\n\n>>> fruits = [\"banana\", \"orange\", \"apple\"]\n>>> sorted_list = sorted(fruits)\n>>> print(sorted_list)\n['apple', 'banana', 'orange']\n>>> print(fruits)\n['banana', 'orange', 'apple']\n\n>>> my_list = [10, 5, 20, 3, \"apple\"]\n>>> sorted_list = sorted(my_list)\nTypeError: '&#x3C;' not supported between instances of 'str' and 'int'\n</python>\n<h2>List methods</h2>\n<p>Python has several methods that we can call on a list object:</p>\n<python># list.append(x): \n#   Adds the element x to the end of the list.\n>>> grades = [60, 85, 90.5]\n>>> grades.append(100)\n>>> print(grades)\n[60, 85, 90.5, 100]\n\n>>> grades.append(\"apple\")\n>>> print(grades)\n[60, 85, 90.5, 100, 'apple']\n\n>>> grades.append(False)\n>>> print(grades)\n[60, 85, 90.5, 100, 'apple', False]\n\n\n# list.insert(i, x): \n#   Adds the element x to the list at index i\n>>> grades = [60, 85, 90.5]\n>>> grades.insert(0, 100)\n>>> print(grades)\n[100, 60, 85, 90.5]\n\n# insert works even when index is greater than length of list\n>>> grades = [60, 85, 90.5]\n>>> grades.insert(3, \"apple\")\n>>> print(grades)\n[60, 85, 90.5, 'apple']\n\n# Same here, inserts at the end\n>>> grades = [60, 85, 90.5]\n>>> grades.insert(4, 100)\n>>> print(grades)\n[60, 85, 90.5, 100]\n\n\n# list.remove(x): \n#   Removes the first occurrence of the element x in the list. \n#   A ValueError occurs if there is no such element.\n>>> my_list = [5, \"hello\", 5, 3.14]\n>>> my_list.remove(5)\n>>> print(my_list)\n['hello', 5, 3.14]\n\n>>> my_list.remove(5)\n>>> print(my_list)\n['hello', 3.14]\n\n>>> my_list.remove(\"hello\")\n>>> print(my_list)\n[3.14]\n\n>>> my_list.remove(5)\nValueError: list.remove(x): x not in list\n\n# list.pop(i): \n#   Removes and returns element at index i \n# list.pop(): \n#   Removes and returns the last element from the list\n>>> my_list = [5, \"hello\", 5, 3.14]\n>>> last_item = my_list.pop()\n>>> print(last_item)\n3.14\n>>> print(my_list)\n[5, 'hello', 5]\n\n>>> second_item = my_list.pop(1)\n>>> print(second_item)\nhello\n>>> print(my_list)\n[5, 5]\n\n\n# list.count(x) : \n#   Returns the number of occurrences of the element x. \n>>> letter_grades = [\"A\", \"B+\", \"A-\", \"B\", \"A\", \"A\"]\n>>> letter_grades.count(\"A\")\n3\n>>> letter_grades.count(\"C\")\n0\n\n# list.index(x) : \n#   Returns the index of the first occurrence of \n#   the element x in the list. \n#   A ValueError occurs if the element x is not found in the list.\n>>> names = [\"Khalid\", \"Reza\", \"Deven\"]\n>>> print(names.index(\"Reza\"))\n1\n>>> print(names.index(\"apple\"))\nValueError: 'apple' is not in list\n\n# list.sort() : \n#   Sorts the list in-place — this means that the list will be modified.\n#   Returns None.\n#   The list is sorted in ascending order.\n>>> grades = [100, 85, 90.5]\n>>> grades.sort()\n>>> print(grades)\n[85, 90.5, 100]\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>Nested Lists</h1>\n<p>An element of a list can be another list!<br>\nSuch lists are called <sc>nested</sc> lists.</p>\n<python>>>> nested_list = [[1], [1, 2, 3], [1, 2]]\n>>> type(nested_list)\n&#x3C;class 'list'>\n\n>>> print(nested_list[0])\n[1]\n>>> print(nested_list[1])\n[1, 2, 3]\n>>> print(nested_list[2])\n[1, 2]\n\n>>> print(type(nested_list[0]), type(nested_list[1]), type(nested_list[2]))\n&#x3C;class 'list'> &#x3C;class 'list'> &#x3C;class 'list'>\n</python>\n<p>Nested lists are useful to store data which come in form of a table or spreadsheet.</p>\n<python>#                   Name,   A1,  A2, A3\nstudent_grades = [[\"Khalid\", 90, 95, 100], # Student 1\n                  [\"Reza\", 85, 90, 98], # Student 2\n                  [\"Deven\", 70, 75, 80]] # Student 3\n</python>\n<p>We can perform same operations on nested lists as we saw earlier: indexing, slicing, etc.</p>\n<python>>>> student_grades = [[\"Khalid\", 90, 95, 100],\n                      [\"Reza\", 85, 90, 98],\n                      [\"Deven\", 70, 75, 80]]\n\n# Print name of 2nd student\n>>> print(student_grades[1][0]) \nReza\n\n# Change A2 grade for Reza\n>>> student_grades[1][2] = 100\n>>> print(student_grades)\n[['Khalid', 90, 95, 100], ['Reza', 85, 100, 98], ['Deven', 70, 75, 80]]\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>Lists and Strings</h1>\n<p>There are built-in functions and string methods that allows us to transform strings to/from lists.</p>\n<python># list(seq): built-in function which converts a sequence (such as\n#   a string or a list) into a list\n>>> fruits = \"apple\"\n>>> letters = list(fruits)\n>>> print(letters)\n['a', 'p', 'p', 'l', 'e']\n\n# s.split(sep): Breaks the string s using the separator string sep\n#   and returns a list of strings containing the separated parts\n# s.split(): same as above but using whitespace \n#   (spaces, tab character and newline ) as separator\n# s.splitlines(): Breaks a multi-lines strings into separate lines\n#   and returns a list containing those lines.\n>>> data = \"Khalid Reza Deven\"\n>>> names = data.split()\n>>> print(names)\n['Khalid', 'Reza', 'Deven']\n\n# Multiple spaces are also removed\n>>> data = \"Khalid    Reza     Deven\"\n>>> names = data.split()\n>>> print(names)\n['Khalid', 'Reza', 'Deven']\n\n>>> data = \"Khalid\\tReza\\tDeven\" # separated by tab\n>>> names = data.split()\n>>> print(names)\n['Khalid', 'Reza', 'Deven']\n\n>>> data = \"\"\"Khalid\nReza\nDeven Parekh\"\"\"\n>>> names = data.split()\n>>> print(names)\n['Khalid', 'Reza', 'Deven', 'Parekh']\n\n# Split by line (newline character)\n>>> data = \"\"\"Khalid\nReza\nDeven Parekh\"\"\"\n>>> names = data.splitlines()\n>>> print(names)\n['Khalid', 'Reza', 'Deven Parekh']\n\n>>> data = \"Khalid,Reza,Deven\"\n>>> names = data.split(\",\")\n>>> print(names)\n['Khalid', 'Reza', 'Deven']\n\n>>> data = \"Khalid,  Reza,  Deven\"\n>>> names = data.split(\",\")\n>>> print(names)\n['Khalid', '  Reza', '  Deven']  # notice space in strings\n\n\n# sep.join(L): joins all the strings in the list L using the string sep\n#   Returns the joined string.\n>>> names = ['Khalid', 'Reza', 'Deven']\n>>> joined = \" \".join(names)\n>>> print(joined)\nKhalid Reza Deven\n\n# a comma\n>>> joined = \",\".join(names)\n>>> print(joined)\nKhalid,Reza,Deven\n\n# a comma and a space\n>>> joined = \", \".join(names)\n>>> print(joined)\nKhalid, Reza, Deven\n\n# empty string, no separator\n>>> letters = [\"a\", \"p\", \"p\", \"l\", \"e\"]\n>>> joined = \"\".join(letters)\n>>> print(joined)\napple\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}