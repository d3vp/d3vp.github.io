{"pageProps":{"titles":["L1.1 — Computer and Programming Basics","L1.2 — Variables & Expressions","L2.1 — Control Flow Statements","Python Style Guide","May 14 — Problem Set","L2.2 — print(), String methods & while loop","May 17 — Problem Set","L3.1 — More loops & Defining functions","May 19 — Problem Set","L3.2 — Lists","May 21 — Problem Set","L4.1 — Tuples, Dictionaries, Sets","May 26 — Problem Set","May 28 — Problem Set","L4.2 — Nested data structures","June 2 — Problem Set","June 4 — Problem Set","L5.1 — Handling Exceptions, File IO","L5.2 — Comparing data structures, Writing modules, Matplotlib","June 9 — Problem Set"],"slugs":["Lecture-1.1","Lecture-1.2","Lecture-2.1","style-guide","_May14-problem-set","Lecture-2.2","_May17-problem-set","Lecture-3.1","_May19-problem-set","Lecture-3.2","_May21-problem-set","Lecture-4.1","_May26-problem-set","_May28-problem-set","Lecture-4.2","_June2-problem-set","_June4-problem-set","Lecture-5.1","Lecture-5.2","_June9-problem-set"],"post":{"title":"June 9 — Problem Set","slug":"_June9-problem-set","content":"<ol>\n<li>\n<p>Write a function <inline-code>is_number</inline-code> that takes a string <inline-code>x</inline-code> and returns <inline-code>True</inline-code> if <inline-code>x</inline-code> can be convert to a number (float), otherwise <inline-code>False</inline-code>. Use try/except statement.</p>\n<solution><python>def is_number(x):\n    is_num = True\n    \n    try:\n        y = float(x)\n    except ValueError:\n        is_num = False\n        \n    return is_num\n\n\nprint(is_number(\"a\"))\nprint(is_number(\"-1.5\"))\n</python></solution>\n</li>\n<li>\n<p>Write a function that takes as argument a filename (string), and returns a list containing all the unique words inside the file. Download this file to test your code: <a href=\"june9/words.txt\">words.txt</a>. The file may contain blank lines.</p>\n</li>\n<li>\n<p>Write a function <inline-code>save_phonebook()</inline-code>, which will keep asking the user to enter contact names and numbers until they enter ‘stop’. Each contact name and number should be saved into a file called <inline-code>phonebook.csv</inline-code>, with the name and number separated by a comma, and one name/number pair per line.</p>\n<output>Enter contact name: dev\nEnter phone number: 234\nEnter contact name: reza\nEnter phone number: 456\nEnter contact name: stop\n</output>\n<p>Expected contents of file <inline-code>phonebook.csv</inline-code>:</p>\n<pre><code>dev,234\nreza,456\n</code></pre>\n<solution><python>def save_phonebook():\n    fobj = open(\"phonebook.csv\", \"w\")\n    while True:\n        name = input(\"Enter contact name: \")\n        if name == \"stop\":\n            break\n        phone = input(\"Enter phone number: \")\n\n        fobj.write(name + \",\" + phone + \"\\n\")\n        \n    fobj.close()\n    \n    \nsave_phonebook()\n</python></solution>\n</li>\n<li>\n<p>Download the file <a href=\"june9/enrollment_data.txt\">enrollment_data.txt</a>. The first line contains header of the table (i.e. names of the columns). Second line onwards is enrollment data: first column is course name and rest of the columns are enrollment numbers for each semester. Compute the average enrollment per course and create a new file called <inline-code>enrollment_data_with_stats.txt</inline-code> that contains all the data from before with an additional column indicating the average student per semester.</p>\n<p>Check the <inline-code>expected_enrollment_data.txt</inline-code> below to see how the new file should look like after you ran your program.\nNote that columns of data in the files are separated by a character <inline-code>\"\\t\"</inline-code>.\nYou can use a list of lists or dictionaries as you see fit.</p>\n<p>Expected data in file <inline-code>enrollment_data_with_stats.txt</inline-code>:</p>\n<output>Course\tF17\tW18\tF18\tW19\tF19\tAVG\nCOMP202\t816\t613\t709\t590\t744\t694.4\nCOMP202\t420\t450\t550\t632\t680\t546.4\n</output>\n<solution><python>fobj = open(\"enrollment_data.txt\")  # open for reading\n\ndata = []\n\nfor line in fobj:\n    # Remove trailing spaces, then split by tab character\n    data.append(line.rstrip().split(\"\\t\"))\n    \nfobj.close()\n\n# Add name of last column to the first line\ndata[0].append(\"AVG\")\n\n# for all lines excect the first line, compute average\nfor i in range(1, len(data)):\n    enrollment = data[i][1:] # first column is course, so ignore it\n    total = 0\n    \n    # convert string to numbers and add them\n    for x in enrollment:\n        total += int(x)\n    avg = total / len(enrollment)\n    \n    # convert float to str\n    data[i].append(str(avg))  # add avg as last column\n    \n\n# finally write data to file\n\nfobj = open(\"enrollment_data_with_stats.txt\", \"w\")  # open for writing\n\nfor row in data:\n    fobj.write(\"\\t\".join(row) + \"\\n\")\n    \nfobj.close()\n</python></solution>\n</li>\n</ol>\n<h1>Extra practice for midterm</h1>\n<ol>\n<li>\n<p>Write a function <inline-code>get_longest_list</inline-code> that takes a 2D list and returns the longest inner list.\nFor example:</p>\n<python>>>> animals = [['owl', 'bat', 'cow'], ['goat', 'duck', 'lion', 'bear'], ['panda', 'zebra']]\n>>> get_longest_list(animals)\n['goat', 'duck', 'lion', 'bear']\n</python>\n</li>\n<li>\n<p>Write a function <inline-code>is_square_matrix</inline-code> that takes a 2D list of integers as input and returns a boolean value. The function should return true if the 2D list is a square matrix, that is, each inner list has the same length as the number of inner lists. The function returns false otherwise.</p>\n<python>>>> list1 = [[1, 2, 3], [5, 6], [8, 9, 0]]\n>>> list2 = [[2, 2, 5], [0, 6, 7], [8, 9, 0]]\n>>> is_square_matrix(list1)\nFalse\n>>> is_square_matrix(list2)\nTrue\n</python>\n</li>\n<li>\n<p>Write a function called <inline-code>reverse_lookup</inline-code> that takes a dictionary <inline-code>d</inline-code> and a value <inline-code>target</inline-code> as arguments. The function returns the list of keys in <inline-code>d</inline-code> that map to <inline-code>target</inline-code>. For example:</p>\n<python>letter_count = {'a': 3, 'b': 2, 'c': 3, 'd': 5, 'e': 0, 'f': 3}\nprint(reverse_lookup(letter_count, 3))\n# prints: \n# ['a', 'c', 'f']\n\nprint(reverse_lookup({'a': 3, 'b': 2, 'c': 3, 'd': 5, 'e': 0, 'f': 3}, 1))\n# prints:\n# []\n</python>\n</li>\n<li>\n<p>Complete the following function:</p>\n<python>def increase_age_at_birthday(patients, today):\n    \"\"\"\n    Increments the age of patients whose birthday is today\n\n    Args:\n        patients (dict): A dictionary with keys = patient names\n                and values = patient record (dictionary)\n        today (string): Today's date\n    Returns: None\n    \"\"\"\n        \n        \n\n\npatients = {\"Samira\":  {\"age\": 26, \"birthday\": \"August 23\"},\n            \"Anqi\":    {\"age\": 31, \"birthday\": \"May 13\"},\n            \"Florian\": {\"age\": 74, \"birthday\": \"May 11\"},\n            \"Sarath\":  {\"age\": 37, \"birthday\": \"May 13\"}}\n\nincrease_age_at_birthday(patients, \"May 13\")\nprint(patients)\n</python>\n<output>{'Samira':  {'age': 26, 'birthday': 'August 23'}, \n 'Anqi':    {'age': 32, 'birthday': 'May 13'}, \n 'Florian': {'age': 74, 'birthday': 'May 11'}, \n 'Sarath':  {'age': 38, 'birthday': 'May 13'}}\n</output>\n<solution><python>def increase_age_at_birthday(patients, today):\n    for patient, record in patients.items():\n        if record[\"birthday\"] == today:\n            record[\"age\"] += 1  \n</python></solution>\n</li>\n</ol>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}