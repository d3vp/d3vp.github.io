{"pageProps":{"titles":["2.1 — Programming Basics","2.2 — Variables, Arithmetic & String operations","2.3 — Function Calls, Expressions","3.1 — Defining functions, Errors & Debugging","3.2 — Boolean Expressions, Comparison & Logical Operators","3.3 — Conditional execution using if statement","3.4 — for loop & String indexing, slicing","Python Style Guide","4.1 — Escape Characters & Controlling print()","4.2 — String methods & in operator","4.3 — while statement & Nested loops","4.4 — return statement & Importing modules","5.1 — Scope of Variables","5.2 — Lists & List Operations","5.3 — List Functions & Methods","5.4 — Tuples","6.1 — Object Identity, Immutability, Unpacking","6.2 — Sets","6.3 — Dictionaries","7.1 — Nested data structures & comparisons","7.2 — Iterables & comprehensions","7.3 — Reading and writing files","8.1 — Default arguments & Modules","8.2 — Handling Exceptions","9.1 — Object Oriented Programming (OOP)","9.2 — More on methods & __str__"],"slugs":["Lecture-2.1","Lecture-2.2","Lecture-2.3.1","Lecture-3.1","Lecture-3.2","Lecture-3.3","Lecture-3.4","style-guide","Lecture-4.1","Lecture-4.2","Lecture-4.3","Lecture-4.4","Lecture-5.1","Lecture-5.2","Lecture-5.3","Lecture-5.4","Lecture-6.1","Lecture-6.2","Lecture-6.3","Lecture-7.1","Lecture-7.2","Lecture-7.3","Lecture-8.1","Lecture-8.2","Lecture-9.1","Lecture-9.2"],"post":{"title":"7.1 — Nested data structures & comparisons","slug":"Lecture-7.1","content":"<h2>Nested Lists</h2>\n<p>An element of a list can be another list!<br>\nSuch lists are called <sc>nested</sc> lists.</p>\n<python>nested_list = [[1], [1, 2, 3], [1, 2]]\nprint(type(nested_list))\n# &#x3C;class 'list'>\n\nprint(nested_list[0])\n# [1]\nprint(nested_list[1])\n# [1, 2, 3]\nprint(nested_list[2])\n# [1, 2]\n\nprint(type(nested_list[0]), type(nested_list[1]), type(nested_list[2]))\n# &#x3C;class 'list'> &#x3C;class 'list'> &#x3C;class 'list'>\n</python>\n<p>Nested lists are useful to store data which come in form of a table or spreadsheet.</p>\n<python>#                   Name,   A1,  A2, A3\nstudent_grades = [[\"Khalid\", 90, 95, 100], # Student 1\n                  [\"Reza\", 85, 90, 98], # Student 2\n                  [\"Deven\", 70, 75, 80]] # Student 3\n</python>\n<p>We can perform same operations on nested lists as we saw earlier: indexing, slicing, etc.</p>\n<python>student_grades = [[\"Khalid\", 90, 95, 100],\n                  [\"Reza\", 85, 90, 98],\n                  [\"Deven\", 70, 75, 80]]\n\n# Print name of 2nd student\nprint(student_grades[1][0]) \n# Reza\n\n# Change A2 grade for Reza\nstudent_grades[1][2] = 100\nprint(student_grades)\n# [['Khalid', 90, 95, 100], ['Reza', 85, 100, 98], ['Deven', 70, 75, 80]]\n</python>\n<h3>Iterating in a <i>row-first</i> and <i>column-first</i> order:</h3>\n<div class=\"flex\"><python>matrix = [[81, 75, 90, 60], \n          [80, 70, 85, 55],\n          [40, 50, 45, 85]]\n\nnum_rows = len(matrix)  # no. of inner lists\nnum_cols = len(matrix[0])  # length of an inner list\n\nprint(\"Row-first order:\")\nfor r in range(num_rows):\n    for c in range(num_cols):\n        print(matrix[r][c], end=\" \")\n    print()\n\n\nprint(\"\\nColumn-first order:\")\nfor c in range(num_cols):\n    for r in range(num_rows):\n        print(matrix[r][c], end=\" \")\n    print()\n</python><output>Row-first order:\n81 75 90 60 \n80 70 85 55 \n40 50 45 85 \n\nColumn-first order:\n81 80 40 \n75 70 50 \n90 85 45 \n60 55 85\n</output></div>\n<h2>List of tuples</h2>\n<python>points = [(1, 1, 3), (4, 10.5, 9), (7, 4.4, 9.7)]\n# List element can be modified:\npoints[1] = (4, 12, 10)  # Changing to new points\nprint(points)  # [(1, 1, 3), (4, 12, 10), (7, 4.4, 9.7)]\n\n# Trying to change the second points's z-coordinate\npoints[1][2] = 20  \n# TypeError: 'tuple' object does not support item assignment\n</python>\n<p>Iterating over list of tuples:</p>\n<div class=\"flex\"><python>points = [(1, 1, 3), (4, 10.5, 9), (7, 4.4, 9.7)]\n\nfor p in points:  # p is a tuple\n    print(p)\n    \nfor x, y, z in points:  # Unpack a tuple into 3 variables\n    print(x, y, z)\n</python><output>(1, 1, 3)\n(4, 10.5, 9)\n(7, 4.4, 9.7)\n1 1 3\n4 10.5 9\n7 4.4 9.7\n</output></div>\n<h2>List of dictionaries</h2>\n<p>A dictionary can be used to represent a data record such as student record in a course in the following example.</p>\n<p>A list of such dictionaries can store multiple data records.</p>\n<python>student_records = [\n    {\"Name\": \"Khalid\", \"ID\": 2601234, \"grades\": [90, 95, 100]},\n    {\"Name\": \"Reza\", \"ID\": 2601000, \"grades\": [95, 95, 97]},\n    {\"Name\": \"Deven\", \"ID\": 2605000, \"grades\": [80, 85, 90]}\n]\n\n# grades is a list with 3 assignment grades\n</python>\n<p>What is assignment 1 grades for “Reza” ?</p>\n<python>print(student_records[1][\"grades\"][0])  # 95\n</python>\n<p>Display total grade for each student.</p>\n<python>for record in student_records:\n    print(\"Total grade for\", record[\"Name\"], \"is\", sum(record[\"grades\"]))\n</python>\n<output>Total grade for Khalid is 285\nTotal grade for Reza is 287\nTotal grade for Deven is 255\n</output>\n<h1>Comparing data structures</h1>\n<p>Data structures — list, tuples, sets and dictionaries can be compared for equality using <inline-code>==</inline-code> and <inline-code>!=</inline-code> operators.</p>\n<python># Lists, order matters\ngrades1 = [85, 80, 100]\ngrades2 = [85, 80, 100]\ngrades3 = [85, 100, 80]\n\n# True only when all elements are equal in order\nprint(grades1 == grades2)  # True\nprint(grades2 == grades3)  # False\n\n\n# tuples, order matters\npoint1 = (1, 1, 2)\npoint2 = (1, 2, 1)\nprint(point1 != point2)  # True\n\n\n# sets, order does not matter\nfruits1 = {\"apple\", \"orange\", \"banana\"}\nfruits2 = {\"orange\", \"apple\",  \"banana\"}\n\n# True only when sets are of equal length and both sets contain same elements\nprint(fruits1 == fruits2)  # True\nprint(fruits1 == {\"apple\", \"orange\", \"banana\", \"grapes\"})  # False\n\n# dictionaries, order does not matter\nphonebook1 = {\"A\": 5140001000, \"B\": 5140002000, \"C\": 5140003000 }\nphonebook2 = { \"B\": 5140002000, \"A\": 5140001000, \"C\": 5140003000 }\n\n# True only when dictionaries are of equal length and \n# both contain same key-value pairs\nprint(phonebook1 == phonebook2)  # True\nprint(phonebook1 == {\"A\": 4381001000, \"B\": 5140002000, \"C\": 5140003000 })  # False\n\n\n# Works for nested structures as well\npoints1 = [(1, 1), (2, 10)]\npoints2 = [(1, 1), (2, 10)]\nprint(points1 == points2)  # True\nprint(points1 == [(1, 1), (2, 5)])  # False\n\nstudent1 = {\"name\": \"Reza\", \"grades\": [90, 100, 100]}\nstudent2 = {\"name\": \"Reza\", \"grades\": [90, 100, 90]}\nprint(student1 == student2)  # False\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}