{"pageProps":{"titles":["2.1 — Programming Basics","2.2 — Variables, Arithmetic & String operations","2.3 — Function Calls, Expressions","3.1 — Defining functions, Errors & Debugging","3.2 — Boolean Expressions, Comparison & Logical Operators","3.3 — Conditional execution using if statement","3.4 — for loop & String indexing, slicing","Python Style Guide","4.1 — Escape Characters & Controlling print()","4.2 — String methods & in operator","4.3 — while statement & Nested loops","4.4 — return statement & Importing modules","5.1 — Scope of Variables","5.2 — Lists & List Operations","5.3 — List Functions & Methods","5.4 — Tuples","6.1 — Object Identity, Immutability, Unpacking","6.2 — Sets","6.3 — Dictionaries","7.1 — Nested data structures & comparisons","7.2 — Iterables & comprehensions","7.3 — Reading and writing files","8.1 — Default arguments & Modules","8.2 — Handling Exceptions","9.1 — Object Oriented Programming (OOP)","9.2 — More on methods & __str__"],"slugs":["Lecture-2.1","Lecture-2.2","Lecture-2.3.1","Lecture-3.1","Lecture-3.2","Lecture-3.3","Lecture-3.4","style-guide","Lecture-4.1","Lecture-4.2","Lecture-4.3","Lecture-4.4","Lecture-5.1","Lecture-5.2","Lecture-5.3","Lecture-5.4","Lecture-6.1","Lecture-6.2","Lecture-6.3","Lecture-7.1","Lecture-7.2","Lecture-7.3","Lecture-8.1","Lecture-8.2","Lecture-9.1","Lecture-9.2"],"post":{"title":"9.2 — More on methods & __str__","slug":"Lecture-9.2","content":"<p>The <inline-code>Student</inline-code> class we have defined so far look as follow:</p>\n<python>class Student:\n    \"\"\" Represents a student. \"\"\"\n    \n    def __init__(self, student_name, id_num):\n        self.name = student_name\n        self.id_num = id_num\n    \n    def display_info(self):\n        print(\"Name of student:\", self.name)\n        print(\"Student ID:\", self.id_num)\n\n\nnew_student = Student(\"Bob\", 260000000)\nnew_student.display_info()\n# Name of student: Bob\n# Student ID: 260000000\n</python>\n<p>Let’s add new attribute and method.</p>\n<ul>\n<li>Add an attribute <inline-code>courses</inline-code>, initializing it to empty dictionary. This attribute will store course name and corresponding grade.</li>\n<li>Update <inline-code>display_info</inline-code> method to also display a comma-separate list of course names. If there are no courses, display <inline-code>None registered.</inline-code></li>\n<li>Add a method <inline-code>add_course</inline-code> that takes as a course name (<inline-code>str</inline-code>) and an optional grade (default: <inline-code>None</inline-code>) and adds them to the attribute <inline-code>courses</inline-code>.</li>\n</ul>\n<python>class Student:\n    \"\"\" Represents a student. \"\"\"\n    \n    def __init__(self, student_name, id_num):\n        self.name = student_name\n        self.id_num = id_num\n        self.courses = {}\n    \n    def display_info(self):\n        print(\"Name of student:\", self.name)\n        print(\"Student ID:\", self.id_num)\n        if len(self.courses) > 0:\n            courses = \", \".join(self.courses)\n        else:\n            courses = \"None registered.\"\n\n        print(\"Courses:\", courses)\n        \n    def add_course(self, course_name, grade=None):\n        self.courses[course_name] = grade\n        \n    \ns1 = Student(\"Bob\", 26001)\ns1.display_info()\n\ns1.add_course(\"PHIL 200\")\ns1.display_info()\n\n\ns2 = Student(\"Jane\", 26005)\ns2.add_course(\"COMP 202\")\ns2.add_course(\"POLI 222\")\ns2.display_info()\n</python>\n<h1>Displaying objects — <inline-code>__str__</inline-code> method</h1>\n<p>Consider the following code that tries to display an object using <inline-code>print()</inline-code></p>\n<python>s1 = Student(\"Dev\", 26001)\nprint(s1)\n</python>\n<output>&#x3C;__main__.Student object at 0x7f8cd66aa890>\n</output>\n<ul>\n<li>When we display <inline-code>student1</inline-code> we see what class the object belongs to, and the identity of the object.</li>\n<li>Wouldn’t it be nice to display <inline-code>name</inline-code>, <inline-code>id_num</inline-code> and other attributes when we do <inline-code>print(student1)</inline-code>?</li>\n</ul>\n<h2><inline-code>__str__</inline-code> method</h2>\n<ul>\n<li>\n<p>We can change the string representation of our class objects by implementing a method called <inline-code>__str__</inline-code> in our class.</p>\n<python>def __str__(self):\n    # must return a string\n</python>\n</li>\n<li>\n<p>If we do that, then when we call <inline-code>print(obj)</inline-code> or <inline-code>str(obj)</inline-code> with an instance <inline-code>obj</inline-code> of our class, <inline-code>__str__</inline-code> method is called automatically and the returned string is used.</p>\n</li>\n</ul>\n<h2>Try it!</h2>\n<p>In the <inline-code>Student</inline-code> class, add a <inline-code>__str__</inline-code> method that returns a string in the following format:</p>\n<pre><code>Name: &#x3C;name attribute>\nStudent ID: &#x3C;id_num attribute>\nCourses: &#x3C;comma-separated courses>\n</code></pre>\n<p>Then, try to use print with an object of Student class.</p>\n<python>class Student:\n    \"\"\" Represents a student. \"\"\"\n    \n    def __init__(self, student_name, id_num):\n        self.name = student_name\n        self.id_num = id_num\n        self.courses = {}\n        \n    def add_course(self, course_name, grade=None):\n        self.courses[course_name] = grade\n\n    def __str__(self):\n        if len(self.courses) > 0:\n            courses = \", \".join(self.courses)\n        else:\n            courses = \"None registered.\"\n        \n        return (\"Name: \" + self.name + \"\\n\" +\n                \"Student ID: \" + str(self.id_num) + \"\\n\" +\n                \"Courses: \" + courses + \"\\n\")\n\n\ns1 = Student(\"Dev\", 260001)\nprint(s1)\n\ns2 = Student(\"Reza\", 260005)\ns2.add_course(\"COMP 202\")\ns2.add_course(\"COMP 250\", 95)\nprint(s2)\n</python>\n<h2>Example — List of Student objects</h2>\n<python>students = [Student(\"Dev\", 260001),\n            Student(\"Reza\", 260005)]\n\n# Create a student object and append it to the list\nstudents.append(Student(\"Alice\", 260011))\n\nprint(students[2])  # uses __str__ of Student class\n# Name: Alice\n# Student ID: 260011\n# Courses: None registered.\n\n\nprint(students) # Does not use __str__ of Student class\n# [&#x3C;__main__.Student object at 0x10ad16100>,\n#  &#x3C;__main__.Student object at 0x10ad169d0>,\n#  &#x3C;__main__.Student object at 0x10ad16a00>]\n\n\nfor s in students:\n    print(s)  # uses __str__ of Student class\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}