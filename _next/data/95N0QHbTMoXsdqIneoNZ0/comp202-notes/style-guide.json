{"pageProps":{"titles":["L1.1 — Computer and Programming Basics","L1.2 — Variables & Expressions","L2.1 — Control Flow Statements","Python Style Guide","May 14 — Problem Set","L2.2 — print(), String methods & while loop","May 17 — Problem Set","L3.1 — More loops & Defining functions","May 19 — Problem Set","L3.2 — Lists","May 21 — Problem Set","L4.1 — Tuples, Dictionaries, Sets","May 26 — Problem Set","May 28 — Problem Set","L4.2 — Nested data structures","June 2 — Problem Set","June 4 — Problem Set","L5.1 — Handling Exceptions, File IO"],"slugs":["Lecture-1.1","Lecture-1.2","Lecture-2.1","style-guide","_May14-problem-set","Lecture-2.2","_May17-problem-set","Lecture-3.1","_May19-problem-set","Lecture-3.2","_May21-problem-set","Lecture-4.1","_May26-problem-set","_May28-problem-set","Lecture-4.2","_June2-problem-set","_June4-problem-set","Lecture-5.1"],"post":{"title":"Python Style Guide","slug":"style-guide","content":"<p>This style guide is adapted from <a href=\"https://courses.cs.washington.edu/courses/cse160/16wi/handouts/style_guide.html\">https://courses.cs.washington.edu/courses/cse160/16wi/handouts/style_guide.html</a> for this course.</p>\n<h1>Naming variables</h1>\n<ul>\n<li>Variable names in Python should be descriptive, concise, and lowercase, with words separated by underscores.</li>\n<li>Students shouldn’t use single letter names for variables such as <inline-code>i</inline-code> or <inline-code>j</inline-code> except as an index in <inline-code>for</inline-code> loop for example.</li>\n<li>In Python, it’s recommended to name variables in a certain way so that other Python programmers can read your code more easily. Here are some examples of variable names: “num_lines”,  “running_sum”, “my_friends”, etc.</li>\n</ul>\n<p>Good:</p>\n<python>total\nheight_sum\naverage_weight\nage\n</python>\n<p>Bad:</p>\n<python>t  # Fine as a variable in for loop but not in general\nNumberSum  # use underscore between words\na_w  # Not clear what this variable is for\nwhats_my_age_again  # too verbose, detracts from readability\n</python>\n<h1>Space between operators</h1>\n<ul>\n<li>Include spaces between arithmetic, logical and other operators in an expression.</li>\n<li>Limit to 1 space, to avoid unnecessary whitespace.</li>\n<li>The exception to this is parentheses, which can be directly adjacent to whatever they are enclosing.</li>\n</ul>\n<p>Good:</p>\n<python>x = 4\nx + y\n(sum ** 2) + 4 * val - 1\nx * (4 + 6)\nb + math.sqrt(4 * max_val)\n</python>\n<p>Bad:</p>\n<python>x=4  # not enough spaces\nx+y  # not enough spaces\n(sum**2)+4*val-1  # not enough spaces\nx * ( 4 + 6 )  # unnecessary spaces around parentheses\nb +   math.sqrt( 4 *     max_val)  # inconsistent spacing\n</python>\n<h1>Space between function names and their arguments</h1>\n<ul>\n<li>Avoid adding extra space(s) between a function name and its associated arguments.</li>\n<li>For example, you should write, <inline-code>range(x)</inline-code> instead of <inline-code>range (x)</inline-code> (in other words, do not put a space between ‘range’ and the opening parenthesis). Using the space suggests—incorrectly—that the parenthesis are for grouping an expression, when in fact they are for calling the function.</li>\n<li>You should, however, include spaces between individual arguments in the argument list. This makes your function calls more readable.</li>\n</ul>\n<p>Good:</p>\n<python>length = len(message)\nrange_vals = range(n, 4)\n</python>\n<p>Bad:</p>\n<python>length = len (message) # too much space before the parenthesis\nrange_vals = range(n,4)  # no spaces between arguments\n</python>\n<h1>Line Length</h1>\n<ul>\n<li>Limit lines of code/comments to 80 characters to provide readability.</li>\n<li>If a line extends past this limit, split it onto another line.</li>\n<li>Thonny shows a vertical line at 80th character in the editor; lines of code should not extend over this line.</li>\n<li>Use parentheses to group an expression so that you can break long line as shown below.</li>\n</ul>\n<p>Bad:</p>\n<python># Line too long, need to scroll to read\nincome = gross_wages + taxable_interest + 10.5 * (dividends - qualified_dividends) - ira_deduction - student_loan_interest\n</python>\n<p>Good:</p>\n<python># break into shorter lines, allowed because of parentheses\nincome = (gross_wages + taxable_interest + 10.5 *\n          (dividends - qualified_dividends) - ira_deduction -\n          student_loan_interest)\n</python>\n<p>Bad:</p>\n<python># Line too long, need to scroll to read\nprint(\"Value of number is\", number, \"&#x26; square of number is\", number ** 2 , \"&#x26; cube of number is\", number ** 3)\n</python>\n<p>Good:</p>\n<python># break into shorter lines, allowed because of parentheses\nprint(\"Value of number is\", number, \"&#x26; square of number is\", number**2,\n      \"&#x26; cube of number is\", number**3)\n</python>\n<h1>Commenting</h1>\n<ul>\n<li>Include a header comment at the top of a file to describe what the function of a python program is.</li>\n<li>Also, long blocks of code with a particular purpose or small bits of particularly complex code should be labeled/explained by a comment on the preceding line(s).</li>\n<li>Avoid commenting on information that is unnecessary or obvious to other programmers reading your code (e.g. comments like “initialize variable” or “using for loop” are not informative).</li>\n<li>Use proper spacing with your comments as well, one space after hashtag (#)</li>\n</ul>\n<python>#Don't do this (no space after hashtag)\n# Do this (one space after hashtag)\nx = 5# This is too close to the code!\nx = 5                # Too much space!\nx = 5  # This is better\n\n# Long comment like this one should be on their own line\nprint(123)  # short comment ok here\n</python>\n<h1>Avoid unnecessary nested if statements or a series of if statements</h1>\n<p>Avoid nesting <inline-code>if</inline-code> statements that can be written as one <inline-code>if</inline-code> statement.</p>\n<p>Do this:</p>\n<python>if val > 120:\n    print \"Green!\"\nelif val > 80:\n    print \"Blue!\"\nelif val > 32:\n    print \"Red!\"\nelse:\n    print \"Orange!\"\n</python>\n<p>Instead of this:</p>\n<python>if val > 120:\n    print \"Green!\"\nelse:\n    if val > 80:\n        print \"Blue!\"\n    else:\n        if val > 32:\n            print \"Red!\"\n        else:\n            print \"Orange!\"\n</python>\n<p>If the intent is for only one block of code to execute, be sure to use <inline-code>if</inline-code>, <inline-code>elif</inline-code>, <inline-code>else</inline-code> instead of a series of <inline-code>if</inline-code>‘s.</p>\n<p>Do this:</p>\n<python>if color == 'Red':\n    # code here\nelif color == 'Green':\n    # code here\nelif color == 'Blue':\n    # code here\nelif color == 'Yellow':\n    # code here\n</python>\n<p>Instead of this:</p>\n<python>if color == 'Red':\n    # code here\nif color == 'Green':\n    # code here\nif color == 'Blue':\n    # code here\nif color == 'Yellow':\n    # code here\n</python>\n<h1>Lingering Debug Code</h1>\n<ul>\n<li>Please remove any print statements or unnecessary computations that you added to help debug errors before you turn in your program.</li>\n<li>Don’t just leave unnecessary code commented out. It makes the real code harder to read.</li>\n</ul>\n<h1>Unnecessary Use of Parentheses</h1>\n<p>Avoid using excessive parentheses in your code, when not needed. Too many parentheses detract from readability.</p>\n<p>Good:</p>\n<python>(x + 4) / (6 ** (y ** 2))   # readable\n</python>\n<p>Bad:</p>\n<python>((((x) + (4))) / ((6) ** ((y) ** 2)))   # less readable\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}