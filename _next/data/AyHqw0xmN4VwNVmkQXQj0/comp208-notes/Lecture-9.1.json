{"pageProps":{"allSlugs":[["Lecture-1",[{"title":"1 — Programming Basics","slug":"Lecture-1"}]],["Lecture-2.1",[{"title":"2.1 — Variables, Arithmetic & String operations","slug":"Lecture-2.1"}]],["Lecture-2.2",[{"title":"2.2 — Function calls, Defining functions, Types of Errors","slug":"Lecture-2.2"}]],["Lecture-3.1",[{"title":"3.1 — Order of Expression Evaluation, Comparing Values, Conditional Execution","slug":"Lecture-3.1"}]],["Lecture-3.2",[{"title":"3.2 — if statement, for loop, Indexing & Slicing Strings","slug":"Lecture-3.2"}]],["Lecture-4.1",[{"title":"4.1 — return vs. print, while statement, Modules","slug":"Lecture-4.1"}]],["Lecture-4.2",[{"title":"4.2 — String methods, break & continue statements","slug":"Lecture-4.2"}]],["Lecture-5.1",[{"title":"5.1 — Controlling print(), Nested Loops, Lists","slug":"Lecture-5.1"}]],["Lecture-5.2",[{"title":"5.2 — Scope of variables, List operations","slug":"Lecture-5.2"}]],["Lecture-6.1",[{"title":"6.1 — Tuples, Immutable objects, Sets","slug":"Lecture-6.1"}]],["Lecture-6.2",[{"title":"6.2 — More list & set operations, Dictionaries","slug":"Lecture-6.2"}]],["Lecture-7.1",[{"title":"7.1 — Iterables, Unpacking, Nested Lists","slug":"Lecture-7.1"}]],["Lecture-7.2",[{"title":"7.2 — Nested data structures, Comprehensions, Modules","slug":"Lecture-7.2"}]],["Lecture-8.1",[{"title":"8.1 — Nested list comprehensions, Reading & Writing Files","slug":"Lecture-8.1"}]],["Lecture-8.2",[{"title":"8.2 — Shallow vs. deep copy, Handling exceptions","slug":"Lecture-8.2"}]],["Lecture-9.1",[{"title":"9.1 — Object Oriented Programming (OOP)","slug":"Lecture-9.1"}]],["Lecture-9.2",[{"title":"9.2 — Keyword arguments, More on OOP","slug":"Lecture-9.2"}]],["Lecture-10.1",[{"title":"10.1 — NumPy","slug":"Lecture-10.1"}]],["Lecture-10.2",[{"title":"10.2 — More Numpy, Plotting using Matplotlib","slug":"Lecture-10.2"}]],["Lecture-11.1",[{"title":"11.1 — More Numpy, Linear algebra, Random numbers","slug":"Lecture-11.1"}]],["Lecture-11.2",[{"title":"11.2 — Interpolation, Curve fitting, Numerical Integration","slug":"Lecture-11.2"}]],["Lecture-12.1",[{"title":"12.1 — Using SciPy, System of Linear Equations","slug":"Lecture-12.1"}]],["Lecture-12.2",[{"title":"12.2 — Root Finding","slug":"Lecture-12.2"}]]],"post":{"slug":"Lecture-9.1","content":"<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"objects\">Objects</h2><ul>\n<li>An object consists of data and a set of methods can be provided to work with it.</li>\n<li>For example, a string is a collection of characters and methods like <code>isupper</code> or <code>split</code> can be called <i>on it</i>.</li>\n<li>Python is an object-oriented language. This means that it uses objects to represent data and provides methods related to them.</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"object-oriented-programming-oop\">Object-oriented programming (OOP)</h2><ul>\n<li>Up to now, we have been using functions to organize our code, and built-in types <code>(list, str, list, or dict)</code> to organize our data.</li>\n<li>OOP is a way to use programmer-defined data classes to organize code and data.</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"class-and-objects\">Class and objects</h2><ul>\n<li>A class is like a <i>blueprint/template</i> for creating objects. It specifies what data the objects have and what methods can operate on the data.</li>\n<li>An object is an <sc>instance</sc> of some class. The terms <i>instance</i> and <i>object</i> are used interchangeably.</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"example--student\">Example — Student</h2><p>We want to define a class that would be a good template for objects representing students.</p><hgrid margin=\"0\"><div><p>Useful data:</p><ul>\n<li>Name</li>\n<li>Student ID</li>\n<li>Current courses</li>\n<li>Past grades</li>\n</ul></div><div><p>Useful methods:</p><ul>\n<li>compute_GPA</li>\n<li>add_course</li>\n<li>drop_course</li>\n</ul></div></hgrid><p>Each instance of the class (i.e., each object) would represent one particular student.</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"defining-a-class\">Defining a class</h2><python># This class does not contain any useful code yet\nclass MyClass:\n   \"\"\" a new data type \"\"\"\n   pass\n</python><ul>\n<li>Class names should follow the UpperCamelCase convention.</li>\n<li>In a Python file, we can define as many classes as we want.</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"instantiating-a-class\">Instantiating a class</h2><python>class Student:\n    \"\"\" Represents a student \"\"\"\n    pass\n\n# We can now create an object using the constructor Student()\nstudent1 = Student() \nprint(student1)  # &#x3C;__main__.Student object at 0x7fa7806c9310>\n\nstudent2 = Student() \nprint(student2)  # &#x3C;__main__.Student object at 0x7fa7806c9290>\n</python><p>The variables <inline-code>student1</inline-code> and <inline-code>student2</inline-code>refer to two different objects of class <inline-code>Student</inline-code>.</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"attributes\">Attributes</h2><ul>\n<li>We can create a variable that belongs to a specific object. These variables are called <sc>attributes</sc>.</li>\n<li>We create an attribute by assigning it a value using the dot notation: <inline-code>object.attribute = value</inline-code></li>\n<li>Attributes can be accessed only through the object they belong to, using dot notation: <inline-code>object.attribute</inline-code></li>\n</ul></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"\"></h2><python>class Student:\n    \"\"\" Represents a student \"\"\"\n    pass\n\nstudent1 = Student()\n# Create an attribute inside the student1 object\nstudent1.name = \"Reza\"\n\n# Use the attribute inside student1 object:\nprint(student1.name)  # Reza\n\nstudent2 = Student()\nprint(student2.name)\n# AttributeError: 'Student' object has no attribute 'name'\n\nprint(name)  # NameError: name 'name' is not defined\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"visualization\">Visualization</h2><div class=\"ppt-scale-1_25\"><iframe width=\"800\" height=\"400\" scrolling=\"no\" style=\"overflow: hidden;\" frameborder=\"0\" src=\"https://pythontutor.com/iframe-embed.html#code=class%20Student%3A%0A%20%20%20%22%22%22%20Represents%20a%20student%0A%20%20%20%22%22%22%0A%0Astudent1%20%3D%20Student%28%29%0Astudent1.name%20%3D%20%22Deven%22%0Aname%20%3D%20student1.name%0Aprint%28name%29%0A&#x26;codeDivHeight=400&#x26;codeDivWidth=350&#x26;cumulative=false&#x26;curInstr=0&#x26;heapPrimitives=nevernest&#x26;origin=opt-frontend.js&#x26;py=3&#x26;rawInputLstJSON=%5B%5D&#x26;textReferences=false\"> </iframe></div></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"try-it\">Try it!</h2><ul>\n<li>Define a class <inline-code>Student</inline-code>.</li>\n<li>Write a function that takes as arguments a string <inline-code>name</inline-code> and an integer <inline-code>id_num</inline-code> and returns a <inline-code>Student</inline-code> object with two attributes <inline-code>name</inline-code> and <inline-code>id_num</inline-code>.</li>\n<li>Write a function that takes as arguments two Student objects and returns the <inline-code>name</inline-code> of the student with the larger <inline-code>id_num</inline-code>.</li>\n<li>Test the above functions by creating two objects of Student class.</li>\n</ul><p>Code available in the file <inline-code>student_example1.py</inline-code>.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-1\"></h2><redbox><p>So far, we saw how to create attributes in an object, from outside a class. That is not how we usually create attributes. It was done for demonstration purposes to understand what attributes are.</p></redbox></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"constructor-and-__init__-method\">Constructor and <inline-code>__init__</inline-code> method</h2><ul>\n<li>A constructor in an expression of form <inline-code>MyClass(arg1, arg2, ...)</inline-code> which creates an object of class <inline-code>MyClass</inline-code>. For example, <inline-code>Student()</inline-code> or <inline-code>Student(\"Reza\", 1234)</inline-code></li>\n<li>In Python, we define a special method named <inline-code>__init__</inline-code> (known as initializer method). It is invoked automatically whenever a new object is created using a contructor.</li>\n</ul><python>class MyClass:\n    def __init__(self):\n        # do something when the object is being created\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-2\"></h2><p>Let’s write an <inline-code>__init__</inline-code> method for the <inline-code>Student</inline-code> class that takes no arguments (besides <inline-code>self</inline-code>) and prints out “Creating a new student”.</p><python>class Student:\n    \"\"\" Represents a student \"\"\"\n    \n    def __init__(self):\n        print(\"Creating a new student\")\n\n\n# constructor without arguments:\nstudent1 = Student()  # __init__ will be called\n</python><output>Creating a new student\n</output></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"constructor-with-arguments\">Constructor with arguments</h2><p>The constructor can have arguments which are typically used to create the attributes and set their initial values.</p><p>Now, let’s modify the <inline-code>__init__</inline-code> method to add more arguments:</p><ul>\n<li><inline-code>name</inline-code> (string) of the student and their <inline-code>id_num</inline-code> (int)</li>\n<li>Create attributes <inline-code>name</inline-code> and <inline-code>id_num</inline-code> using <inline-code>self</inline-code> and set their values to the respective arguments.</li>\n</ul><p>Code available in the file <inline-code>student_example2.py</inline-code>.</p><p>What happens in example above if we do not create attributes in <inline-code>__init__</inline-code> ?</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"defining-methods\">Defining Methods</h2><p>We can define methods inside a class using <inline-code>def</inline-code> keyword.</p><p><sc>Instance methods</sc> – methods that are associated or bound to instances of a class.</p><ul>\n<li>These methods are called on an instance (object) and they can access attributes specific to that instance.</li>\n</ul></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-3\"></h2><python>class MyClass:\n    def my_method(self, argument1, argument2, ..., argumentN):\n        # do something \n</python><p>The first argument of every instance method is always refers to the object on which we are calling the method.</p><python>obj = MyClass()  # Create an instance\n\n# call my_method on obj\nobj.my_method(argument1, argument2, ..., argumentN)  \n</python><p>By convention, the first argument is always named <inline-code>self</inline-code>. (<inline-code>self</inline-code> is not a keyword! If we use any other name instead of <inline-code>self</inline-code>, it would not be an error.)</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"example-continued\">Example continued</h2><p>Let’s go back to the Student class:</p><ul>\n<li>Add a method <inline-code>display_info()</inline-code> that displays the information of a student i.e. prints the attributes of the instance.</li>\n</ul><p>Code available in the file <inline-code>student_example3.py</inline-code>.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-4\"></h2><div class=\"ppt-scale-1_25\"><p><span class=\"sans ppt-f70\">Understanding <inline-code>self</inline-code></span></p><iframe width=\"930\" height=\"500\" scrolling=\"no\" style=\"overflow: hidden;\" frameborder=\"0\" src=\"https://pythontutor.com/iframe-embed.html#code=class%20Student%3A%0A%20%20%20%20def%20__init__%28self,%20student_name,%20id_num%29%3A%0A%20%20%20%20%20%20%20%20self.name%20%3D%20student_name%0A%20%20%20%20%20%20%20%20self.id_num%20%3D%20id_num%0A%20%20%20%20%0A%20%20%20%20def%20display_info%28self%29%3A%0A%20%20%20%20%20%20%20%20print%28%22Name%20of%20student%3A%22,%20self.name%29%0A%20%20%20%20%20%20%20%20print%28%22Student%20ID%3A%22,%20self.id_num%29%0A%0As1%20%3D%20Student%28%22Reza%22,%2026000%29%0As1.display_info%28%29%0As2%20%3D%20Student%28%22Jane%22,%2026001%29%0As2.display_info%28%29&#x26;codeDivHeight=400&#x26;codeDivWidth=450&#x26;cumulative=false&#x26;curInstr=0&#x26;heapPrimitives=nevernest&#x26;origin=opt-frontend.js&#x26;py=3&#x26;rawInputLstJSON=%5B%5D&#x26;textReferences=false\"> </iframe></div><divider></divider></slide>","title":"9.1 — Object Oriented Programming (OOP)","date":"2024-02-26","published":true,"section":"Lecture-9.1"}},"__N_SSG":true}