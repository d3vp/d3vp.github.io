{"pageProps":{"allSlugs":[["Lecture-1",[{"title":"1 — Programming Basics","slug":"Lecture-1"}]],["Lecture-2.1",[{"title":"2.1 — Variables, Arithmetic & String operations","slug":"Lecture-2.1"}]],["Lecture-2.2",[{"title":"2.2 — Function calls, Defining functions, Types of Errors","slug":"Lecture-2.2"}]],["Lecture-3.1",[{"title":"3.1 — Order of Expression Evaluation, Comparing Values, Conditional Execution","slug":"Lecture-3.1"}]],["Lecture-3.2",[{"title":"3.2 — if statement, for loop, Indexing & Slicing Strings","slug":"Lecture-3.2"}]],["Lecture-4.1",[{"title":"4.1 — return vs. print, while statement, Modules","slug":"Lecture-4.1"}]],["Lecture-4.2",[{"title":"4.2 — String methods, break & continue statements","slug":"Lecture-4.2"}]],["Lecture-5.1",[{"title":"5.1 — Controlling print(), Nested Loops, Lists","slug":"Lecture-5.1"}]],["Lecture-5.2",[{"title":"5.2 — Scope of variables, List operations","slug":"Lecture-5.2"}]],["Lecture-6.1",[{"title":"6.1 — Tuples, Immutable objects, Sets","slug":"Lecture-6.1"}]],["Lecture-6.2",[{"title":"6.2 — More list & set operations, Dictionaries","slug":"Lecture-6.2"}]],["Lecture-7.1",[{"title":"7.1 — Iterables, Unpacking, Nested Lists","slug":"Lecture-7.1"}]],["Lecture-7.2",[{"title":"7.2 — Nested data structures, Comprehensions, Modules","slug":"Lecture-7.2"}]],["Lecture-8.1",[{"title":"8.1 — Nested list comprehensions, Reading & Writing Files","slug":"Lecture-8.1"}]],["Lecture-8.2",[{"title":"8.2 — Shallow vs. deep copy, Handling exceptions","slug":"Lecture-8.2"}]],["Lecture-9.1",[{"title":"9.1 — Object Oriented Programming (OOP)","slug":"Lecture-9.1"}]],["Lecture-9.2",[{"title":"9.2 — Keyword arguments, More on OOP","slug":"Lecture-9.2"}]],["Lecture-10.1",[{"title":"10.1 — NumPy","slug":"Lecture-10.1"}]],["Lecture-10.2",[{"title":"10.2 — More Numpy, Plotting using Matplotlib","slug":"Lecture-10.2"}]],["Lecture-11.1",[{"title":"11.1 — More Numpy, Linear algebra, Random numbers","slug":"Lecture-11.1"}]],["Lecture-11.2",[{"title":"11.2 — Interpolation, Curve fitting, Numerical Integration","slug":"Lecture-11.2"}]],["Lecture-12.1",[{"title":"12.1 — Using SciPy, System of Linear Equations","slug":"Lecture-12.1"}]],["Lecture-12.2",[{"title":"12.2 — Root Finding","slug":"Lecture-12.2"}]]],"post":{"slug":"Lecture-7.2","content":"<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"list-of-dictionaries\">List of dictionaries</h2><p>A dictionary can be used to represent a data record such as student record in a course in the following example.</p><p>A list of such dictionaries can store multiple data records.</p><python>student_records = [\n    {\"name\": \"Student-A\", \"ID\": 2601234, \"grades\": [90, 95, 100]},\n    {\"name\": \"Student-B\", \"ID\": 2601000, \"grades\": [95, 95, 97]},\n    {\"name\": \"Student-C\", \"ID\": 2605000, \"grades\": [80, 85, 90]}\n]\n\n# Each \"grades\" list has grades for 3 assignments.\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"\"></h2><p>What are assignment 1 grades for “Student-B” ?</p><python>student_records = [\n    {\"name\": \"Student-A\", \"ID\": 2601234, \"grades\": [90, 95, 100]},\n    {\"name\": \"Student-B\", \"ID\": 2601000, \"grades\": [95, 95, 97]},\n    {\"name\": \"Student-C\", \"ID\": 2605000, \"grades\": [80, 85, 90]}\n]\n\nprint(student_records[1][\"grades\"][0])  # 95\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-1\"></h2><p>Display total grade for each student.</p><python>student_records = [\n    {\"name\": \"Student-A\", \"ID\": 2601234, \"grades\": [90, 95, 100]},\n    {\"name\": \"Student-B\", \"ID\": 2601000, \"grades\": [95, 95, 97]},\n    {\"name\": \"Student-C\", \"ID\": 2605000, \"grades\": [80, 85, 90]}\n]\n\nfor record in student_records:\n    name, total_grade = record[\"name\"], sum(record[\"grades\"])\n    print(f\"Total grade for {name} is {total_grade}\")\n</python><output>Total grade for Student-A is 285\nTotal grade for Student-B is 287\nTotal grade for Student-C is 255\n</output></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"comparing-data-structures\">Comparing data structures</h2><p>Data structures — list, tuples, sets and dictionaries can be compared for equality using <inline-code>==</inline-code> and <inline-code>!=</inline-code> operators.</p><python># Lists, order matters\ngrades1 = [85, 80, 100]\ngrades2 = [85, 80, 100]\ngrades3 = [85, 100, 80]\n\n# True only when all elements are equal in order\nprint(grades1 == grades2)  # True\nprint(grades2 == grades3)  # False\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-2\"></h2><python># Comparing tuples, order matters\npoint1 = (1, 1, 2)\npoint2 = (1, 2, 1)\nprint(point1 != point2)  # True\n\n\n# Comparing sets, order does not matter\nfruits1 = {\"apple\", \"orange\", \"banana\"}\nfruits2 = {\"orange\", \"apple\",  \"banana\"}\n\n# True only when sets are of equal length and \n# both sets contain same elements\nprint(fruits1 == fruits2)  # True\nprint(fruits1 == {\"apple\", \"orange\", \"banana\", \"grapes\"})  # False\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-3\"></h2><python># Comparing dictionaries, order does not matter\nphonebook1 = {\"A\": 5140001000, \"B\": 5140002000, \"C\": 5140003000 }\nphonebook2 = { \"B\": 5140002000, \"A\": 5140001000, \"C\": 5140003000 }\n\n# True only when dictionaries are of equal length and \n# both contain same key-value pairs\nprint(phonebook1 == phonebook2)  # True\n\nprint(phonebook1 == {\"A\": 4381001000, \"B\": 5140002000, \n                     \"C\": 5140003000 })  # False\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"comparison-works-for-nested-structures-as-well\">Comparison works for nested structures as well</h2><python>points1 = [(1, 1), (2, 10)]\npoints2 = [(1, 1), (2, 10)]\nprint(points1 == points2)  # True\n\nprint(points1 == [(1, 1), (2, 5)])  # False\nprint(points1 == [(1, 1), [2, 10]])  # False\n\nstudent1 = {\"name\": \"Student-B\", \"grades\": [90, 100, 100]}\nstudent2 = {\"name\": \"Student-B\", \"grades\": [90, 100, 90]}\nprint(student1 == student2)  # False\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"enumerate-function\"><inline-code>enumerate</inline-code> function</h2><python>mylist = [10, 50, -3.14, 5]\nprint(enumerate(mylist))\n# &#x3C;enumerate object at 0x10e327100>\n\n# enumerate creates an iterable of tuples (index, element), \n# which we convert to list\nlist_of_tuples = list(enumerate(mylist))\nprint(list_of_tuples)\n# [(0, 10), (1, 50), (2, -3.14), (3, 5)]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-4\"></h2><hgrid><python>mylist = [10, 50, -3.14, 5]\n\nfor i in range(len(mylist)):\n    num = mylist[i]\n    print(i, num)\n</python><python>mylist = [10, 50, -3.14, 5]\n\nfor i, num in enumerate(mylist):\n    print(i, num)\n</python></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"list-set-and-dictionary-comprehensions\">List, set and dictionary comprehensions</h2><p>We often find ourselves repeating the following pattern to create a list.</p><p>Python provides a simpler way to create a list using list comprehension.</p><python>some_list = []\nfor i in some_iterable:\n    some_list.append(some_expression)\n\n# Using list comprehension\nsome_list = [some_expression for i in some_iterable]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-5\"></h2><python>even_nums = [i for i in range(2, 20, 2)]\nprint(even_nums)\n# [2, 4, 6, 8, 10, 12, 14, 16, 18]\n\n\n# Need not use loop variable i in the expression\nzeros = [0 for i in range(7)]\nprint(zeros)\n# [0, 0, 0, 0, 0, 0, 0]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-6\"></h2><python>import math\n\nsine_values = [math.sin(x) for x in [-math.pi/2, 0, math.pi/2]]\nprint(sine_values)\n# [-1.0, 0.0, 1.0]\n\nstring = \"10.0,20.5,100.123\"\nnumbers = [float(word) for word in string.split(\",\")]\nprint(numbers)\n# [10.0, 20.5, 100.123]\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"using-if-statement-in-list-comprehension\">Using if-statement in list comprehension</h2><python>squares_of_odds = []\nfor x in range(1, 20):\n    if x % 2 != 0:\n        squares_of_odds.append(x * x)\n\nprint(squares_of_odds)\n# [1, 9, 25, 49, 81, 121, 169, 225, 289, 361]\n\n# same as above but using list comprehension\nsquares_of_odds = [x * x for x in range(1, 20) if x % 2 != 0]\nprint(squares_of_odds)\n# [1, 9, 25, 49, 81, 121, 169, 225, 289, 361]\n\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"set-and-dictionary-comprehension\">Set and dictionary comprehension</h2><python>odd_squares = {i*i for i in range(1, 20, 2)}\nprint(odd_squares)\n# {1, 121, 225, 289, 9, 169, 361, 81, 49, 25}\n\n\nnames = [\"A\", \"B\", \"C\", \"D\"]\nnames_to_index = {name: i for i, name in enumerate(names)}\nprint(names_to_index)\n# {'A': 0, 'B': 1, 'C': 2, 'D': 3}\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"writing--importing-modules\">Writing &#x26; importing modules</h2><ul>\n<li>What are modules exactly?\n<ul>\n<li>A module is simply a Python file containing definitions and statements.</li>\n<li>Every <inline-code>.py</inline-code> file is a module. The name of the module is the name of the file.</li>\n</ul>\n</li>\n<li>Name of a Python file (module) must follow same rules as variable names.\n<ul>\n<li>Module names can only start with letters a-z, A-Z or an underscore and must only contain these letters, digits and underscores.</li>\n</ul>\n</li>\n</ul></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-7\"></h2><p>Download files-7.2.zip from Ed Lessons. It contains <inline-code>geometry.py</inline-code> and <inline-code>geometry_tester.py</inline-code></p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-8\"></h2><p>In <inline-code>geometry_tester.py</inline-code> file, we import and use the functions defined in the module <inline-code>geometry</inline-code>:</p><python># Import functions from the module\nfrom geometry import euclidean_distance, sine\n\n# Call the sine function\nprint(sine(90))\n\ndist = euclidean_distance((1, 1), (2, 3))  # tuples\nprint(dist)  # 2.23606797749979\n\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"some-observations\">Some observations</h2><ul>\n<li>When we import a module, all code inside that module is executed.</li>\n<li>Add some statement such as <inline-code>print(\"hello\")</inline-code> in <inline-code>geometry</inline-code> module outside the functions. Then,\n<ul>\n<li>Run the <inline-code>geometry.py</inline-code> as the main program</li>\n<li>Run another program which imports the module <inline-code>geometry</inline-code>.</li>\n</ul>\n</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"running-a-file-as-main-program-vs-importing-it\">Running a file as main program vs importing it</h2><ul>\n<li>Sometimes, we may want to run some code only when a Python file is executed directly as main program but not when it is imported as a module.</li>\n<li>For example, suppose we want the following test cases in <inline-code>geometry.py</inline-code>\n<python>print(sine(-90))\nprint(sine(180))\n</python>\n</li>\n<li>How to make sure the test cases do not execute when <inline-code>geometry</inline-code> is imported as a module?</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"__name__\"><inline-code>__name__</inline-code></h2><ul>\n<li><inline-code>__name__</inline-code> is a special variable that the interpreter initializes whenever it executes a file.</li>\n<li>When a module is executed, the interpreter does the following:\n<ul>\n<li>sets the value of <inline-code>__name__</inline-code> for that module using the filename</li>\n<li>executes all the code in the module.</li>\n</ul>\n</li>\n<li>Each module has its own <inline-code>__name__</inline-code> variable.</li>\n<li>Add <inline-code>print(__name__)</inline-code> in <inline-code>geometry.py</inline-code> and import <inline-code>geometry</inline-code> module in another program.</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"__main__\"><inline-code>\"__main__\"</inline-code></h2><ul>\n<li>When we execute a file as the main program, then the variable <inline-code>__name__</inline-code> is set to be <inline-code>\"__main__\"</inline-code></li>\n<li>Run <inline-code>geometry.py</inline-code> directly and see what value of <inline-code>__name__</inline-code> is printed.</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"how-to-not-execute-code-in-a-module-when-it-is-imported\">How to <i>not execute</i> code in a module when it is imported</h2><p>Add the following at the end of the file <inline-code>geometry.py</inline-code>:</p><python>if __name__ == \"__main__\":\n    # Run the following code only when this file is \n    # executed as main program but not when it is imported\n    print(\"hello from geometry!\")\n    print(sine(-90))\n    print(sine(180))\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-9\"></h2><greenbox><p>Time for some problems on Ed Lessons.</p></greenbox><divider></divider></slide>","title":"7.2 — Nested data structures, Comprehensions, Modules","date":"2024-02-12","published":true,"section":"Lecture-7.2"}},"__N_SSG":true}