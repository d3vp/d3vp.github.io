{"pageProps":{"titles":["2.1 — Programming Basics","2.2 — Variables, Arithmetic & String operations","2.3 — Function Calls, Expressions","3.1 — Defining functions, Errors & Debugging","3.2 — Boolean Expressions, Comparison & Logical Operators","3.3 — Conditional execution using if statement","3.4 — for loop & String indexing, slicing","Python Style Guide"],"slugs":["Lecture-2.1","Lecture-2.2","Lecture-2.3.1","Lecture-3.1","Lecture-3.2","Lecture-3.3","Lecture-3.4","style-guide"],"post":{"title":"2.3 — Function Calls, Expressions","slug":"Lecture-2.3.1","content":"<h1>Function calls</h1>\n<p>Function take zero or more input values, perform an action or computation, and return the result value.</p>\n<p>Input values passed to a function are called <sc>arguments</sc>.</p>\n<p>A <sc>Function Call</sc> is an expression that looks like below:</p>\n<div class=\"center code my3\"><p><span class=\"bgblue p1 br5\">function_name(argument1, argument2, …, argumentN)</span></p></div>\n<p>How do we say it? — function “takes” argument(s) and “returns” a result.<br>\nThe result is also called the <sc>return value</sc>.</p>\n<p>The number of arguments required by a function depends on how that function is defined.</p>\n<p>Following are some built-in functions available in Python:</p>\n<python># min() function takes 2 or more numbers and returns minimum of those\nx = min(1, -4, 6)\nprint(x)  # -4\n\n# abs() function takes one number and returns absolute value of the number\ny = abs(-6)\nprint(y)  # 6\n\n# Gives an error if we do not give exactly one number\nz = abs(-1, 4)\n# TypeError: abs() takes exactly one argument (2 given)\n</python>\n<h2>Function composition</h2>\n<p>Function composition is applying or calling one function with the result of another function.</p>\n<p>It is a very useful thing to do especially when we do need to store intermediate results.</p>\n<p>Compare the following two examples:</p>\n<div class=\"flex\"><div class=\"flexc\"><div class=\"b\">Using intermediate variables</div><python>x = -5\ny = -8\nabs_x = abs(x)\nabs_y = abs(y)\nz = min(abs_x, abs_y)\nprint(x, y, z)\n</python></div><div class=\"flexc\"><div class=\"b\">Using composition</div><python>x = -5\ny = -8\nz = min(abs(x), abs(y))\nprint(x, y, z)\n</python></div></div>\n<h1>Expressions vs Statements</h1>\n<p>An <sc>Expression</sc> is any valid combination of values, variables, operators, function calls.</p>\n<p>When executed, it always evaluates to a single object.</p>\n<python>x = 3\ny = 4\nz = x ** 2 + y ** 2  # this expression evaluates to an int object\nprint(z)  # 25\n\ns = \"hello\"\ns2 = s * len(s) # this expression evaluates to str value\nprint(s2)  # hellohellohellohellohello\n\n</python>\n<p>A statement is one or more lines of code that performs an action but does not evaluate to any value.</p>\n<p>So, statements cannot be used as a part of an expression.</p>\n<python>>>> x = 123  # Assignment statement does not evaluate to anything so nothing shows below\n>>> x  # This is an trivially an expression\n123\n>>> 10 + (x = 123)  # Trying to use assignment statement in an expression\n    10 + (x = 123)\n            ^\nSyntaxError: invalid syntax\n</python>\n<h2>Order of Expression Evaluation</h2>\n<p>When we have different operators the same expression, which operator should apply first?.</p>\n<p>All Python operators have a <sc>precedence</sc> and <sc>associativity</sc>:</p>\n<ul>\n<li>Precedence — for two different kinds of operators, which should be applied first?</li>\n<li>Associativity — for two operators with the same precedence, which should be applied first?</li>\n</ul>\n<p>Table below show operators from higher precedence to lower.</p>\n<div class=\"my2\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Operator</th><th>Associativity</th></tr></thead><tbody><tr><td><inline-code>()</inline-code> (parentheses)</td><td>-</td></tr><tr><td><inline-code>**</inline-code></td><td>Right</td></tr><tr><td>Unary <inline-code>-</inline-code></td><td>-</td></tr><tr><td><inline-code>*</inline-code>, <inline-code>/</inline-code>, <inline-code>//</inline-code>, <inline-code>%</inline-code></td><td>Left</td></tr><tr><td>Binary <inline-code>+</inline-code>, <inline-code>-</inline-code></td><td>Left</td></tr><tr><td><inline-code>=</inline-code> (assignment)</td><td>Right</td></tr></tbody></table></div>\n<python>x = 3\ny = 5\n# Multiplication has higher precedence than addition\nz = x + 2 * y + 1  \nprint(z)  # 14\n\n# Need to use parentheses to enforce the order we want\nz = (x + 2) * (y + 1)\nprint(z)  # 30\n\n# Same precedence so left to right\nz = x * y / 100  \nprint(z)  # 0.15\n\n# Same as 2 ** (3 ** 2) because \"**\" goes right to left\nz = 2 ** 3 ** 2\nprint(z)  # 512\n\n# Using parentheses to enforce the order we want\nz = (2 ** 3) ** 2  \nprint(z)  # 64\n\nx = 5\nx = x + 1  # addition happens first and then assignment\nprint(x)  # 6\n\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}