{"pageProps":{"titles":["Week 1 — Computer and Programming Basics","Week 2 — Types, Variables, Expressions, Functions","Sep 9-10 Problem Set 2","Week 3 —  Conditionals & Iteration","Sep 16-17 Problem Set","Week 4 —  print(), String methods, while loop","Python Style Guide","Sep 23-24 Problem Set","Week 5 —  Scope of variables, Lists & Tuples","Sep 30-Oct 1 Problem Set","Week 6 —  Immutability, Dictionary & Set","Oct 7-8 Problem Set","Week 7 —  Nested data structures, iterables, comprehensions","Week 8 —  Exceptions & File IO"],"slugs":["Lecture-1.2","Lecture-week2","_Sep09-problem-set","Lecture-week3","_Sep16-17-problem-set","Lecture-week4","style-guide","_Sep23-24-problem-set","Lecture-week5","_Sep30-Oct1-problem-set","Lecture-week6","_Oct7-8-problem-set","Lecture-week7","Lecture-week8"],"post":{"title":"Week 2 — Types, Variables, Expressions, Functions","slug":"Lecture-week2","content":"<h1>Thonny Demo — Editor vs Shell</h1>\n<p>Python interpreter can work in an interactive or <i>shell</i> mode in which lines of code are executed immediately as soon as they are entered and output is visible immediately.</p>\n<p>Shell mode is apparent whenever you see the prompt <inline-code>>>></inline-code>.</p>\n<p>In <i>Script</i> mode, a Python file (<inline-code>.py</inline-code>) is executed by interpreter as a program (whole file, not line-by-line).</p>\n<p>Thonny allows us to use both modes.</p>\n<h1>Objects and Data Types</h1>\n<p>All data in a Python program is represented by <sc>objects</sc>. An object always has a <sc>type</sc> (or <sc>class</sc>) associated with it.</p>\n<python>>>> 5\n5\n>>> 3.1415\n3.1415\n>>> \"Hello\"\n'Hello'\n\n# Using type() function to know the type of objects\n>>> type(5)\n&#x3C;class 'int'>\n>>> type(3.1415)\n&#x3C;class 'float'>\n>>> type(\"Hello\")\n&#x3C;class 'str'>\n</python>\n<p>An object’s type determines the operations that the object supports:</p>\n<python>#  objects of int type can be added using +\n>>> 10 + 5\n15\n\n# But an object of type str cannot be added to an int using +\n>>> \"Hello\" + 5\nTraceback (most recent call last):\n  File \"&#x3C;pyshell>\", line 1, in &#x3C;module>\nTypeError: can only concatenate str (not \"int\") to str\n</python>\n<h2>Summary</h2>\n<p>We saw the three basic data types in Python:</p>\n<ul>\n<li><inline-code>int</inline-code>: Integers such as <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">..., -1, 0, 1, 2, ...</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span></span></span></span></span></li>\n<li><inline-code>float</inline-code>: Floating-point numbers such as <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>1.2</mn><mo separator=\"true\">,</mo><mn>3.14</mn><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">-1.2, 3.14,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">4</span><span class=\"mpunct\">,</span></span></span></span></span> etc.</li>\n<li><inline-code>str</inline-code>: Text data (a sequence of characters) such as “hello world”, “Python”, etc.</li>\n</ul>\n<p>The terms <sc>Object</sc> and <sc>Value</sc> are used interchangeably.<br>\nSo are the terms <sc>Class</sc> and <sc>Type</sc>.</p>\n<h1>Comments</h1>\n<p>Comments are annotations we add to our program and are ignored by the Python interpreter.</p>\n<p>In Python, we start a comment using <inline-code>#</inline-code>.</p>\n<p>A comment can appear on a line by itself or at the end of a line.</p>\n<p>We use comments to:</p>\n<ul>\n<li>Make the code easier to read and understand by explaining how it works.</li>\n<li>Indicate authorship and license.</li>\n<li>Disable some code (prevent it from executing) but still keeping it in the file.</li>\n</ul>\n<python># Author: Deven\n# My first program\n\n# This is a comment on its own line &#x26; it will be ignored\nprint(\"Hello, world!\")  # str\nprint(123)  # int\nprint(1.614)  # float \n</python>\n<p>In Thonny, we can use <inline-code>Edit menu -> Toggle comment</inline-code> to comment/uncomment the selected lines.</p>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>Variables</h1>\n<p>In Python, a <sc>Variable</sc> is a name that refers to an object in computer memory.<br>\nA variable can be created using <sc>Assignment Statement</sc>:</p>\n<div class=\"center code my3\"><p><span class=\"bgblue p1 br5\">variable_name = value</span></p></div>\n<p><inline-code>=</inline-code> is known as the <sc>assignment operator</sc>.</p>\n<python># create a variable and assign it value 20\ntemperature = 20  \n\n# variable temperature refers to 20 which is displayed\nprint(\"Today's temperature is\", temperature)\n\n# show type of the variable\nprint(\"Type of temperature variable is\", type(temperature))\n</python>\n<output>Today's temperature is 20\nType of temperature variable is &#x3C;class 'int'>\n</output>\n<h1>Arithmetic with numbers</h1>\n<p>Calculations with numbers can be done using <i>arithmetic operators</i>.</p>\n<python># Addition\nprint(1.5 + 1.5) # 3.0\n\n# Subtraction\nprint(10 - 20)  # -10\n\n# Multiplication\nprint(42 * 42)  # 1764\n\n# Division\nprint(1 / 5)  # 0.2\n\n# Exponentiation (x to the power of y)\nprint(2 ** 16)  # 65536\n\n\ntemperature = 20\n# Unary minus operator\nprint(-temperature)  # -20\n\n\n# Computing rest mass energy of an electron\nrest_mass = 9.109e-31  # Using scientific notation for floating point numbers\nspeed_of_light = 3e8\nrest_mass_energy = rest_mass * (speed_of_light ** 2)  # E = mc^2\nprint(rest_mass_energy)  # 8.198099999999999e-14\n</python>\n<h2>Floor division and remainder</h2>\n<img src=\"module-2/divmod.svg\" style=\"margin:2em;\">\n<python># floor division\nprint(20 // 3)  # 6\n\n# remainder\nprint(20 % 3)  # 2\n\n\n# Converting seconds to minutes\n\nduration = 320\nprint(duration, \"seconds equal\", duration / 60, \"minutes.\")\n# 320 seconds equal 5.333333333333333 minutes.\n \n# Alternative approach:\nminutes = duration // 60\nseconds = duration % 60\nprint(duration, \"seconds equal\", minutes, \"minutes and\", seconds, \"seconds.\")\n# 320 seconds equal 5 minutes and 20 seconds.\n</python>\n<h2>Result type of arithmetic operations</h2>\n<p>For all operators (except division <inline-code>/</inline-code>):</p>\n<ul>\n<li>if one or more of the operands are of type <inline-code>float</inline-code>, result value will have type <inline-code>float</inline-code></li>\n<li>if both operands are of type <inline-code>int</inline-code>, result value will have type <inline-code>int</inline-code>.</li>\n</ul>\n<p>For division operator <inline-code>/</inline-code>:</p>\n<ul>\n<li>the result value is always of type <inline-code>float</inline-code> regardless of whether the operands are of type <inline-code>int</inline-code> or <inline-code>float</inline-code>.</li>\n</ul>\n<python>x = 2 + 1\nprint(x, type(x))  # 3 &#x3C;class 'int'>\n\nx = 2 + 1.0\nprint(x, type(x))  # 3.0 &#x3C;class 'float'>\n\n# Classic division always results in float\nx = 1 / 2  \nprint(x, type(x))  # 0.5 &#x3C;class 'float'>\n\n</python>\n<div class=\"px2 py1 my2\" style=\"border: solid 1px lightgray; border-radius:5px; background-color: #d6efd6;\"><p><b class=\"p0\">Try the above examples with other operators!</b></p></div>\n<h1>Function calls</h1>\n<p>Function take zero or more input values, perform an action or computation, and return the result value.</p>\n<p>Input values passed to a function are called <sc>arguments</sc>.</p>\n<p>A <sc>Function Call</sc> is an expression that looks like below:</p>\n<div class=\"center code my3\"><p><span class=\"bgblue p1 br5\">function_name(argument1, argument2, …, argumentN)</span></p></div>\n<p>How do we say it? — function “takes” argument(s) and “returns” a result.<br>\nThe result is also called the <sc>return value</sc>.</p>\n<p>The number of arguments required by a function depends on how that function is defined.</p>\n<p>Following are some built-in functions available in Python:</p>\n<python># min() function takes 2 or more numbers and returns minimum of those\nx = min(1, -4, 6)\nprint(x)  # -4\n\n# abs() function takes one number and returns absolute value of the number\ny = abs(-6)\nprint(y)  # 6\n\n# Gives an error if we do not give exactly one number\nz = abs(-1, 4)\n# TypeError: abs() takes exactly one argument (2 given)\n</python>\n<h1>Function composition</h1>\n<p>Function composition is applying or calling one function with the result of another function.</p>\n<p>It is a very useful thing to do especially when we do need to store intermediate results.</p>\n<p>Compare the following two examples:</p>\n<div class=\"flex\"><div class=\"flexc\"><div class=\"b\">Using intermediate variables</div><python>x = -5\ny = -8\nabs_x = abs(x)\nabs_y = abs(y)\nz = min(abs_x, abs_y)\nprint(x, y, z)\n</python></div><div class=\"flexc\"><div class=\"b\">Using composition</div><python>x = -5\ny = -8\nz = min(abs(x), abs(y))\nprint(x, y, z)\n</python></div></div>\n<h1>Converting types explicitly</h1>\n<p>Sometimes we need to convert <inline-code>int</inline-code> to/from <inline-code>float</inline-code> or round a number to desired precision.</p>\n<python># truncate fractional part using int() function\nprice = 100.6\nprint(int(price))  # 100\n\n# round to nearest int (price to nearest dollar)\nprice = 100.679\nprint(round(price))  # 101\n\n# round to two digits after decimal (price to nearest cent)\nprint(round(price, 2))  # 100.68\n\n# convert int to float (e.g. to show zero cents)\nprice = 100\nprint(float(price))  # 100.0\n</python>\n<div class=\"px2 py1 my2\" style=\"border: solid 1px lightgray; border-radius:5px; background-color: #d6efd6;\"><p><b>Question</b></p><p>Write a program that converts 85 degrees Fahrenheit to Celsius and displays the results.</p><p><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mo>=</mo><mfrac><mrow><mn>5</mn><mo stretchy=\"false\">(</mo><mi>f</mi><mo>−</mo><mn>32</mn><mo stretchy=\"false\">)</mo></mrow><mn>9</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">c = \\frac{5(f-32)}{9}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.355em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">9</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">5</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">3</span><span class=\"mord mtight\">2</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p></div>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>Basic string operations</h1>\n<p>Strings are sequences of zero or more characters.</p>\n<p>In Python, strings are enclosed by either single or double quotes.</p>\n<python>\"Hello\"\n'everyone!'\n\"I'm Batman.\"  # single quote allowed inside double quotes,\n'You can call me \"Bruce\".'  # and vice versa.\n'123' # this is a string, not a number!\n\"\" # this is an empty string\n\" \" # this is a string with just one space\n\n# a multi-line string using triple quotes\n\"\"\"The woods are lovely, dark and deep,   \nBut I have promises to keep,   \nAnd miles to go before I sleep,   \nAnd miles to go before I sleep.\n\"\"\"\n\n# We can also use single quotes for multi-line strings\n'''I hold it true, whate'er befall;\nI feel it when I sorrow most;\n'Tis better to have loved and lost\nThan never to have loved at all.\n'''\n</python>\n<h2>String concatenation</h2>\n<p>Strings can be joined with <inline-code>+</inline-code> operator.</p>\n<python>message = \"Hello\" + \"everyone\"\nprint(message)  # Helloeveryone\n\nname = \"Alice\"\nmessage = \"Hello \" + name\nprint(message)  # Hello Alice\n\n# Result is a string \"123\" and not the number 6\nstring = \"1\" + \"2\" + \"3\"\nprint(string)  # 123\n\nprice = 100\nprint(price + \" USD\")\n# TypeError: unsupported operand type(s) for +: 'int' and 'str'\n\n</python>\n<h2>String repetition</h2>\n<p>String can be repeated multiple times using <inline-code>*</inline-code> operator.</p>\n<python>print(\"Welcome! \" * 3)  # 'Welcome! Welcome! Welcome! '\n\nprint(4 * \"ha\")  # 'hahahaha'\n\n</python>\n<h2>String length</h2>\n<p>The function <inline-code>len()</inline-code> returns length of its argument string.</p>\n<python>password = \"xyz1234\"\nprint(\"Password length:\", len(password))\n# Password length: 7\n\nprint(len(1234))\n# TypeError: object of type 'int' has no len()\n\n</python>\n<h2>Converting string to/from numbers</h2>\n<p>This is useful for</p>\n<ul>\n<li>Reading/writing text files because data will also be stored as text in a file.</li>\n<li>Reading user input from keyboard, which will also be in text form.</li>\n</ul>\n<python># float to str\ns = str(1.718)  \nprint(s, type(s))  # 1.718 &#x3C;class 'str'>\n\n# int to str\ns = str(-42)  \nprint(s, type(s))  # -42 &#x3C;class 'str'>\n\n# int to str, then join strings\nprice = 100\nmessage = str(price) + \" USD\"\nprint(message, type(message))  # 100 USD &#x3C;class 'str'>\n\n# str to int\nx = int(\"3370\")  \nprint(x, type(x))  # 3370 &#x3C;class 'int'>\n\n# str to float\nx = float(\"1.35\")  \nprint(x, type(x))  # 1.35 &#x3C;class 'float'>\n\n\n# error because int cannot have decimal point\nx = int(\"1.35\")  \n# ValueError: invalid literal for int() with base 10: '1.35'\n\n# error because of letter other than digits\nx = int(\"123x\")  \n# ValueError: invalid literal for int() with base 10: '123x'\n\n# contains letter other than digits\nx = float(\"1.35x\")  \n# ValueError: could not convert string to float: '1.35x'\n\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>Getting user input</h1>\n<p>We use <inline-code>input()</inline-code> function to ask for  input data from keyboard.</p>\n<python>number = input(\"Please enter your favorite number: \")\n\nprint(\"You entered:\", number)\n\nprint(\"Your number squared is\", number ** 2)\n</python>\n<output>>>> %Run week2.py\nPlease enter your favorite number: 7\nYou entered: 7\nTypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'\n</output>\n<p>How to fix the error in the above program? — Convert string to number!</p>\n<python>input_string = input(\"Please enter your favorite number: \")\nnumber = int(input_string)\n</python>\n<p>Or in a single line:</p>\n<python>number = int(input(\"Please enter your favorite number: \"))\n</python>\n<div class=\"px2 my2\" style=\"border: solid 1px lightgray; border-radius:5px; background-color: #d6efd6;\"><p>What if you enter a number of decimal point? How will you fix the error?</p></div>\n<h1>More on Variables</h1>\n<h2>Variables allow “saving” intermediate results of a computation</h2>\n<p>Consider the question from above:</p>\n<python># convert fahrenheit to celsius\nprint(\"10 F in C is\", 5 * (10 - 32) / 9)\n</python>\n<p>We can use variable to store the result so that we can reuse it in the program later.</p>\n<python>\n# Using variable fahrenheit, now we just change value here\n# instead of changing it in the formula below\nfahrenheit = 10\n\n# Store the result of the expression\ncelsius = 5 * (fahrenheit - 32) / 9\n\nprint(fahrenheit, \"F in C is\", celsius)\n\n# Use variable celsius for more calculations\nprint(\"Adding 10 degrees today:\", celsius + 10)\n</python>\n<h2>Variables can be reassigned new values</h2>\n<python># Create variable name \"number\" and assign a value to it\nnumber = 123  \nprint(number)  # displays 123\n\n# Assign new value to existing variable \"number\"\nnumber = -50\n\nprint(number)  # displays -50\n\n# add 10 and assign the result value to existing variable \"number\"\nnumber = number + 10\n\nprint(number)  # displays -40\n</python>\n<p>New values can be of different type.</p>\n<div style=\"margin-top: 2em; margin-bottom: 2em; width: 1000;\">\n<iframe width=\"1000\" height=\"500\" frameborder=\"0\" src=\"https://pythontutor.com/iframe-embed.html#code=number%20%3D%20123%20%20%23%20an%20int%20value%0Amessage%20%3D%20%22hello%22%20%20%23%20a%20string%0A%0Aprint%28number,%20type%28number%29%29%0Aprint%28message,%20type%28message%29%29%0A%0A%23%20Now%20variable%20number%20refers%20to%20the%20string%20%22hello%22%0Anumber%20%3D%20message%0A%0Aprint%28number,%20type%28number%29%29%0Aprint%28message,%20type%28message%29%29%0A&#x26;codeDivHeight=400&#x26;codeDivWidth=350&#x26;cumulative=false&#x26;curInstr=0&#x26;heapPrimitives=true&#x26;origin=opt-frontend.js&#x26;py=3&#x26;rawInputLstJSON=%5B%5D&#x26;textReferences=false\"> </iframe>\n</div>\n<p>However, variables should be changed with caution as it can produce errors or strange results.</p>\n<python>number = 123  # an int value\nmessage = \"hello\"  # a string\n\n\n# Now variable number refers to the string \"hello\"\nnumber = message\n\nprint(number * 2) # String repetition!\n\nprint(number - 10) # minus won't work with string.\n</python>\n<output>hellohello\nTraceback (most recent call last):\n    print(number - 10)\nTypeError: unsupported operand type(s) for -: 'str' and 'int'\n</output>\n<h2>Example: Swapping values</h2>\n<p>Sometimes we need to swap (interchange) values of two variables.</p>\n<p>A naive attempt (which does not work):</p>\n<python>x = 137\ny = 42\n\n# Try swapping\nx = y\ny = x\n\nprint(x, y)  # 42 42\n</python>\n<p>The following will work:</p>\n<python>x = 137\ny = 42\n\n# Correct way to swap\ntemp = x\nx = y\ny = temp\n\nprint(x, y)  # 42 137\n</python>\n<h2>Rules for variable names</h2>\n<ul>\n<li>A variable name can only contain alpha-numeric characters and underscores <inline-code>A-Z, a-z, 0-9, _</inline-code></li>\n<li>A variable name cannot start with a number</li>\n<li>Variable names are case-sensitive\n<ul>\n<li>(<inline-code>cat</inline-code>, <inline-code>Cat</inline-code>, and <inline-code>CAT</inline-code> are three different variables)</li>\n</ul>\n</li>\n<li>They cannot be keywords.\n<ul>\n<li>Python has 33 reserved keywords, you can see a list of them by typing <inline-code>help(\"keywords\")</inline-code> in the Python shell.</li>\n</ul>\n</li>\n</ul>\n<div class=\"px2 my2\" style=\"border: solid 1px lightgray; border-radius:5px; background-color: #d6dcef;\"><p>Python files should be named using the same rules as above.</p></div>\n<h2>Good practice for naming variables</h2>\n<ul>\n<li>Name your variable something descriptive of its purpose or content.</li>\n<li>If the variable is one word, all letters should be lowercase. Eg: <inline-code>hour</inline-code>, <inline-code>day</inline-code>.</li>\n<li>If the variable contains more than one word, then they should all be lowercase and each separated by an underscore. This is called <i>snake case</i>.<br>\ne.g. <inline-code>is_sunny</inline-code>, <inline-code>cat_name</inline-code></li>\n<li>Good variable names: <inline-code>hour</inline-code>, <inline-code>is_open</inline-code>,  <inline-code>number_of_books</inline-code>, <inline-code>course_code</inline-code></li>\n<li>Bad variable names: <inline-code>asfdstow</inline-code>, <inline-code>nounderscoreever</inline-code>, <inline-code>ur_stupid</inline-code>, <inline-code>CaPiTAlsANyWHErE</inline-code></li>\n</ul>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>Expressions vs Statements</h1>\n<p>An <sc>Expression</sc> is any valid combination of values, variables, operators, function calls.</p>\n<p>When executed, it always evaluates to a single object.</p>\n<python>x = 3\ny = 4\nz = x ** 2 + y ** 2  # this expression evaluates to an int object\nprint(z)  # 25\n\ns = \"hello\"\ns2 = s * len(s) # this expression evaluates to str value\nprint(s2)  # hellohellohellohellohello\n\n</python>\n<p>A statement is one or more lines of code that performs an action but does not evaluate to any value.</p>\n<p>So, statements cannot be used as a part of an expression.</p>\n<python>>>> x = 123  # Assignment statement does not evaluate to anything so nothing shows below\n>>> x  # This is an trivially an expression\n123\n>>> 10 + (x = 123)  # Trying to use assignment statement in an expression\n    10 + (x = 123)\n            ^\nSyntaxError: invalid syntax\n</python>\n<h2>Order of Expression Evaluation</h2>\n<p>When we have different operators the same expression, which operator should apply first?.</p>\n<p>All Python operators have a <sc>precedence</sc> and <sc>associativity</sc>:</p>\n<ul>\n<li>Precedence — for two different kinds of operators, which should be applied first?</li>\n<li>Associativity — for two operators with the same precedence, which should be applied first?</li>\n</ul>\n<p>Table below show operators from higher precedence to lower.</p>\n<div class=\"my2\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Operator</th><th>Associativity</th></tr></thead><tbody><tr><td><inline-code>()</inline-code> (parentheses)</td><td>-</td></tr><tr><td><inline-code>**</inline-code></td><td>Right</td></tr><tr><td>Unary <inline-code>-</inline-code></td><td>-</td></tr><tr><td><inline-code>*</inline-code>, <inline-code>/</inline-code>, <inline-code>//</inline-code>, <inline-code>%</inline-code></td><td>Left</td></tr><tr><td>Binary <inline-code>+</inline-code>, <inline-code>-</inline-code></td><td>Left</td></tr><tr><td><inline-code>=</inline-code> (assignment)</td><td>Right</td></tr></tbody></table></div>\n<python>x = 3\ny = 5\n# Multiplication has higher precedence than addition\nz = x + 2 * y + 1  \nprint(z)  # 14\n\n# Need to use parentheses to enforce the order we want\nz = (x + 2) * (y + 1)\nprint(z)  # 30\n\n# Same precedence so left to right\nz = x * y / 100  \nprint(z)  # 0.15\n\n# Same as 2 ** (3 ** 2) because \"**\" goes right to left\nz = 2 ** 3 ** 2\nprint(z)  # 512\n\n# Using parentheses to enforce the order we want\nz = (2 ** 3) ** 2  \nprint(z)  # 64\n\nx = 5\nx = x + 1  # addition happens first and then assignment\nprint(x)  # 6\n\n</python>\n<h1>Types of Errors</h1>\n<p><b>Syntax Errors</b>: When syntax is incorrect such as wrong punctuations, invalid characters, missing quotes or parentheses etc.<br>\nProgram does not run at all in the case of syntax errors.</p>\n<python># The following code has Syntax error due to missing double-quotes:\nx = 5\nprint(\"Square of x is)\nprint(x ** 2)\n</python>\n<p><b>Runtime Errors</b>, also called <sc>Exceptions</sc>, occur when there is a problem in the program during execution.<br>\nAll code executes until an exception occurs.</p>\n<python># The following code has Syntax error due to missing double-quotes:\nx = 5\nprint(\"Square of x is\")\nprint(y ** 2)\n</python>\n<p><b>Semantic</b> or Logic errors are said to occur when a program executes without a problem but does not produce correct output as expected.</p>\n<p><sc>Debugging</sc> is the process of finding and removing errors in a program.</p>\n<h1>Using debugging in Thonny for better understanding order of evaluation</h1>\n<p>In Thonny, we can use debugging features to understand how expressions are evaluated:</p>\n<ul>\n<li>To show variables and their values, go to menu “View -> Variables”</li>\n<li>First, run program in <i>debug mode</i> by clicking the “Debug current script” button (located next to the “Run current script” button and looks like a bug)</li>\n<li>Then, we have two options:\n<ul>\n<li>Run the program line-by-line using “Step over” button next to the “Debug” button</li>\n<li>Run program going inside each expression using “Step into” button (located next to “Step over” button)</li>\n</ul>\n</li>\n</ul>\n<p>Try the following code in Thonny and use debug:</p>\n<python>x = 7\n\n# Increment value of variable x by 1\nx = x + 1\n\n#\ny = x * x + 2 * (x + 1) + max(x + 1, 5)\n\n# Calling print() with 4 arguments\nprint(\"x =\", x, \"y =\", y)\n\n\nmessage = \"Hello\"\n\n# Calling print() with 1 argument\nprint(\"+\" + \"-\" * (len(message) + 6) + \"+\")\n\n# Calling print() with 3 arguments\nprint(\"+\", \"-\" * (len(message) + 6), \"+\")\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>Defining a function</h1>\n<p>A function is a <i>named</i> block of code that performs a task.</p>\n<p>So far we have been using (calling) functions to do specific tasks — <inline-code>print()</inline-code>, <inline-code>input()</inline-code>, etc.</p>\n<p>We can also define/create our own function:</p>\n<python>\ndef function_name(argument1, argument2, ..., argumentN):  # function header\n    # function body\n    statement1\n    statement2\n    .\n    .\n    statementN\n</python>\n<ul>\n<li>\n<p><inline-code>def</inline-code> is a Python keyword used to define functions</p>\n</li>\n<li>\n<p>Notice how statements are indented by spaces, typically 4 spaces. In Thonny, we can just use tab key once to indent by 4 spaces.</p>\n</li>\n<li>\n<p>When we define a function using <inline-code>def</inline-code> keyword:</p>\n<ul>\n<li>it is not executed.</li>\n<li>Only the function name is created, which refers to the code block inside the function.</li>\n</ul>\n</li>\n<li>\n<p>When we call a function, the code block inside the function is <i>actually</i> executed.</p>\n</li>\n</ul>\n<h2>Function with no arguments</h2>\n<p>Such functions always do the same thing each time they are executed.</p>\n<div class=\"flex\"><python># Define the function\ndef display_greeting():\n    print(\"+------------+\")\n    print(\"|  Welcome!  |\")\n    print(\"+------------+\")\n\n# Call the function\ndisplay_greeting()\n\n# Call it again\ndisplay_greeting()\n</python><output>+------------+\n|  Welcome!  |\n+------------+\n+------------+\n|  Welcome!  |\n+------------+\n</output></div>\n<h2>Functions with arguments and return value</h2>\n<p>A function can return a value using <inline-code>return</inline-code> statement.</p>\n<python># Function that evaluates a polynomial\ndef f(x):\n    return x * x - x - 1\n\n# Equivalently,\n# def f(x):\n#     result = x * x - x - 1\n#     return result\n\n# Call the function f\ny = f(5)\nprint(y)  # 19\n\n# Call again with different argument\ny = f(10)\nprint(y)  # 89\n\n\n# we can have more than one argument\ndef mean(x, y):\n    return (x + y) / 2\n\n\nprint(mean(3, 4))  # 3.5\n\nprint(mean(f(5), f(10)))  # 54.0\n</python>\n<h2>A common mistake</h2>\n<ul>\n<li>Parentheses <inline-code>()</inline-code> are required to call a function. Omitting them is a mistake.</li>\n</ul>\n<python>def f(x):\n    return x * x - x - 1\n\n# f is a function\ny = f  # this does not call the function f\nprint(y)  # &#x3C;function f at 0x10178dee0>\n\n# f(3) is a function call\ny = f(3)  # this calls the function f, which returns a number\nprint(y)  # 5\n\n</python>\n<h2>Why create our own functions?</h2>\n<ul>\n<li>Functions allow code re-use; duplication of code can be avoided.</li>\n<li>They help organize code into sections, which makes programs easier to read and understand</li>\n<li>They make programs easier to fix</li>\n</ul>\n<h1>Importing modules</h1>\n<p>A <sc>module</sc> is a Python file (typically a <inline-code>.py</inline-code> file) containing definitions and statements.</p>\n<p>Many modules such as <inline-code>math</inline-code> are already installed with Python.</p>\n<h2><inline-code>import</inline-code> statement</h2>\n<p>We use code inside a module by <i>importing</i> the module.\nWe import a module using <inline-code>import</inline-code> statement:</p>\n<python>import math\n\n# Now we can use the module by its name—math—\n\n# We can call functions inside the module using dot operator\nx = math.sqrt(16)\nprint(x)\n\ny = math.sin(math.pi / 2)\nprint(y)\n</python>\n<p>Another way of using a module is to import functions/variables from the module:</p>\n<python>from math import sqrt, sin, pi\n\n# Now, we can call sqrt and sin without the \"math.\" prefix\nx = sqrt(16)\nprint(x)\n\ny = sin(pi / 2)\nprint(y)\n</python>\n<p>Use <inline-code>help()</inline-code> function in Python Shell to see list of all function contained in <inline-code>math</inline-code> module:</p>\n<python>>>> import math\n>>> help(math) # will display a long doc, not showing here\n\n>>> help(math.sqrt) # show help on a specific function\nHelp on built-in function sqrt in module math:\n\nsqrt(x, /)\n    Return the square root of x.\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}