{"pageProps":{"titles":["L1.1 — Computer and Programming Basics","L1.2 — Variables & Expressions","L2.1 — Control Flow Statements","Python Style Guide","May 14 — Problem Set","L2.2 — print(), String methods & while loop","May 17 — Problem Set","L3.1 — More loops & Defining functions","May 19 — Problem Set","L3.2 — Lists","May 21 — Problem Set","L4.1 — Tuples, Dictionaries, Sets","May 26 — Problem Set","May 28 — Problem Set","L4.2 — Nested data structures","June 2 — Problem Set","June 4 — Problem Set","L5.1 — Handling Exceptions, File IO","L5.2 — Comparing data structures, Writing modules, Matplotlib"],"slugs":["Lecture-1.1","Lecture-1.2","Lecture-2.1","style-guide","_May14-problem-set","Lecture-2.2","_May17-problem-set","Lecture-3.1","_May19-problem-set","Lecture-3.2","_May21-problem-set","Lecture-4.1","_May26-problem-set","_May28-problem-set","Lecture-4.2","_June2-problem-set","_June4-problem-set","Lecture-5.1","Lecture-5.2"],"post":{"title":"L5.2 — Comparing data structures, Writing modules, Matplotlib","slug":"Lecture-5.2","content":"<h1>Comparing data structures</h1>\n<p>Data structures — list, tuples, sets and dictionaries can be compared for equality using <inline-code>==</inline-code> operator.</p>\n<python># Lists, order matters\n>>> grades1 = [85, 80, 100]\n>>> grades2 = [85, 80, 100]\n>>> grades3 = [85, 100, 80]\n\n# True only when all elements are equal in order\n>>> grades1 == grades2\nTrue\n>>> grades2 == grades3\nFalse\n\n\n# tuples, order matters\n>>> point1 = (1, 1, 2)\n>>> point2 = (1, 2, 1)\n>>> point1 != point2\nTrue\n\n\n# sets, order does not matter\n>>> fruits1 = {\"apple\", \"orange\", \"banana\"}\n>>> fruits2 = {\"orange\", \"apple\",  \"banana\"}\n\n# True only when sets are of equal length and both sets contain same elements\n>>> fruits1 == fruits2\nTrue\n>>> fruits1 == {\"apple\", \"orange\", \"banana\", \"grapes\"}\nFalse\n\n# dictionaries, order does not matter\n>>> phonebook1 = {\"A\": 5140001000, \"B\": 5140002000, \"C\": 5140003000 }\n>>> phonebook2 = { \"B\": 5140002000, \"A\": 5140001000, \"C\": 5140003000 }\n\n# True only when dictionaries are of equal length and \n# both contain same key-value pairs\n>>> phonebook1 == phonebook2\nTrue\n>>> phonebook1 == {\"A\": 4381001000, \"B\": 5140002000, \"C\": 5140003000 }\nFalse\n\n\n# Works for nested structures as well\n>>> points1 = [(1, 1), (2, 10)]\n>>> points2 = [(1, 1), (2, 10)]\n>>> points1 == points2\nTrue\n>>> points1 == [(1, 1), (2, 5)]\nFalse\n\n>>> student1 = {\"name\": \"Reza\", \"grades\": [90, 100, 100]}\n>>> student1 == {\"name\": \"Reza\", \"grades\": [90, 100, 90]}\nFalse\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>Writing &#x26; importing modules</h1>\n<ul>\n<li>\n<p>We have seen how to import a module from Python library using <inline-code>import</inline-code> statement e.g. <inline-code>import math</inline-code></p>\n</li>\n<li>\n<p>What are modules exactly?</p>\n<ul>\n<li>A module is simply a Python file containing definitions and statements.</li>\n<li>Every <inline-code>.py</inline-code> file is a module. The name of the module is the name of the file.</li>\n</ul>\n</li>\n<li>\n<p>Rules for naming modules</p>\n<ul>\n<li>A Python file that is supposed to be a module must follow same naming rules as variable names</li>\n<li>Module names can only start with letters a-z, A-Z or an underscore and must only contain these letters, digits and underscores.</li>\n</ul>\n</li>\n</ul>\n<h2>Try it!</h2>\n<p>Create a file <inline-code>geometry.py</inline-code> with the following code:</p>\n<python>import math\n\n\ndef sine(x):\n    \"\"\"Compute sine of a given angle.\n        \n    Args:\n        x: a float for angle in degrees\n    \n    Returns: a float\n    \"\"\"\n    return math.sin(math.radians(x))\n\n\ndef euclidean_distance(p1, p2):\n   \"\"\"\n   Computes Euclidean distance between two 2D points.\n\n   Args:\n       p1: list/tuple of length 2\n       p2: list/tuple of length 2\n\n   Returns: the euclidean distance as a float\n   \"\"\"\n   d = (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2\n   return d ** 0.5\n\n</python>\n<p>Now in another Python file (in the same directory), we can import the <inline-code>geometry</inline-code> module and use functions inside it:</p>\n<python># Import functions from the module\nfrom geometry import euclidean_distance, sine\n\n# Call the sine function\nprint(sine(90))\n\ndist = euclidean_distance((1, 1), (2, 3))  # tuples\nprint(dist)  # 2.23606797749979\n\n</python>\n<h3>Some observations:</h3>\n<ul>\n<li>When we import a module all code inside that module is executed.</li>\n<li>This means that if the module contains statements they will also be executed.</li>\n<li>Try adding some statement such as <inline-code>print(\"hello\")</inline-code> in <inline-code>geometry</inline-code> module outside the functions and import the module to see what happens.</li>\n</ul>\n<h2><inline-code>__name__</inline-code> AND <inline-code>__main__</inline-code></h2>\n<ul>\n<li>\n<p>When we write a module there might be code that we would like to see executed all the time, and another code that we would like to be executed only if the module is the program that we are actually running.</p>\n</li>\n<li>\n<p>To achieve this we need to learn about <inline-code>__name__</inline-code> and <inline-code>__main__</inline-code></p>\n</li>\n<li>\n<p>All we need to know for now is that <inline-code>__name__</inline-code> is a special variable that the interpreter initialize whenever it executes a module.</p>\n</li>\n<li>\n<p>When a module is executed, the interpreter does the following:</p>\n<ul>\n<li>sets the value of <inline-code>__name__</inline-code> for that module</li>\n<li>executes all the code in the module.</li>\n</ul>\n</li>\n<li>\n<p>Each module has its own <inline-code>__name__</inline-code> variable.</p>\n</li>\n<li>\n<p>When we execute a module as the main program, then the variable <inline-code>__name__</inline-code> for this module is set to be <inline-code>\"__main__\"</inline-code></p>\n</li>\n<li>\n<p>When a module is executed as part of an import statement from another module, then its <inline-code>__name__</inline-code> variable is set to be equal to the name of the module, which is name of the Python file.</p>\n<ul>\n<li>For instance, when <inline-code>geometry.py</inline-code> is executed because another program imports it, then its variable <inline-code>__name__</inline-code> is set to be <inline-code>geometry</inline-code>.</li>\n</ul>\n</li>\n<li>\n<p>After the variable <inline-code>__name__</inline-code> is set, the interpreter executes the code one statement at a time from top to bottom.</p>\n</li>\n<li>\n<p>If there is code we would like to see executed only when the module is executed as the main program, then we should add the following statement:</p>\n</li>\n</ul>\n<python>if __name__ == \"__main__\":\n    # any statement we like \n    print(\"This is the main program!\")\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>Matplotlib</h1>\n<ul>\n<li>Matplotlib is an extensive Python library commonly used to generate different types of plots.</li>\n<li>Matplotlib is an external library and to use it we have to install it.</li>\n<li>If you use Thonny, go to Tools -> Manage packages. Type matplotlib on the</li>\n</ul>\n<p>search bar and press “Find package from PyPI”. Then click Install.</p>\n<ul>\n<li>If you do not have Thonny, you can do so by typing the following commands in the terminal:\n<pre><code>python -m pip install -U pip  \npython -m pip install -U matplotlib  \n</code></pre>\n</li>\n</ul>\n<h2>matplotlib.pyplot</h2>\n<ul>\n<li>\n<p><inline-code>matplotlib.pyplot</inline-code> is a module in the package Matplotlib.</p>\n</li>\n<li>\n<p>This is the module we’ll be using to create plots.</p>\n</li>\n<li>\n<p>To use it, we first need to import it</p>\n<pre><code>import matplotlib.pyplot as plt\n</code></pre>\n</li>\n<li>\n<p>For more details: <a href=\"https://matplotlib.org/devdocs/api/pyplot_summary.html\">https://matplotlib.org/devdocs/api/pyplot_summary.html</a></p>\n</li>\n</ul>\n<h2>Example – A Line plot</h2>\n<p>We can use the function plot to create a line plot between the points in the input sequence.</p>\n<div class=\"flex\"><python>import matplotlib.pyplot as plt\n\nsome_numbers = [3, 1, 5, 2, 9, 3] \nplt.plot(some_numbers)\nplt.show() # display figure\n</python><img src=\"lecture5.2/line1.png\" style=\"width: 50%; margin-left: 2em;\"></div>\n<p>Note that:</p>\n<ul>\n<li>We have provided only one input to the function plot.</li>\n<li>If we do that, then the input values are going to be considered as the y-coordinates. Their corresponding x-coordinates are the indices of the list.</li>\n<li>In the example, we plot the following points: <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>3</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>5</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>4</mn><mo separator=\"true\">,</mo><mn>9</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>5</mn><mo separator=\"true\">,</mo><mn>3</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(0, 3), (1, 1), (2, 5), (3, 2), (4, 9), (5, 3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">5</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">9</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">5</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">)</span></span></span></span></span></li>\n</ul>\n<h2>Example - two inputs</h2>\n<div class=\"flex\"><python>import matplotlib.pyplot as plt\n\nx_coord = range(0, 10, 2)\ny_coord = [0, 0, 9, 8, 2]\nplt.plot(x_coord, y_coord)\nplt.show()\n</python><img src=\"lecture5.2/line2.png\" style=\"width: 50%; margin-left: 2em;\"></div>\n<h2>Example - a linear function</h2>\n<p>Using pyplot, we can plot the graph of the linear function <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>=</mo><mi>x</mi><mo>+</mo><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">y = x + 5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span></span></span></span></span>.</p>\n<div class=\"flex\"><python>import matplotlib.pyplot as plt\n\nx_coord = range(15)\ny_coord = []\n\nfor x in x_coord:\n    y_coord.append(x + 5)\n\nplt.plot(x_coord, y_coord)\nplt.show()\n\n</python><img src=\"lecture5.2/linear.png\" style=\"width: 50%; margin-left: 2em;\"></div>\n<h2>Plot title and axis labels</h2>\n<p>We can add more information about our plots to the figure.</p>\n<ul>\n<li>\n<p><inline-code>plt.title(label)</inline-code>: takes as argument a string and adds the title label to the figure.</p>\n</li>\n<li>\n<p><inline-code>plt.xlabel(label)</inline-code>: takes as argument a string and sets the label for the x-axis.</p>\n</li>\n<li>\n<p><inline-code>plt.ylabel(label)</inline-code>: takes as argument a string and sets the label for the y-axis.</p>\n</li>\n<li>\n<p>We can choose the font size of the labels, by passing the info as argument as follows:</p>\n<pre><code>plt.title(\"First plot\", fontsize=22)\n</code></pre>\n</li>\n</ul>\n<div class=\"flex\"><python>import matplotlib.pyplot as plt\n\nx_coord = range(15)\ny_coord = []\n\nfor x in x_coord:\n    y_coord.append(x + 5)\n    \nplt.plot(x_coord, y_coord)\n\nplt.title(\"First plot\", fontsize=20)\nplt.xlabel(\"x\", fontsize=14)\nplt.ylabel(\"y = x + 5\", fontsize=14)\n\nplt.show()\n\n</python><img src=\"lecture5.2/linear2.png\" style=\"width: 50%; margin-left: 2em;\"></div>\n<h2>Colors and markers</h2>\n<ul>\n<li>We can chose the style/color of the plots, the style/size of the markets, etc.</li>\n<li>Here is just a taste:</li>\n</ul>\n<div class=\"flex ml-2\"><img src=\"lecture5.2/colors.png\" style=\"width: 33%;\"><img src=\"lecture5.2/linestyles.png\" style=\"width: 33%; margin-left: 2em;\"><img src=\"lecture5.2/markers.png\" style=\"width: 33%; margin-left: 2em;\"></div>\n<p>You can check out the documentation here:<br>\n<a href=\"https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html\">https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html</a></p>\n<p>How to use these?</p>\n<ul>\n<li>The function plot can take as arguments two lists (for x and y coordinates) and a format string.</li>\n<li>The format string consists of three parts: <inline-code>[marker][line][color]</inline-code>. Each part is optional.</li>\n</ul>\n<div class=\"flex\"><python>import matplotlib.pyplot as plt\n\nsome_numbers = [3, 1, 5, 2, 9, 3]\n\n# circle marker, dashed line, green\nplt.plot(some_numbers, \"o--g\") \nplt.show() # display figure\n</python><img src=\"lecture5.2/colorplot.png\" style=\"width: 50%; margin-left: 2em;\"></div>\n<h2>Multiple plots in same figure</h2>\n<div class=\"flex\"><python>import matplotlib.pyplot as plt\nfrom math import sin, cos, radians\n\nx_coord = range(0, 540, 20)\nmy_sin = []\nfor x in x_coord:\n    my_sin.append(sin(radians(x)))\n\nmy_cos = []\nfor x in x_coord:\n    my_cos.append(cos(radians(x)))\n    \n# + marker, blue color\nplt.plot(x_coord, my_sin, '+b')\n\n# magenta color\nplt.plot(x_coord, my_cos, 'm')\nplt.show()\n\n</python><img src=\"lecture5.2/twoplots.png\" style=\"width: 50%; margin: 2em 0 0 2em;\"></div>\n<h2>Saving a figure</h2>\n<ul>\n<li>We can use the function <inline-code>plt.savefig() </inline-code>to save the figure we created.</li>\n<li>The function takes as argument the file name (a string).</li>\n</ul>\n<python>import matplotlib.pyplot as plt\nfrom math import sin, radians\n\nx_coord = range(0, 540, 20)\nmy_sin = []\nfor x in x_coord:\n    my_sin.append(sin(radians(x)))\n\nplt.plot(x_coord, my_sin, 'm')\n\n# the figure won't be displayed, # but saved in my_sin.png \nplt.savefig(\"myplot.png\")\n</python>\n<h2>Bar Plots</h2>\n<p>When working with data that can be broken down into categories, it might be useful for us to use a bar plot instead.</p>\n<p>Consider the following example:</p>\n<python>import matplotlib.pyplot as plt\n\nmtl_pop = [1293992, 1080545, 1015420, 1016376, 1620693, 1704694]\nyears = ['1966', '1976', '1986', '1996', '2006', '2016']\n\nplt.bar(years, mtl_pop)\n\nplt.title(\"Population of Montreal\")\nplt.show()\n</python>\n<img src=\"lecture5.2/barplot.png\" style=\"width: 50%; margin: 0 0 0 2em;\">\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}