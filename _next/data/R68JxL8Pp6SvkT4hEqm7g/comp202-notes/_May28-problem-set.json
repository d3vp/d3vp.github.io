{"pageProps":{"titles":["L1.1 — Computer and Programming Basics","L1.2 — Variables & Expressions","L2.1 — Control Flow Statements","Python Style Guide","May 14 — Problem Set","L2.2 — print(), String methods & while loop","May 17 — Problem Set","L3.1 — More loops & Defining functions","May 19 — Problem Set","L3.2 — Lists","May 21 — Problem Set","L4.1 — Tuples, Dictionaries, Sets","May 26 — Problem Set","May 28 — Problem Set","L4.2 — Nested data structures","June 2 — Problem Set","June 4 — Problem Set","L5.1 — Handling Exceptions, File IO","L5.2 — Comparing data structures, Writing modules, Matplotlib"],"slugs":["Lecture-1.1","Lecture-1.2","Lecture-2.1","style-guide","_May14-problem-set","Lecture-2.2","_May17-problem-set","Lecture-3.1","_May19-problem-set","Lecture-3.2","_May21-problem-set","Lecture-4.1","_May26-problem-set","_May28-problem-set","Lecture-4.2","_June2-problem-set","_June4-problem-set","Lecture-5.1","Lecture-5.2"],"post":{"title":"May 28 — Problem Set","slug":"_May28-problem-set","content":"<h1>Problems</h1>\n<ol>\n<li>\n<p>Persons A and B were married but are getting divorced. They need to split the objects they jointly owned. They have decided to each rank these objects in their order of preference (first = most preferred), and then assign each object to whoever had assigned it the highest rank. Objects that were assigned the same rank by both people will go to charity. For example, consider the following rankings,</p>\n<python>A_ranking = [\"car\", \"rug\", \"table\", \"tv\", \"lamp\", \"sofa\"]\nB_ranking = [\"rug\", \"sofa\", \"tv\", \"table\", \"lamp\", \"car\"]\n</python>\n<p>The program should print:</p>\n<output>Person A keeps: car, table\nPerson B keeps: rug, tv, sofa\nGoes to Charity: lamp\n</output>\n<p>Assume that the lists <inline-code>A_ranking</inline-code> and <inline-code>B_ranking</inline-code> will both be of same length and will contain same objects but in different order.</p>\n<p>Here is one way to solve this problem:</p>\n<ul>\n<li>Create 3 empty lists to keep track of which objects will go to A, B, or charity.</li>\n<li>For each object <inline-code>x</inline-code> in <inline-code>A_ranking</inline-code>\n<ul>\n<li>\n<p>Find the ranking of the object <inline-code>x</inline-code> in <inline-code>B_ranking</inline-code> (use the index() method).</p>\n</li>\n<li>\n<p>Compare rankings of <inline-code>x</inline-code>, and add (i.e. append) <inline-code>x</inline-code> to either A, B or charity’s list.</p>\n</li>\n</ul>\n</li>\n</ul>\n<solution><python>A_ranking = [\"car\", \"rug\", \"table\", \"tv\", \"lamp\", \"sofa\"]\nB_ranking = [\"rug\", \"sofa\", \"tv\", \"table\", \"lamp\", \"car\"]\n\nA_keeps=[]\nB_keeps=[]\ncharity=[]\n\nfor i in range(len(A_ranking)):\n    obj = A_ranking[i]\n    if i &#x3C; B_ranking.index(obj):\n        A_keeps.append(obj)\n    elif i > B_ranking.index(obj):\n        B_keeps.append(obj)\n    else:\n        charity.append(obj)\n\nprint(\"Person A keeps:\", \", \".join(A_keeps))\nprint(\"Person B keeps:\", \", \".join(B_keeps))\nprint(\"Goes to Charity:\", \", \".join(charity))\n</python></solution>\n</li>\n<li>\n<p>Write a program that asks the user to enter a long text. Then, print out statistics about the text: the number of characters, number of words, and number of unique words. Hint: use <inline-code>set</inline-code> to count unique words.</p>\n<output>Enter text: A computer is a machine that can be programmed to carry out sequences of arithmetic \nor logical operations automatically. Modern computers can perform generic sets of operations \nknown as programs. These programs enable computers to perform a wide range of tasks. \nA computer system is a \"complete\" computer that includes the hardware, operating system \n(main software), and peripheral equipment needed and used for \"full\" operation. This term \nmay also refer to a group of computers that are linked and function together, such as a \ncomputer network or computer cluster.\n# of characters: 565\n# of words: 89\n# of unique words: 62\n</output>\n<solution><python>text = input(\"Enter text: \")\nprint(\"# of characters:\", len(text))\nwords = text.split()\nprint(\"# of words:\", len(words))\nprint(\"# of unique words:\", len(set(words)))\n</python></solution>\n</li>\n<li>\n<p>In bioinformatics, a DNA sequence is sometimes represented as the set of k-mers it contains. A k-mer is a substring of length k.</p>\n<div style=\"font-size:0.9em;\"><pre><code>For a sequence \"ACGATATATA\": \nwith k=1, the k-mers are {\"A\", \"C\", \"G\", \"T\"}  \nwith k=2, the k-mers are {\"AC\", \"CG\", \"GA\", \"AT\", \"TA\"}  \nwith k=3, the k-mers are {\"ACG\", \"CGA\", \"GAT\", \"ATA\", \"TAT\"}  \n</code></pre></div>\n<p>Write a function called <inline-code>get_kmer_set</inline-code> that takes as argument a DNA sequence and a value k, and returns the set of k-mers contained in the sequence.</p>\n<python>kmers = get_kmer_set(\"ACGATATATA\", 3)\nprint(kmers)  # { 'GAT ' , 'TAT ' , 'ACG ' , 'CGA ' , 'ATA '}\n</python>\n<solution><python>def get_kmer_set(seq, k):\n    \"\"\" Gets the set of kmers present in a sequence\n    Args:\n        seq (str): a string ( a DNA sequence)\n        k (int): the k-mer size\n    Returns:\n        set of str: The set of substrings of length k present in seq\n    \"\"\"\n    # create an empty set\n    kmers = set()  \n\n    # -k+1 avoids the positions at the end of seq that are\n    # # less than k positions from the end\n    for i in range(len(seq) - k + 1): \n        kmers.add(seq[i:i+k])\n\n    return kmers\n</python></solution>\n</li>\n<li>\n<p>Create a dictionary to store the enrollment data for a course. Compute the average number of students taking the course. The data is</p>\n<div class=\"my2\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>semester</th><th>no. of students</th></tr></thead><tbody><tr><td>F2017</td><td>816</td></tr><tr><td>W2018</td><td>613</td></tr><tr><td>F2018</td><td>709</td></tr><tr><td>W2019</td><td>590</td></tr><tr><td>F2019</td><td>744</td></tr><tr><td>W2020</td><td>810</td></tr><tr><td>F2020</td><td>798</td></tr></tbody></table></div>\n<solution><python>enrollment = {\n    'F2017': 816,\n    'W2018': 613,\n    'F2018': 709,\n    'W2019': 590,\n    'F2019': 744,\n    \"W2020\": 810,\n    \"F2020\": 798\n}\n\n# create a counter variable\ntotal = 0\n\n# iterate through the dictionary and add the values to\n# the counter variable\nfor semester in enrollment:\n    total += enrollment[semester]\n    \nprint(total / len(enrollment))\n</python></solution>\n</li>\n<li>\n<p>Write a function <inline-code>compute_avg</inline-code> that takes a dictionary <inline-code>input_dict</inline-code> as argument and computes average in the same way as above. But this time the <inline-code>input_dict</inline-code> can be any dictionary (not just enrollment data) where keys will always be string and values will always be numbers. The function return the average value.<br>\nExamples:</p>\n<python>>>> d = {'a' : 8, 'b': 2}\n>>> compute_avg(d)\n5.0\n>>> compute_avg({})\n0\n</python>\n<solution><python>def compute_avg(input_dict):\n    \"\"\"\n    It computes the average of the values in input_dict\n    \n    Args:\n        input_dict: a dictionary with (string, number) items\n        \n    Returns: a float\n    \"\"\"\n    if len(input_dict) == 0:\n        return 0\n    \n    # create a counter variable\n    total = 0\n\n    # iterate through the dictionary and add the values to\n    # the counter variable\n    for key in input_dict:\n        total += input_dict[key]\n        \n    avg = total / len(input_dict)\n    \n    return avg\n</python></solution>\n</li>\n<li>\n<p>Write a function that takes as argument a list <inline-code>array</inline-code> and counts how many times each element appears in <inline-code>array</inline-code>. The function should return a dictionary where each item i.e. each key-value pair is such that the key is a unique element from <inline-code>array</inline-code> and the value is how many times that key appears in <inline-code>array</inline-code>.\nFor example,</p>\n<python>>>> d = count_occurrences([10, 12, 10, 100, 250, 100, 100])\n>>> print(d)\n{10: 2, 12: 1, 100: 3, 250: 1}\n>>> d = count_occurrences([\"apple\", \"banana\", \"apple\", \"orange\"])\n>>> print(d)\n{'apple': 2, 'banana': 1, 'orange': 1}\n</python>\n<p>Hint:</p>\n<ul>\n<li>Start with empty dictionary</li>\n<li>For each element <inline-code>x</inline-code> in the <inline-code>array</inline-code>,\n<ul>\n<li>if <inline-code>x</inline-code> is not present in the dictionary as a key, add an item to the dictionary with <inline-code>x</inline-code> as key and <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></span> as value. (Since we just saw <inline-code>x</inline-code> for the first time we start counting it from <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></span>)</li>\n<li>If <inline-code>x</inline-code> exists already in the dictionary as a key, increment its value by <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></span>.</li>\n</ul>\n</li>\n</ul>\n<div class=\"my2\"></div>\n<solution><python>def count_occurrences(array):\n    count = {} # create an empty dictionary\n\n    # iterate through the elements in the list\n    for element in array:\n        if element not in count:\n            # we see element for the first time \n            count[element] = 1  # set value 1 with element as key\n        else:\n            # Found an item in count dictionary with element as key\n            count[element] += 1 # increment its value\n                \n    return count\n\n\nd = count_occurrences([10, 12, 10, 100, 250, 100, 100])\nprint(d)\n</python></solution>\n</li>\n<li>\n<p>Write a function <inline-code>merge_inventory</inline-code> that takes as arguments two dictionaries each representing the inventory of a warehouse for a company. The function should combine the two in a dictionary representing the entire inventory of the company. For example,</p>\n<python>inventory_one = {\"sofa\": 5, \"chair\": 12, \"lamp\": 3}\ninventory_two = {\"sofa\": 1, \"area rug\": 6, \"coffee table\": 2, \"lamp\": 5}\ncombined = merge_inventory(inventory_one, inventory_two)\nprint(combined)\n# {\"sofa\": 6, \"chair\": 12, \"lamp\": 8, \"area rug\": 6, \"coffee table\": 2}\n# Order does not matter when printed\n</python>\n<solution><python>def merge_inventory(inv1, inv2):\n    # create an empty dictionary to store merged inventory\n    merged = {}\n    \n    # First add all items from inventory 1\n    for name in inv1:\n        merged[name] = inv1[name]\n    \n    # Add or update items from inventory 2\n    for name in inv2:\n        # If item name already exists, increment its quantity\n        if name in merged:\n            merged[name] += inv2[name]\n        else:\n            # Item name does not exist so just add it\n            merged[name] = inv2[name]\n    \n    return merged\n</python></solution>\n</li>\n</ol>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}