{"pageProps":{"titles":["Week 1 — Computer and Programming Basics","Week 2 — Types, Variables, Expressions, Functions","Sep 9-10 Problem Set 2","Week 3 —  Conditionals & Iteration","Sep 16-17 Problem Set","Week 4 —  print(), String methods, while loop","Python Style Guide","Sep 23-24 Problem Set","Week 5 —  Scope of variables, Lists & Tuples","Sep 30-Oct 1 Problem Set","Week 6 —  Immutability, Dictionary & Set","Oct 7-8 Problem Set","Week 7 —  Nested data structures, iterables, comprehensions","Week 8 —  Exceptions & File IO","Oct 21-22 Problem Set","Week 9 — Object oriented programming","Oct 28-29 — Problem Set"],"slugs":["Lecture-1.2","Lecture-week2","_Sep09-problem-set","Lecture-week3","_Sep16-17-problem-set","Lecture-week4","style-guide","_Sep23-24-problem-set","Lecture-week5","_Sep30-Oct1-problem-set","Lecture-week6","_Oct7-8-problem-set","Lecture-week7","Lecture-week8","_Oct21-22_problem-set","Lecture-week9","_Oct28-29_problem-set"],"post":{"title":"Week 9 — Object oriented programming","slug":"Lecture-week9","content":"<h2>Objects</h2>\n<ul>\n<li>An object is a collection of data and a set of methods can be provided to work with it.</li>\n<li>For example, a string is a collection of characters and methods like <code>isupper</code> or <code>split</code> can be called <i>on it</i>.</li>\n<li>Python is an object-oriented language. This means that it uses objects to represent data and provides methods related to them.</li>\n</ul>\n<h2>Object-oriented programming (OOP)</h2>\n<ul>\n<li>Up to now, we have been using functions to organize our code, and built-in types <code>(list, str, list, or dict)</code> to organize our data.</li>\n<li>OOP is a way to use programmer-defined data types to organize code and data.</li>\n</ul>\n<h2>Defining our own data types</h2>\n<ul>\n<li>In Python, we can define our own data type.</li>\n<li>The idea is that we can combine related pieces of information into an object of the newly defined type. More over, we can create methods that can operate on this data.</li>\n<li>Sometimes a <code>str/list/dict</code> is not good enough!</li>\n</ul>\n<h2>Motivation — working with student data</h2>\n<ul>\n<li>\n<p>Suppose we want to store in a computer program all the information we have related to a student</p>\n</li>\n<li>\n<p>What do we need to store?</p>\n<ul>\n<li>Name</li>\n<li>Student ID</li>\n<li>Courses in which they are currently enrolled</li>\n<li>Grades received in past courses</li>\n<li>etc.</li>\n</ul>\n</li>\n<li>\n<p>Working with multiple variables can be annoying though.</p>\n</li>\n<li>\n<p>For example, suppose we wanted to write a function that compares two students, this is how the header of the function would look like:</p>\n<python>def compareStudents(name1, id1, courses1, grades1, name2, id2, courses2, grades2):\n    # use the arguments to compare\n</python>\n<p>This is a huge nuisance to call!</p>\n</li>\n</ul>\n<p>An option could be to store all the data related to a student inside a list.</p>\n<ul>\n<li>We could always put into index <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></span> the name, into index <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></span> the ID, etc.</li>\n<li>Problem: these sorts of “tricks” can lead to bugs!\n<ul>\n<li>Are the grades in position <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span></span> or <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span></span>?</li>\n<li>You spend lots of time double checking everything by looking back in the code.</li>\n</ul>\n</li>\n</ul>\n<p>Another idea!</p>\n<ul>\n<li>Rather than using a list where everything has a fixed order, we can define our own type which is structured based on our specific need.</li>\n<li>We could define a new type <inline-code>Student</inline-code> which consists of several “variables” to store the different data (name, student ID, etc.)</li>\n</ul>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>Classes</h1>\n<p>Up to now we have worked with several classes.</p>\n<python>>>> int\n&#x3C;class 'int'>\n>>> str\n&#x3C;class 'str'>\n>>> list\n&#x3C;class 'list'>\n>>> dict\n&#x3C;class 'dict'>\n</python>\n<p>We created objects of those types and used methods from those classes to work with those objects.</p>\n<python>>>> s = 'one more string' \n>>> type(s)\n&#x3C;class 'str'>\n>>> words = s.split()\n>>> type(words)\n&#x3C;class 'list'>\n>>> words.remove('more')\n>>> words\n['one', 'string']\n</python>\n<h2>Classes and objects</h2>\n<p>By now, we have seen that objects and classes are closely related. How exactly?</p>\n<ul>\n<li>A class is like a <i>blueprint/template</i> for creating objects. It specifies what data the objects have and what methods can operate on the data.</li>\n<li>An object is an <sc>instance</sc> of some class. The terms <i>instance</i> and <i>object</i> are used interchangeably.</li>\n<li>We will learn how to define classes that represent useful kinds of data.</li>\n</ul>\n<h2>Example — Student</h2>\n<p>We want to define a class that would be a good template for objects representing students.</p>\n<p>Useful data:</p>\n<ul>\n<li>Name</li>\n<li>Student ID</li>\n<li>Current courses</li>\n<li>Past grades</li>\n</ul>\n<p>Useful methods:</p>\n<ul>\n<li>computeGPA</li>\n<li>addCourse</li>\n<li>dropCourse</li>\n</ul>\n<p>Each instance of the class (i.e., each object) would represent one particular student.</p>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>Defining a class</h1>\n<ul>\n<li>We define a class using the keyword <inline-code>class</inline-code> as follows:</li>\n<li>In a Python file, we can define as many classes as we want.</li>\n</ul>\n<python>class MyNewClass:\n   \"\"\" a new data type \"\"\"\n</python>\n<ul>\n<li>From the header we see that the class is called <inline-code>MyNewClass</inline-code></li>\n<li>The body of this class only contains a docstring for the moment and no other code.</li>\n<li>Class names should follow the UpperCamelCase convention.</li>\n</ul>\n<h2>Defining a class creates a new data type</h2>\n<python>class MyNewClass:\n   \"\"\" a new data type \"\"\"\n\nprint(MyNewClass)\n</python>\n<output>&#x3C;class '__main__.MyNewClass'>\n</output>\n<p>Note that the full name of the type is <inline-code>__main__.MyNewClass</inline-code> where <inline-code>__main__</inline-code> is the default module name of the main program that we execute.</p>\n<h2>Instantiating a class</h2>\n<p>We can now create an object of this type by calling the class as if it were a function.</p>\n<python>class MyNewClass:\n    \"\"\" a new data type \"\"\"\n\n # create an object of class MyNewClass:\nt = MyNewClass() \nprint(t)\n</python>\n<output>&#x3C;__main__.MyNewClass object at 0x000001EB72AC6AC8>\n</output>\n<ul>\n<li>The variable <inline-code>t</inline-code> refers to an object of type MyNewClass.</li>\n<li>When we display <inline-code>t</inline-code> we see what class the object belongs to, and the identity of the object.</li>\n</ul>\n<h2>Creating the Student class</h2>\n<python>class Student:\n    \"\"\" Represents a student \"\"\"\n\nstudent1 = Student() \nprint(student1)\n# &#x3C;__main__.Student object at 0x1013b0df0>\n</python>\n<h2>Attributes</h2>\n<python>class Student:\n    \"\"\" Represents a student \"\"\"\n\n\nstudent1 = Student()\n# Create an attribute in the Student object:\nstudent1.name = \"Deven\"  \n\n# Use the attribute inside Student object:\nprint(student1.name)  # Deven\n\nprint(name)  # NameError: name 'name' is not defined\n</python>\n<ul>\n<li>We can create a variable that belongs to a specific object.</li>\n<li>These variables are called <sc>attributes</sc>.</li>\n<li>We create attributes by assigning values to an object using the dot notation.</li>\n<li>Attributes can be accessed only through the object they belong to, using dot notation.</li>\n</ul>\n<h2>State diagram</h2>\n<div class=\"my2\"></div>\n<iframe width=\"800\" height=\"400\" frameborder=\"0\" src=\"https://pythontutor.com/iframe-embed.html#code=class%20Student%3A%0A%20%20%20%22%22%22%20Represents%20a%20student%0A%20%20%20%22%22%22%0A%0Astudent1%20%3D%20Student%28%29%0Astudent1.name%20%3D%20%22Deven%22%0Aname%20%3D%20student1.name%0Aprint%28name%29%0A&#x26;codeDivHeight=400&#x26;codeDivWidth=350&#x26;cumulative=false&#x26;curInstr=0&#x26;heapPrimitives=nevernest&#x26;origin=opt-frontend.js&#x26;py=3&#x26;rawInputLstJSON=%5B%5D&#x26;textReferences=false\"> </iframe>\n<h2>Try it!</h2>\n<ul>\n<li>Define a class <inline-code>Student</inline-code>.</li>\n<li>Write a function that takes as arguments a string <inline-code>name</inline-code> and an integer <inline-code>id_num</inline-code> and returns a <inline-code>Student</inline-code> object with two attributes <inline-code>name</inline-code> and <inline-code>id_num</inline-code>.</li>\n<li>Write a function that takes as arguments two Student objects and returns the <inline-code>name</inline-code> of the student with the larger <inline-code>id_num</inline-code>.</li>\n<li>Test the above functions by creating two objects of Student class.</li>\n</ul>\n<python>class Student:\n    \"\"\" Represents a student. \"\"\"\n\n\ndef create_student(name, id_num):\n    new_student = Student() # creates an object of Student class\n    new_student.name = name\n    new_student.id_num = id_num\n    return new_student\n\n\ndef larger_ID(student1, student2):\n    if student1.id_num > student2.id_num:\n        return student1.name\n    else:\n        return student2.name\n\n\n\nstudent1 = create_student(\"Bob\", 260000000)\nprint(student1.name)  # Bob\nprint(student1.id_num)  # 260000000\n\n\nbob = create_student(\"Bob\", 260000000)\ngeorge = create_student(\"George\", 260000001)\nprint(larger_ID(bob, george))  # George\n\nstudent1 = create_student(\"S1\", 1)\nstudent2 = create_student(\"S2\", 9001)\nprint(larger_ID(student1, student2))  # S2\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>Constructor</h1>\n<ul>\n<li>A constructor (also known as initializer method) is a special method named <inline-code>__init__</inline-code>.\n<ul>\n<li>We define the method inside a class.</li>\n</ul>\n</li>\n<li>It is invoked automatically whenever a new object is created.</li>\n<li>The constructor is used to define the attributes of an object and to set their initial value.</li>\n<li>We define it using the following syntax:\n<python>class MyNewClass:\n    def __init__(self):\n        # do something when the object is being created\n</python>\n</li>\n<li><inline-code>self</inline-code> refers to the object that is being initialized. It is not a keyword.</li>\n</ul>\n<h2>Examples</h2>\n<p>Let’s write a constructor for the <inline-code>Student</inline-code> class that takes no arguments (besides <inline-code>self</inline-code>) and prints out “Creating a new student”.</p>\n<python>class Student:\n    \"\"\" Represents a student \"\"\"\n    \n    # constructor:\n    def __init__(self):\n        print(\"Creating a new student\")\n\n\nstudent1 = Student()  # constructor is called here\n</python>\n<output>Creating a new student\n</output>\n<p>Now let’s modify constructor and have it take some arguments:</p>\n<ul>\n<li><inline-code>name</inline-code> (string) of the student and their <inline-code>id_num</inline-code> (int)</li>\n<li>Create attributes <inline-code>name</inline-code> and <inline-code>id_num</inline-code> using <inline-code>self</inline-code> and set their values to the respective arguments.</li>\n</ul>\n<python>class Student:\n    \"\"\" Represents a student \"\"\"\n    \n    # constructor:\n    def __init__(self, name, id_num):\n        print(\"Creating a new student\")\n        # Create attributes:\n        self.name = name\n        self.id_num = id_num\n\n\n # call constructor with arguments\nstudent1 = Student(\"Deven\", 12345) \n\nprint(student1.name, student1.id_num)\n\n\n# Create another student object\nstudent2 = Student(\"Reza\", 5000) \n\nprint(student2.name, student2.id_num)\n</python>\n<output>Creating a new student\nDeven 12345\nCreating a new student\nReza 5000\n</output>\n<p>What happens in example above when we do not create attributes in <inline-code>__init__</inline-code> ?</p>\n<h2>Constructor with default arguments</h2>\n<p>Like any other function, the method <inline-code>__init__</inline-code> allows arguments to have default values.</p>\n<python>class Student:\n    \"\"\" Represents a student\n    \n    Attributes: name, id_num\n    \"\"\"\n    \n    def __init__(self, name, id_num=12345):\n        self.name = name\n        self.id_num = id_num\n    \n\ng = Student(\"Dev\", id_num=67890)\nh = Student(\"Reza\")\n\nprint(g.name, g.id_num) # Dev 67890\nprint(h.name, h.id_num) # Reza 12345\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>Methods</h1>\n<p>We can define methods inside a class as we have been defining functions inside a module.</p>\n<ul>\n<li><sc>Instance methods</sc> – methods that are associated to a specific instance of the class.</li>\n<li>These methods are called on an instance (object) and they can access data specific to that instance.</li>\n</ul>\n<python>class MyNewClass:\n    def my_method(self, argument1, argument2, ..., argumentN):\n        # do something \n</python>\n<ul>\n<li>\n<p>The first argument of every instance method is always refers to the object on which we are calling the method.</p>\n<python>obj = MyNewClass()  # Create an instance\n\nobj.my_method(argument1, argument2, ..., argumentN)  # call my_method on obj\n</python>\n</li>\n<li>\n<p>By convention, this argument is always named <inline-code>self</inline-code>. (<inline-code>self</inline-code> is not a keyword! We could use any other name for the first argument and it would not be an error.)</p>\n</li>\n</ul>\n<h2>Example</h2>\n<p>Let’s go back to the Student class:</p>\n<ul>\n<li>Add a method <inline-code>display_info()</inline-code> that displays the information of a student i.e. prints the attributes of the instance.</li>\n</ul>\n<python>class Student:\n    \"\"\" Represents a student. \"\"\"\n    \n    def __init__(self, student_name, id_num):\n        self.name = student_name\n        self.id_num = id_num\n    \n    def display_info(self):\n        print(\"Name of student:\", self.name)\n        print(\"Student ID:\", self.id_num)\n\n\nnew_student = Student(\"Bob\", 260000000)\nnew_student.display_info()\n# Name of student: Bob\n# Student ID: 260000000\n\nanother_student = Student(\"George\", 260000001)\nanother_student.display_info()\n# Name of student: George\n# Student ID: 260000001\n</python>\n<h2>Understanding <inline-code>self</inline-code></h2>\n<div class=\"my2\"></div>\n<div class=\"ml-2\"><iframe width=\"1000\" height=\"600\" frameborder=\"0\" src=\"https://pythontutor.com/iframe-embed.html#code=class%20Student%3A%0A%20%20%20%20%22%22%22%20Represents%20a%20student.%20%22%22%22%0A%20%20%20%20%0A%20%20%20%20def%20__init__%28self,%20student_name,%20id_num%29%3A%0A%20%20%20%20%20%20%20%20self.name%20%3D%20student_name%0A%20%20%20%20%20%20%20%20self.id_num%20%3D%20id_num%0A%20%20%20%20%0A%20%20%20%20def%20display_info%28self%29%3A%0A%20%20%20%20%20%20%20%20print%28%22Name%20of%20student%3A%22,%20self.name%29%0A%20%20%20%20%20%20%20%20print%28%22Student%20ID%3A%22,%20self.id_num%29%0A%0A%0Anew_student%20%3D%20Student%28%22Bob%22,%20260000000%29%0Anew_student.display_info%28%29%0A%0Aanother_student%20%3D%20Student%28%22George%22,%20260000001%29%0Aanother_student.display_info%28%29%0A%0A&#x26;codeDivHeight=400&#x26;codeDivWidth=350&#x26;cumulative=false&#x26;curInstr=0&#x26;heapPrimitives=nevernest&#x26;origin=opt-frontend.js&#x26;py=3&#x26;rawInputLstJSON=%5B%5D&#x26;textReferences=false\"> </iframe></div>\n<h2>Try it!</h2>\n<ul>\n<li>\n<p>Add a method <inline-code>update_name</inline-code> that takes an argument <inline-code>new_name</inline-code> and sets the attribute <inline-code>name</inline-code> to <inline-code>new_name</inline-code></p>\n</li>\n<li>\n<p>In the <inline-code>Student</inline-code> class, add a keyword argument <inline-code>courses_list</inline-code> to the constructor — a list of the courses the student is currently taking. Default value for the argument should be None.</p>\n<ul>\n<li>Create an attribute <inline-code>courses</inline-code> in the constructor.</li>\n<li>if <inline-code>courses_list</inline-code> is <inline-code>None</inline-code>, the attribute <inline-code>courses</inline-code> should be set to an empty list. Other set the value of <inline-code>courses</inline-code> to <inline-code>courses_list</inline-code>.</li>\n</ul>\n</li>\n<li>\n<p>Update <inline-code>display_info</inline-code> method to also display a comma-separate list of courses.</p>\n</li>\n<li>\n<p>Add a method <inline-code>add_course</inline-code> that takes as argument a string and appends it at the end of the attribute <inline-code>courses</inline-code>, a list of courses the student is taking.</p>\n</li>\n</ul>\n<python>class Student:\n    \"\"\" Represents a student. \"\"\"\n    \n    def __init__(self, student_name, id_num, courses_list=None):\n        self.name = student_name\n        self.id_num = id_num\n        if courses_list is None:\n            self.courses = []\n        else:\n            self.courses = courses_list\n    \n    def display_info(self):\n        print(\"Name of student:\", self.name)\n        print(\"Student ID:\", self.id_num)\n        print(\"Courses taken: \" + \", \".join(self.courses))\n\n    def update_name(self, new_name):\n        self.name = new_name\n        \n    def add_course(self, course):\n        self.courses.append(course)\n        \n    \nnew_student = Student(\"Bob\", 260000000)\nnew_student.display_info()\n\nnew_student.update_name(\"Jerry\")\nnew_student.display_info()\n\nnew_student.add_course(\"PHIL 200\")\nnew_student.display_info()\n\n\nanother_student = Student(\"George\", 260000001, courses_list=[\"COMP 202\"])\nanother_student.display_info()\n\nanother_student.add_course(\"POLI 222\")\nanother_student.display_info()\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>Displaying objects — <inline-code>__str__</inline-code> method</h1>\n<p>Consider the following code that tries to display an object using <inline-code>print()</inline-code></p>\n<python>class Student:\n    \"\"\" Represents a student\n    \n    Attributes: name, id_num\n    \"\"\"\n    \n    def __init__(self, name, id_num=12345):\n        self.name = name\n        self.id_num = id_num\n    \n\nstudent1 = Student(\"Dev\")\nprint(student1)\n</python>\n<output>&#x3C;__main__.Student object at 0x7f8cd66aa890>\n</output>\n<ul>\n<li>When we display <inline-code>student1</inline-code> we see what class the object belongs to, and the identity of the object.</li>\n<li>Wouldn’t it be nice to display <inline-code>name</inline-code>, <inline-code>id_num</inline-code> and other attributes when we do <inline-code>print(student1)</inline-code>?</li>\n</ul>\n<h2><inline-code>str</inline-code> and <inline-code>print()</inline-code></h2>\n<ul>\n<li>When have used the built-in function <inline-code>str</inline-code> to convert objects of built-in types (<inline-code>int</inline-code> or <inline-code>float</inline-code>)</li>\n</ul>\n<p>into their string representation.</p>\n<ul>\n<li>The function <inline-code>print</inline-code> internally uses the function <inline-code>str</inline-code>. So the following two code snippets are equivalent:</li>\n</ul>\n<div class=\"flex\"><python>student1 = Student(\"Dev\", 260001)\nprint(student1)  \n</python><python>student1 = Student(\"Dev\", 260001)\n# Get string representation of the object using str()\nstring = str(student1)\nprint(string)\n</python></div>\n<h2><inline-code>__str__</inline-code> method</h2>\n<ul>\n<li>\n<p>We can change the string representation of our class objects by implementing a method called <inline-code>__str__</inline-code> in our class.</p>\n<python>def __str__(self):\n    # must return a string\n</python>\n</li>\n<li>\n<p>If we do that, then when we call <inline-code>print</inline-code> with an instance of our class, <inline-code>__str__</inline-code> method is called automatically!</p>\n</li>\n</ul>\n<h2>Try it!</h2>\n<p>In the <inline-code>Student</inline-code> class, add a <inline-code>__str__</inline-code> method that returns a string in the following format:</p>\n<pre><code>Name: &#x3C;name attribute>\nStudent ID: &#x3C;id_num attribute>\nCourses: &#x3C;comma-separated courses>\n</code></pre>\n<p>Then, try to use print with an object of Student class.</p>\n<python>class Student:\n    \"\"\" Represents a student. \"\"\"\n    def __init__(self, student_name, id_num, courses_list=None):\n        self.name = student_name\n        self.id_num = id_num\n        if courses_list is None:\n            self.courses = []\n        else:\n            self.courses = courses_list\n\n    def display_info(self):\n        print(\"Name of student:\", self.name)\n        print(\"Student ID:\", self.id_num)\n        print(\"Courses taken: \" + \", \".join(self.courses))\n\n    def update_name(self, new_name):\n        self.name = new_name\n\n    def add_course(self, course):\n        self.courses.append(course)\n\n    def __str__(self):\n        return (\"Name: \" + self.name + \"\\n\" +\n                \"Student ID: \" + str(self.id_num) + \"\\n\" +\n                \"Courses: \" + \", \".join(self.courses) + \"\\n\")\n\n\nstudent1 = Student(\"Dev\", 260001)\nprint(student1)\n# Name: Dev\n# Student ID: 260001\n# Courses:\n\nstudent2 = Student(\"Reza\", 260005, courses_list=[\"COMP 202\", \"PHIL 101\"])\nprint(student2)\n# Name: Reza\n# Student ID: 260005\n# Courses: COMP 202, PHIL 101\n</python>\n<h2>Example — List of Student objects</h2>\n<python>students = [Student(\"Dev\", 260001),\n            Student(\"Reza\", 260005, courses_list=[\"COMP 202\", \"PHIL 101\"])]\n\n# Create a student object and append it to the list\nstudents.append(Student(\"Alice\", 260011, courses_list=[\"COMP 250\", \"MATH 200\"]))\n\nprint(students[2])  # uses __str__ of Student class\n# Name: Alice\n# Student ID: 260011\n# Courses: COMP 250, MATH 200\n\n\nprint(students) # Does not use __str__ of Student class\n# [&#x3C;__main__.Student object at 0x10ad16100>,\n#  &#x3C;__main__.Student object at 0x10ad169d0>,\n#  &#x3C;__main__.Student object at 0x10ad16a00>]\n\n\nfor s in students:\n    print(s)  # uses __str__ of Student class\n\n# Name: Dev\n# Student ID: 260001\n# Courses: \n# \n# Name: Reza\n# Student ID: 260005\n# Courses: COMP 202, PHIL 101\n# \n# Name: Alice\n# Student ID: 260011\n# Courses: COMP 250, MATH 200\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}