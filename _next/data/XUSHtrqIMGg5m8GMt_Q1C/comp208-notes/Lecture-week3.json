{"pageProps":{"titles":["Week 1 — Computer and Programming Basics","Week 2 — Types, Variables, Expressions, Functions","Sep 9-10 Problem Set 2","Week 3 —  Conditionals & Iteration","Sep 16-17 Problem Set","Week 4 —  print(), String methods, while loop","Python Style Guide","Sep 23-24 Problem Set","Week 5 —  Scope of variables, Lists & Tuples","Sep 30-Oct 1 Problem Set","Week 6 —  Immutability, Dictionary & Set","Oct 7-8 Problem Set","Week 7 —  Nested data structures, iterables, comprehensions","Week 8 —  Exceptions & File IO","Oct 21-22 Problem Set","Week 9 — Object oriented programming","Oct 28-29 — Problem Set"],"slugs":["Lecture-1.2","Lecture-week2","_Sep09-problem-set","Lecture-week3","_Sep16-17-problem-set","Lecture-week4","style-guide","_Sep23-24-problem-set","Lecture-week5","_Sep30-Oct1-problem-set","Lecture-week6","_Oct7-8-problem-set","Lecture-week7","Lecture-week8","_Oct21-22_problem-set","Lecture-week9","_Oct28-29_problem-set"],"post":{"title":"Week 3 —  Conditionals & Iteration","slug":"Lecture-week3","content":"<h1>Flow of execution</h1>\n<p>Until now, our programs were executed unconditionally, and each line was executed once.</p>\n<p>For most programs, it is not enough as we need to make choices or run code repeatedly.</p>\n<p>We need to control flow of execution in our programs.</p>\n<p>The control flow of a program determines:</p>\n<ul>\n<li>Which parts of the code should always be executed</li>\n<li>Which parts should be executed only under certain conditions</li>\n<li>Which parts should be executed repeatedly</li>\n</ul>\n<p>All of these can be achieved using control flow statements:</p>\n<ul>\n<li><inline-code>if</inline-code> statement for conditional execution</li>\n<li><inline-code>for</inline-code> and <inline-code>while</inline-code> loops for repeated execution</li>\n</ul>\n<h1>Boolean Expressions &#x26; Comparison Operators</h1>\n<p>Python has two values <inline-code>True</inline-code> and <inline-code>False</inline-code> of type <inline-code>bool</inline-code>, which are useful for expressing and storing   yes/no or true/false kind of data.</p>\n<python>>>> True\nTrue\n>>> False\nFalse\n>>> type(True)\n&#x3C;class 'bool'>\n>>> type(False)\n&#x3C;class 'bool'>\n</python>\n<p><sc>comparison operators</sc>, also known as <i>relational operators</i>, are used to compare two values, such as numbers or string.<br>\nThe result of such comparison is always a <inline-code>bool</inline-code> value i.e. <inline-code>True</inline-code> or <inline-code>False</inline-code>.</p>\n<p>A <sc>boolean expression</sc> is an expression that evaluates to either <inline-code>True</inline-code> or <inline-code>False</inline-code>.</p>\n<p>Examples of boolean expressions:</p>\n<python>>>> 10 == 10  # are numbers equal?\nTrue\n>>> 10 == 20\nFalse\n\n>>> x = 5\n>>> y = 10\n>>> x == y\nFalse\n>>> x != y\nTrue\n>>> x &#x3C; y\nTrue\n>>> x > y\nFalse\n\n# We can use variables to store results of boolean expression \n# (just like we did for arithmetic expressions)\n>>> x = 3\n>>> is_positive = x > 0\n>>> is_positive\nTrue\n\n>>> x = 5\n>>> y = 5\n>>> is_equal = x == y\n>>> is_equal\nTrue\n</python>\n<div class=\"p1 br5 bgred\"><p><b>Important</b></p><ul>\n<li>Common error is using <inline-code>=</inline-code> (single equals sign) instead of <inline-code>==</inline-code> (double equals sign)</li>\n<li><inline-code>=</inline-code> is the assignment operator, used to create variable and assign it a value</li>\n<li><inline-code>==</inline-code> is a comparison operator used to check for equality between two values</li>\n</ul></div>\n<h2>List of comparison operators</h2>\n<ul>\n<li><inline-code>x == y</inline-code> — <inline-code>True</inline-code> if <inline-code>x</inline-code> is equal to <inline-code>y</inline-code>, otherwise <inline-code>False</inline-code></li>\n<li><inline-code>x != y</inline-code> — <inline-code>True</inline-code> if <inline-code>x</inline-code> is not equal to <inline-code>y</inline-code>, otherwise <inline-code>False</inline-code></li>\n<li><inline-code>x &#x3C; y</inline-code> — <inline-code>True</inline-code> if <inline-code>x</inline-code> is less than <inline-code>y</inline-code>, otherwise <inline-code>False</inline-code></li>\n<li><inline-code>x > y</inline-code> — <inline-code>True</inline-code> if <inline-code>x</inline-code> is greater than <inline-code>y</inline-code>, otherwise <inline-code>False</inline-code></li>\n<li><inline-code>x &#x3C;= y</inline-code> — <inline-code>True</inline-code> if <inline-code>x</inline-code> is less than or equal to <inline-code>y</inline-code>, otherwise <inline-code>False</inline-code></li>\n<li><inline-code>x >= y</inline-code> — <inline-code>True</inline-code> if <inline-code>x</inline-code> is greater than or equal to <inline-code>y</inline-code>, otherwise <inline-code>False</inline-code></li>\n</ul>\n<h2>Example</h2>\n<python>temp_today = 23\ntemp_yesterday = 21\nis_colder_today = temp_today &#x3C; temp_yesterday\nprint(\"Today's temperature is\", temp_today, \"degrees Celsius\")\nprint(\"Today is colder than yesterday:\", is_colder_today)\n</python>\n<output>Today's temperature is 23 degrees Celsius\nToday is colder than yesterday: False\n</output>\n<h2>Order of operations</h2>\n<p>All comparison operators (e.g. <inline-code>==</inline-code>, <inline-code>!=</inline-code>, etc.) have same priority and are evaluated from left to right.</p>\n<p>All arithmetic and string operators have higher priority than comparison operators.</p>\n<python>>>> x = 5\n>>> x + 1 == 6\nTrue\n</python>\n<div class=\"p1 br5 bggreen\"><p><b>Try it!</b></p><p>Write a program <inline-code>is_even.py</inline-code> that take an integer as input from the user and displays on your screen whether it is true or false that such integer is even.</p><p>Program should run as follows:</p><output>Enter a number: 5\n5 is an even number: False\n</output><solution><python>num = int(input(\"Enter a number:\"))\n\n# a number is even if remainder is 0 when it is divided by 2\nis_even = (num % 2 == 0)\n\nprint(num, \"is an even number:\", is_even)\n\n# without using extra variable:\n# print(num, \"is an even number:\", num % 2 == 0)\n</python></solution></div>\n<h1>Comparing strings</h1>\n<p>Comparison operators work for strings as well.<br>\nThe comparison is done alphabetically i.e. following a dictionary order</p>\n<python>>>> word = \"cat\"\n>>> word == \"cat\"\nTrue\n>>> word == \"dog\"\nFalse\n>>> word != \"dog\"\nTrue\n\n# letter \"c\" in \"cat\" appears before \"d\" alphabetically\n>>> word &#x3C; \"dog\"\nTrue\n\n# uppercase letters A-Z appear before lowercase a-z alphabetically\n>>> word &#x3C; \"Dog\"\nFalse\n\n# We can compare different types for equality\n>>> word == 123\nFalse\n\n# But inequality is not allowed\n>>> word &#x3C; 123\nTypeError: '&#x3C;' not supported between instances of 'str' and 'int'\n</python>\n<h2>Equality and floating point numbers</h2>\n<p>Consider following example:</p>\n<python>>>> x = 1.1 + 2.2\n>>> x\n3.3000000000000003\n>>> x == 3.3  # what?\nFalse\n</python>\n<ul>\n<li>As we saw earlier, a floating-point number is stored with 64-bit <i>finite precision</i>.</li>\n<li>This means that a number may not be stores as precisely as we would like.</li>\n<li>To account for this, when we want to check if two floating point numbers are equal, we should check if they are “close enough”</li>\n</ul>\n<p>Correct way to check for equality of floating-point numbers:</p>\n<python># First define how close two numbers need to be\nepsilon = 0.000001\n\n>>> x = 1.1 + 2.2\n>>> x\n3.3000000000000003\n\n# Check if x and 3.3 are within epsilon distance\n>>> abs(x - 3.3) &#x3C; epsilon\nTrue\n</python>\n<h1>Logical Operators</h1>\n<p>Logical operators are useful to combine multiple conditions.</p>\n<p>Logical operators take boolean expressions as inputs and produce a result of type <inline-code>bool</inline-code>.</p>\n<p>Python has 3 boolean operators:</p>\n<ul>\n<li><inline-code>not</inline-code> — a unary operator</li>\n<li><inline-code>and</inline-code> — binary operator</li>\n<li><inline-code>or</inline-code> — binary operator</li>\n</ul>\n<p>Suppose <inline-code>x</inline-code> is a variable of type <inline-code>bool</inline-code>:</p>\n<div class=\"code p1\" style=\"font-size: 0.75em;\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>x</th><th>not x</th></tr></thead><tbody><tr><td>False</td><td>True</td></tr><tr><td>True</td><td>False</td></tr></tbody></table></div>\n<p><inline-code>not x</inline-code> evaluates to the opposite value of <inline-code>x</inline-code>.</p>\n<p>Suppose <inline-code>x</inline-code> and <inline-code>y</inline-code> are variables of type <inline-code>bool</inline-code>:</p>\n<div class=\"flex\" style=\"width: 110%;\"><div class=\"code px2\" style=\"font-size: 0.75em;\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>x</th><th>y</th><th>x and y</th></tr></thead><tbody><tr><td>True</td><td>True</td><td>True</td></tr><tr><td>True</td><td>False</td><td>False</td></tr><tr><td>False</td><td>True</td><td>False</td></tr><tr><td>False</td><td>False</td><td>False</td></tr></tbody></table></div><div class=\"code px2\" style=\"font-size: 0.75em;\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>x</th><th>y</th><th>x or y</th></tr></thead><tbody><tr><td>True</td><td>True</td><td>True</td></tr><tr><td>True</td><td>False</td><td>True</td></tr><tr><td>False</td><td>True</td><td>True</td></tr><tr><td>False</td><td>False</td><td>False</td></tr></tbody></table></div></div>\n<p><inline-code>x and y</inline-code> evaluates to <inline-code>True</inline-code> if and only if both <inline-code>x</inline-code> and <inline-code>y</inline-code> are <inline-code>True</inline-code>.<br>\n<inline-code>x or y</inline-code> evaluates to <inline-code>False</inline-code> if and only if both <inline-code>x</inline-code> and <inline-code>y</inline-code> are <inline-code>False</inline-code>.</p>\n<h2>Order of operations</h2>\n<p>In order of higher to lower priority:</p>\n<ul>\n<li><inline-code>not</inline-code></li>\n<li><inline-code>and</inline-code></li>\n<li><inline-code>or</inline-code></li>\n</ul>\n<p>As usual, you can use parentheses in order to change the priority.</p>\n<p>Examples:</p>\n<p>What does <inline-code>b and not a or b</inline-code> evaluate to if <inline-code>a = False</inline-code> and <inline-code>b = True</inline-code> ?</p>\n<div class=\"code\"><ul>\n<li>b and not a or b</li>\n<li>True and not False or True</li>\n<li>True and True or True</li>\n<li>True or True</li>\n<li>True</li>\n</ul></div>\n<p>What does <inline-code>a and not (a or b)</inline-code> evaluate to if <inline-code>a = True</inline-code> and <inline-code>b = False</inline-code> ?</p>\n<div class=\"code\"><ul>\n<li>a and not (a or b)</li>\n<li>True and not (True or False)</li>\n<li>True and not True</li>\n<li>True and False</li>\n<li>False</li>\n</ul></div>\n<h2>Short Circuit Evaluation</h2>\n<p>The evaluation of a boolean expression with <inline-code>and</inline-code> and <inline-code>or</inline-code> stops as soon as the end result can be inferred.</p>\n<p>For example, in the expression below evaluates to <inline-code>False</inline-code> no matter what <inline-code>not (x >= 1 or y == 3)</inline-code> evaluates to.</p>\n<python>>>> 2 &#x3C; 1 and not (x >= 1 or y == 3)\nFalse\n</python>\n<p>So, in general, for any expression with <inline-code>and</inline-code>,</p>\n<p><inline-code>left_operand and right_operand</inline-code></p>\n<p>if <inline-code>left_operand</inline-code> is <inline-code>False</inline-code>, Python does not evaluate <inline-code>right_operand</inline-code>.</p>\n<p>Similarly, for any expression with <inline-code>or</inline-code> operator,\n<inline-code>left_operand or right_operand</inline-code></p>\n<p>if <inline-code>left_operand</inline-code> is <inline-code>True</inline-code>, Python does not evaluate <inline-code>right_operand</inline-code>.</p>\n<p>For example,</p>\n<python># Evaluates to True no matter what (x &#x3C; 5) evaluates to\n>>> 1 == 1 or (x &#x3C; 5)\nTrue\n</python>\n<h3>Why is Short Circuit Evaluation useful?</h3>\n<ul>\n<li>It can save time.</li>\n<li>It can avoid unnecessary errors.</li>\n</ul>\n<p>For example,</p>\n<python>>>> x = 0\n>>> 1/x &#x3C; 0.5  # cannot divide a number by zero\nZeroDivisionError: division by zero\n\n>>> x != 0 and 1/x &#x3C; 0.5\nFalse\n\n>>> x = 3\n>>> x != 0 and 1/x &#x3C; 0.5\nTrue\n</python>\n<h2>Order of operations</h2>\n<div class=\"my2\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Operator</th><th>Associativity</th></tr></thead><tbody><tr><td><inline-code>()</inline-code> (parentheses)</td><td>-</td></tr><tr><td><inline-code>**</inline-code></td><td>Right</td></tr><tr><td>Unary <inline-code>-</inline-code></td><td>-</td></tr><tr><td><inline-code>*</inline-code>, <inline-code>/</inline-code>, <inline-code>//</inline-code>, <inline-code>%</inline-code></td><td>Left</td></tr><tr><td>Binary <inline-code>+</inline-code>, <inline-code>-</inline-code></td><td>Left</td></tr><tr><td><inline-code>==</inline-code>, <inline-code>!=</inline-code>, <inline-code>&#x3C;</inline-code>, <inline-code>></inline-code>, <inline-code>&#x3C;=</inline-code>, <inline-code>>=</inline-code></td><td>Left</td></tr><tr><td><inline-code>not</inline-code></td><td>-</td></tr><tr><td><inline-code>and</inline-code></td><td>Left</td></tr><tr><td><inline-code>or</inline-code></td><td>Left</td></tr><tr><td><inline-code>=</inline-code> (assignment)</td><td>Right</td></tr></tbody></table></div>\n<p>You don’t need to memorize all this, use parenthesis when in doubt!</p>\n<h2>Try these example in Thonny using debug</h2>\n<python>x = 30\nprint(x % 2 == 0 and x > 20)\n\nx = 10\nprint(x % 2 == 0 or x % 5 == 0 and x > 20)\n\nprint((x % 2 == 0 or x % 5 == 0) and x > 20)\n</python>\n<div class=\"p2 bggreen\"><p><b>Try it!</b></p><p>Write a program that takes 3 integers <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo separator=\"true\">,</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x, y, z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span></span> as inputs and prints out <inline-code>True</inline-code> if <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span> is an even number between <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span></span> and <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span></span>, <inline-code>False</inline-code> otherwise.</p><solution><python># Retrieve inputs from the user\nx = int(input(\"Enter the x: \"))\ny = int(input(\"Enter the y: \"))\nz = int(input(\"Enter the z: \"))\n\n\n# check if y is even\nis_even = y % 2 == 0\n\n# check if y is in between x and z\nincreasing = x &#x3C; y and y &#x3C; z\ndecreasing = x > y and y > z\nin_between = increasing or decreasing\n\n# Display the info\nprint(y, \"is an even number in between\", x, \"and\", z, \":\", is_even and in_between)\n</python></solution></div>\n<h1><code>if</code> statement — to execute or not to execute</h1>\n<p>To write useful programs, we almost always need to check certain conditions.</p>\n<ul>\n<li>We might want to execute certain statements only in specific situations.</li>\n<li><inline-code>if</inline-code> statement give us this ability</li>\n</ul>\n<div class=\"px1 py025 br5\" style=\"background-color: white; width: 30%; white-space: pre;\"><p><code class=\"bgred\">if</code>  <code class=\"bggreen\">condition</code>  <code class=\"bgyellow\">:</code>\n<code>    </code><code class=\"bgblue\">code block</code></p></div>\n<ul>\n<li><code class=\"bggreen\">condition</code> must be a boolean expression</li>\n<li><code class=\"bgblue\">code block</code> is one of more Python statements (lines of code)</li>\n<li><code class=\"bgblue\">code block</code> is executed only if the condition is true, otherwise it is skipped.</li>\n<li>Notice space before code block. It is called <sc>indentation</sc>.\n<ul>\n<li><div class=\"bgred px1 py025\">Indentation is required to tell Python that the code belongs inside <inline-code>if</inline-code> statement.</div></li>\n<li>Typically, 4 spaces are used for indentation.</li>\n<li>We can use <i>tab</i> key to indent.</li>\n</ul>\n</li>\n</ul>\n<p>Try the following examples with different values for variables.</p>\n<p>Example 1:</p>\n<python>x = 10  \nif x > 0:\n    print(x, \"is positive\")\n</python>\n<p>Example 2:</p>\n<python>num = -5.2\n\nabsolute_num = num\n\nif num &#x3C; 0:\n    absolute_num = -num\n    \nprint(\"Absolute value of\", num, \"is\", absolute_num)\n</python>\n<output>Absolute value of -5.2 is 5.2\n</output>\n<p>Example 3:</p>\n<python>x = 1000\ny = 123\n\nmin_value = x\n\nif y &#x3C; min_value:\n    min_value = y\n    \nprint(\"Minimum of\", x, \"and\", y, \"is\", min_value)\n</python>\n<output>Minimum of 1000 and 123 is 123\n</output>\n<h2><inline-code>if</inline-code> statement with <inline-code>else</inline-code> part</h2>\n<p><inline-code>if</inline-code> statements can have <inline-code>else</inline-code> part to make a choice between two code blocks.</p>\n<div class=\"px1 py025 br5\" style=\"background-color: white; width: 30%; white-space: pre;\"><p><code class=\"bgred\">if</code>  <code class=\"bggreen\">condition</code>  <code class=\"bgyellow\">:</code>\n<code>    </code><code class=\"bggreen\">code block<sub>1</sub></code>\n<code class=\"bgred\">else</code> <code class=\"bgyellow\">:</code>\n<code>    </code><code class=\"bgblue\">code block<sub>2</sub></code></p></div>\n<ul>\n<li>When <code class=\"bggreen\">condition</code> is <inline-code>True</inline-code>, <code class=\"bggreen\">code block<sub>1</sub></code> is executed</li>\n<li>Otherwise (<code class=\"bggreen\">condition</code> is <inline-code>False</inline-code>) and <code class=\"bgblue\">code block<sub>2</sub></code> is executed</li>\n<li>The code blocks are also called <sc>branches</sc> of the if-statement.</li>\n</ul>\n<python>x = 10  # change this to -5 and run\n\nif x > 0:\n   print(\"x is positive.\")\nelse:\n    print(\"x is not positive.\")\n</python>\n<p>Variables can be created inside the branches of <inline-code>if</inline-code> statement.<br>\nBe careful that all branches have same variable names!</p>\n<python>income = 15000\n\nif income &#x3C; 12000:\n    tax = 0.0\nelse:\n    taxes = income * 15.5 / 100\n    \nprint(\"Your tax is\", tax)\n</python>\n<output>NameError: name 'tax' is not defined\n</output>\n<div class=\"p2 bggreen\"><p><b>Try it!</b></p><p>Write a program <inline-code>even_or_odd.py</inline-code> that takes an integer as input from the user, call it <inline-code>X</inline-code>. Then the program should display either <inline-code>The number X is even</inline-code> OR <inline-code>The number X is odd</inline-code>, depending on the input received.</p><solution><python>num = int(input(\"Please enter a number: \"))\n\n# a number is even if remainder is zero when divided by 2\nif num % 2 == 0:\n    print(\"The number\", num, \"is even\")\nelse:\n    print(\"The number\", num, \"is odd\")\n</python></solution></div>\n<h2>Independent <inline-code>if</inline-code> vs <inline-code>if-else</inline-code></h2>\n<p>Will these two examples do exactly the same thing <i>always</i>?</p>\n<div class=\"flex\" style=\"width: 100%;\"><div><p><span class=\"sans f-2\">Two independent <inline-code>if</inline-code></span></p><python>if condition:\n   # some instructions\nif not condition\n   # more instructions\n</python></div><div style=\"width: 3em;\"></div><div><p><span class=\"sans f-2\"><inline-code>if-else</inline-code></span></p><python>if condition:\n   # some instructions\nelse:\n   # more instructions\n</python></div></div>\n<p>Not always. Let’s look at concrete examples of same kind:</p>\n<div class=\"flex\" style=\"width: 130%;\"><python>x = 3\nif x > 0:\n    print(\"Positive.\")\n    x = 0\nif x &#x3C;= 0:\n    print(\"Not positive.\")\n</python><div style=\"width: 3em;\"></div><python>x = 3\nif x > 0:\n    print(\"Positive.\")\n    x = 0\nelse:\n    print(\"Not positive.\")\n</python></div>\n<div class=\"flex\" style=\"width: 130%;\"><output>Positive.\nNot positive.\n</output><div style=\"width: 9em;\"></div><output>Positive.\n</output></div>\n<p>Here, we can see that in case of two independent <inline-code>if</inline-code> statements, the condition can be changed in the first <inline-code>if</inline-code> which can affect the second <inline-code>if</inline-code>.</p>\n<p>While in case of <inline-code>if-else</inline-code>, only one of the two — <inline-code>if</inline-code> branch or <inline-code>else</inline-code> branch — is executed, no matter what.</p>\n<h2>Chained <inline-code>if-elif-else</inline-code> statement</h2>\n<p>Sometime, we want to check a series of <i>mutually exclusive</i> conditions.</p>\n<p>To do so, we can use a series of <inline-code>elif</inline-code> blocks in an <inline-code>if</inline-code> statement.</p>\n<python>income = 20000\n\nif income &#x3C; 12000:\n    tax = 0.0\nelif income &#x3C; 30000:\n    tax = income * 15.0 / 100\nelif income &#x3C; 100000:\n    tax = income * 20.0 / 100\nelse:  # if all above were False i.e. income >= 100000\n    tax = income * 25.0 / 100\n    \nprint(\"Your tax is\", tax)\n</python>\n<ul>\n<li>Mutually exclusive — only one of these blocks will get executed.</li>\n<li>Order matters! If first of the conditions is <inline-code>True</inline-code>, later condition are not checked.\n<ul>\n<li>As soon as one block is executed, the remaining will be skipped</li>\n</ul>\n</li>\n<li>You can have as many <inline-code>elif</inline-code>’s as you want</li>\n<li>The final <inline-code>else</inline-code> part is not required so you may omit it if not needed.</li>\n</ul>\n<h2>Example</h2>\n<p>Is there anything wrong in code below?</p>\n<python>money = 5000.0\nif money > 0.0:\n    print(\"Positive balance\")\nelif money > 1000.0:\n    print(\"You're rich! Go celebrate!\")\nelse: \n    print(\"Uh-oh.\")\n</python>\n<output>Positive balance\n</output>\n<p>Order of conditions matters!</p>\n<h2>Nested <inline-code>if</inline-code> statements</h2>\n<p><inline-code>if</inline-code> statements can be nested inside other <inline-code>if</inline-code> statements.</p>\n<python>x = 10\nif x > 0:\n    print(\"Positive\")\nelse:\n    if x &#x3C; 0:\n        print(\"Negative\")\n    else:\n        print(\"Zero\")\n</python>\n<p>Above code is logically equivalent of the chained <inline-code>if</inline-code> below:</p>\n<python>x = 10\nif x > 0:\n    print(\"Positive\")\nelif x &#x3C; 0:\n    print(\"Negative\")\nelse:\n    print(\"Zero\")\n</python>\n<p>You can use either nested or chained conditionals, but note that nested conditional can easily become hard to read.</p>\n<h2>Correct indentation is essential!</h2>\n<p>Sometimes, incorrect indentation may not give an error but it may lead to unexpected program.</p>\n<python>income = 1000\n\nif income &#x3C; 12000:\n    print(\"You don't have to pay tax.\")\n    tax = 0.0\nelse:\n    print(\"You have to pay tax.\")\ntax = income * 15.0 / 100  # this line should be indented\n    \nprint(\"Your tax is\", tax)\n</python>\n<h2>Try it</h2>\n<p>Write a program <inline-code>even_or_multiple3.py</inline-code> so that it either prints:</p>\n<ul>\n<li>X is even</li>\n<li>X is an odd number multiple of 3</li>\n<li>X is an odd number not multiple of 3</li>\n</ul>\n<solution><python>num = int(input(\"Please enter a num: \"))\n\n# check if is even\nis_even = (num % 2 == 0)\n\n# check if multiple of 3\nmultiple_of_three = (num % 3 == 0)\n\nif is_even:\n    print(num, \"is even\")\nelif multiple_of_three:  \n    print(num, \"is odd and a multiple of 3\")\nelse:\n    print(num, \"is odd and not a multiple of 3\")\n    \n    \n# without extra variables:\n\n# if num % 2 == 0:\n#     print(num, \"is even\")\n# elif num % 3 == 0:\n#     print(num, \"is odd and a multiple of 3\")\n# else:\n#     print(num, \"is odd and not a multiple of 3\")\n</python></solution>\n<h1>Iteration using <inline-code>for</inline-code> loop</h1>\n<python>for i in range(5):\n    print(\"Hello\")\n</python>\n<output>Hello\nHello\nHello\nHello\nHello\n</output>\n<python>for i in range(5):\n    print(i)\n</python>\n<output>0\n1\n2\n3\n4\n</output>\n<p>What happened in the code above?</p>\n<ul>\n<li>range() function can produce a sequence of integers</li>\n<li><inline-code>for</inline-code> loop allows us to iterate i.e. “go over” that sequence, a number at a time\n<ul>\n<li>In each step of the loop, variable <inline-code>i</inline-code> gets a value from the sequence</li>\n</ul>\n</li>\n<li>We can have any valid variable name, other than <inline-code>i</inline-code> if we want.</li>\n</ul>\n<h2>Using range() function</h2>\n<p><inline-code>range()</inline-code> function takes up to 3 arguments:</p>\n<ul>\n<li><inline-code>range(end)</inline-code> — produces sequence <inline-code>0, 1, 2, ..., end-1</inline-code></li>\n<li><inline-code>range(start, end)</inline-code> — produces sequence <inline-code>start, start+1, ..., N</inline-code> where <inline-code>N &#x3C; end</inline-code></li>\n<li><inline-code>range(start, end, step)</inline-code>\n— if <inline-code>step > 0</inline-code>, produces sequence <inline-code>start, start+step, ..., N</inline-code> where <inline-code>N &#x3C; end</inline-code>\n— if <inline-code>step &#x3C; 0</inline-code>, produces sequence <inline-code>start, start+step, ..., N</inline-code> where <inline-code>N > end</inline-code></li>\n</ul>\n<python># 0, 1, 2, ..., 9\nfor i in range(10):\n    print(i)\n\n# 1, 2, ..., 10\nfor i in range(1, 11):\n    print(i)\n    \n# 0, 2, 4, ..., 18    \nfor i in range(0, 20, 2):\n    print(i)\n\n# 10, 15, 20, 25, ..., 95\nfor i in range(10, 100, 5):\n    print(i)\n\n# 10, 9, 8, ..., 1\nfor i in range(10, 0, -1):\n    print(i)\n</python>\n<h3>Examples</h3>\n<ol>\n<li>Compute sum of first N numbers.</li>\n</ol>\n<python>N = 50\n\ntotal = 0\nfor num in range(1, N+1):\n    total = total + num\n    \nprint(total)\n</python>\n<ol start=\"2\">\n<li>Compute sum of all multiples of either 3 or 5, between 100 and 200 (both inclusive).</li>\n</ol>\n<python>total = 0\nfor n in range(100, 201):\n    if n % 3 == 0 or n % 5 == 0:\n        total = total + n\n    \nprint(total)\n</python>\n<h1>Indexing &#x26; Slicing Strings</h1>\n<p>Recall that a string is a sequence of characters.</p>\n<p>Each character, therefore, has a position or an <sc>index</sc>.</p>\n<p>Index starts with zero. For example, for the string <inline-code>\"Hello\"</inline-code>:</p>\n<p></p>\n<p></p><table class=\"code\"><tbody><tr class=\"code\"><td>H</td><td>e</td><td>l</td><td>l</td><td>o</td></tr><tr class=\"sans f-2\"><td class=\"bt1\">0</td><td class=\"bt1\">1</td><td class=\"bt1\">2</td><td class=\"bt1\">3</td><td class=\"bt1\">4</td></tr></tbody></table>\n<p>For any string <inline-code>s</inline-code>, valid index values are from <inline-code>0</inline-code> to <inline-code>len(s)-1</inline-code>.</p>\n<p>Indices must be integers.</p>\n<python>>>> message = \"Hello\"\n>>> message[0]  # first letter\n'H'\n>>> message[1]  # second letter\n'e'\n>>> message[4]  # fifth letter, the last one in the string\n'o'\n>>> message[5]  # there is no letter at this index\nIndexError: string index out of range\n>>> message[1.0]\nTypeError: string indices must be integers\n</python>\n<h2>Traversing a string</h2>\n<p>We can use <inline-code>for</inline-code> loop with <inline-code>range()</inline-code> function to go over a string letter-by-letter.</p>\n<python>message = \"Hello\"\n\nfor i in range(len(message)):\n    print(i, message[i])\n</python>\n<output>0 H\n1 e\n2 l\n3 l\n4 o\n</output>\n<p>A more interesting example:</p>\n<python>letters = \"bcmrst\"\n\nfor i in range(len(letters)):\n    print(letters[i] + \"ake\")\n</python>\n<h2>Using slice to get substrings</h2>\n<p>Using slice notation we can get parts of a string.<br>\n<inline-code>string[start:end:step]</inline-code></p>\n<p>Indices must be integers and begin at zero.\n<inline-code>start</inline-code>, <inline-code>end</inline-code>, <inline-code>step</inline-code> values work similar to <inline-code>range()</inline-code> function.</p>\n<python>>>> fruit = \"pineapple\"\n>>> fruit[4:7]  # letters from index 4 to 6\n'app'\n>>> fruit[:4]  # start index is 0 if omitted, same as fruit[0:4]\n'pine'\n>>> fruit[4:]  # end index is len(fruit) if omitted, same as fruit[4:len(fruit)]\n'apple'\n>>> fruit[1:7:2]  # select letters at indices 1, 3, 5\n'iep'\n</python>\n<p>Examples</p>\n<p>Write a program to convert a date string given in format <inline-code>\"dd/mm/yyyy\"</inline-code>,<br>\ne.g. <inline-code>\"21/04/2021\"</inline-code> to <inline-code>\"Apr 21, 2021\"</inline-code>.</p>\n<python>date = \"21/04/2021\"\n\nday = date[:2]\nmonth = date[3:5]\nyear = date[6:]\n\nif month == \"01\":\n    month = \"Jan\"\nelif month == \"02\":\n    month = \"Feb\"\nelif month == \"03\":\n    month = \"Mar\"\nelif month == \"04\":\n    month = \"Apr\"\nelif month == \"05\":\n    month = \"May\"\nelif month == \"06\":\n    month = \"June\"\nelif month == \"07\":\n    month = \"July\"\nelif month == \"08\":\n    month = \"Aug\"\nelif month == \"09\":\n    month = \"Sep\"\nelif month == \"10\":\n    month = \"Oct\"\nelif month == \"11\":\n    month = \"Nov\"\nelif month == \"12\":\n    month = \"Dec\"\n    \nprint(month, day + \",\", year)\n</python>\n<h1>Docstrings</h1>\n<p>A <sc>docstring</sc> (documentation string) is a multiline (triple-quoted) string that we write after the header of a function to explain how the function works.</p>\n<p>It is an important part of programming to write such documentation.<br>\nYou will be expected do so in your assignments.</p>\n<python>def euclidean_distance(x1, y1, x2, y2):\n    \"\"\"\n    Computes Euclidean distance between two 2D points.\n\n    Args:\n        x1: x-coordinate of first point (float) \n        y1: y-coordinate of first point (float) \n        x2: x-coordinate of second point (float) \n        y2: y-coordinate of second point (float) \n\n    Returns: the euclidean distance as a float\n    \"\"\"\n    d = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    return d ** 0.5\n</python>\n<h1>Type annotations in function definition</h1>\n<p>When we define a function, we can <i>optionally</i> give type information for arguments.</p>\n<p>Such type annotations are not required but they tell us which types are expected when we call a function.</p>\n<python>def euclidean_distance(x1: float, y1: float, x2: float, y2: float) -> float:\n    # rest of the function body here\n</python>\n<python>def is_even(num: int) -> bool:\n    return num % 2 == 0\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}