{"pageProps":{"titles":["2.1 — Programming Basics","2.2 — Variables, Arithmetic & String operations","2.3 — Function Calls, Expressions","3.1 — Defining functions, Errors & Debugging","3.2 — Boolean Expressions, Comparison & Logical Operators","3.3 — Conditional execution using if statement","3.4 — for loop & String indexing, slicing","Python Style Guide","4.1 — Escape Characters & Controlling print()","4.2 — String methods & in operator","4.3 — while statement & Nested loops","4.4 — return statement & Importing modules","5.1 — Scope of Variables","5.2 — Lists & List Operations","5.3 — List Functions & Methods","5.4 — Tuples","6.1 — Object Identity, Immutability, Unpacking","6.2 — Sets","6.3 — Dictionaries"],"slugs":["Lecture-2.1","Lecture-2.2","Lecture-2.3.1","Lecture-3.1","Lecture-3.2","Lecture-3.3","Lecture-3.4","style-guide","Lecture-4.1","Lecture-4.2","Lecture-4.3","Lecture-4.4","Lecture-5.1","Lecture-5.2","Lecture-5.3","Lecture-5.4","Lecture-6.1","Lecture-6.2","Lecture-6.3"],"post":{"title":"5.2 — Lists & List Operations","slug":"Lecture-5.2","content":"<h1>Lists</h1>\n<ul>\n<li>A list is like a container that holds a sequence of arbitrary objects.</li>\n<li>Objects contained in a list are called <sc>elements</sc> or <sc>items</sc>.</li>\n<li>Lists are ordered! The order in which the items are stored in the list matters.</li>\n<li>Each item is associated with an index (index <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></span>: first item, index <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></span>: second item, etc.)</li>\n</ul>\n<h2>Creating a list</h2>\n<python># A list is created using square brackets, \n# with each item separated by a comma.\nprime_numbers = [2, 3, 5, 7, 11, 13]\nprint(prime_numbers)\n# [2, 3, 5, 7, 11, 13]\n\nprint(type(prime_numbers))\n# &#x3C;class 'list'>\n</python>\n<p>A list can contain items of any type. For example we can have a list of strings:</p>\n<python>days = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\n\n# Number of items in the list\nprint(len(days))  # 7\n\nempty_list = []\nprint(len(empty_list))  # 0\n</python>\n<p>A list can contain any number of items, from zero to as many as the computer’s memory allows.</p>\n<p>A list can contains objects of different types.</p>\n<python># list with mixed types\nnumbers = [1, 'two', 3.75]\n</python>\n<p>Items of a list don’t need to be unique.</p>\n<python># list with duplicate values\nnumbers = [5, \"five\", 5]\n</python>\n<h3>Why use a list?</h3>\n<python># Suppose we want to store grades for multiple students\n\ngrades1 = 80\ngrades2 = 100\ngrades3 = 65\n# ...\n# How many variables?!!\n\n# Use just one variable name \"grades\"\ngrades = [80, 100, 65]\n</python>\n<h2>Indexing a list</h2>\n<p>We can access an item inside a list using indexing (square brackets), just as we did for strings.</p>\n<python>days = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\nfirst_day = days[0]\nsecond_day = days[1]\nlast_day = days[6]\nprint(first_day, second_day, last_day)  # Mon Tue Sun\n\n# No item at index 7\nprint(days[7])  \n# IndexError: list index out of range\n\n# Negative indexing can be used as well\nprint(days[-1], days[-2])  # Sun Sat\n\nnumbers = [1, 'two', 3.75]\nprint(numbers[0] + numbers[2])  # 4.75\n\nprint(numbers[0] + numbers[1])\n# TypeError: unsupported operand type(s) for +: 'int' and 'str'\n</python>\n<h2>Slicing a list</h2>\n<p>Similar to strings, we can also get a sub-list — parts of a list — using slice notation.<br>\nSlicing creates a new list.</p>\n<python>days = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\nprint(days[2:5])\n# ['Wed', 'Thu', 'Fri']\n\nprint(days[:6:2])\n# ['Mon', 'Wed', 'Fri']\n\n# Make a copy of the whole list\nprint(days[:])\n# ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n\n# Makes a reversed copy of the list\nprint(days[::-1])\n# ['Sun', 'Sat', 'Fri', 'Thu', 'Wed', 'Tue', 'Mon']\n</python>\n<h2>Concatenation (+) and Replication (*)</h2>\n<p>The operators <inline-code>+</inline-code> and <inline-code>*</inline-code> work for lists as they worked for a string:</p>\n<python># lists a and b are joined to produce a third list c:\na = [1, 2]\nb = [10, 11, 12]\nc = a + b\nprint(c)\n# [1, 2, 10, 11, 12]\n\na = [1, 2]\n# resulting list consists of repeated items of list a:\nc = a * 3 \nprint(c)\n# [1, 2, 1, 2, 1, 2]\n</python>\n<h2>membership operators: <inline-code>in</inline-code> and <inline-code>not in</inline-code></h2>\n<p>The <inline-code>in</inline-code> and <inline-code>not in</inline-code> operators test for membership.</p>\n<p>We can use them to test if an object is present in a list.</p>\n<python>a = [1, 2]\nb = [10, 11, 12]\nprint(1 in a)  # True\nprint(11 in a) # False\nprint(5 not in b) # True\n\nx = 3.14\nprint(x in a or x in b)  # False\n</python>\n<p>These operators very useful in simplifying code:</p>\n<div class=\"flex\"><python># Instead of long conditions like this:\nif x == 5 or x == 7 or x == 10:\n    # do something\n</python><python># Now we can do:\nif x in [5, 7, 10]:\n    # do something\n</python></div>\n<h2>Lists and Loops</h2>\n<p>Following code computes an average of grades in the list.</p>\n<python>grades = [85, 78.5, 98, 75, 100]\ntotal = grades[0] + grades[1] + grades[2] + grades[3] + grades[4] \navg = total / 5\nprint(avg)  # prints 87.3\n</python>\n<p>For loops are very useful for looping through all the items in an list.\nFor instance we could use a for loop to compute the sum of all the items in the list grades:</p>\n<python>grades = [85, 78.5, 98, 75, 100]\n\ntotal = 0\nfor i in range(5):\n   total += grades[i]\n\navg = total / 5\nprint(avg) # prints 87.3\n</python>\n<p>Above code can be generalized!</p>\n<python>grades = [85, 78.5, 98, 75, 100]\n\ntotal = 0\nN = len(grades)  # Number of items in grades list\nfor i in range(N):\n   total += grades[i]\n\navg = total / N\nprint(avg) # prints 87.3\n</python>\n<p>Alternatively, we can avoid using an index if we don’t need to use an index in our loop:</p>\n<python>grades = [85, 78.5, 98, 75, 100]\n\ntotal = 0\nN = len(grades)  # Number of items in grades list\nfor g in grades:\n   total += g\n\navg = total / N\nprint(avg) # # prints 87.3\n</python>\n<h2>Modifying the content of a list</h2>\n<p>We can modify the content of a list after it has been created.</p>\n<p>We can change a single item using its index and the assignment operator.</p>\n<python>days = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\ndays[0] = \"Sun\"\nprint(days)\n# ['Sun', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n\ndays[7] = \"No such day\"\n# IndexError: list assignment index out of range\n</python>\n<h2>Updating contiguous items</h2>\n<p>We can modify several contiguous items using slice assignment.\nThe syntax of the slice assignment is as follow:</p>\n<pre><code>list_object[start:stop:step] = iterable\n</code></pre>\n<p>For now, think of <inline-code>iterable</inline-code> to be a sequence such as a list or a string.</p>\n<p>Examples:</p>\n<python>days = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\nprint(days[1:3])\n# ['Tue', 'Wed']\n\ndays[1:3] = [1, 2]\nprint(days)\n# ['Mon', 1, 2, 'Thu', 'Fri', 'Sat', 'Sun']\n\nprint(days[1::2])\n# [1, 'Thu', 'Sat']\n\ndays[1::2] = [\"\", \"\", \"\"]\nprint(days)\n# ['Mon', '', 2, '', 'Fri', '', 'Sun']\n\ndays[:3] = \"MTW\"\nprint(days)\n# ['M', 'T', 'W', '', 'Fri', '', 'Sun']\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}