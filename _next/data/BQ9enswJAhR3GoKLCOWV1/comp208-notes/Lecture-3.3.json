{"pageProps":{"titles":["2.1 — Programming Basics","2.2 — Variables, Arithmetic & String operations","2.3 — Function Calls, Expressions","3.1 — Defining functions, Errors & Debugging","3.2 — Boolean Expressions, Comparison & Logical Operators","3.3 — Conditional execution using if statement","3.4 — for loop & String indexing, slicing","Python Style Guide","4.1 — Escape Characters & Controlling print()","4.2 — String methods & in operator","4.3 — while statement & Nested loops","4.4 — return statement & Importing modules","5.1 — Scope of Variables","5.2 — Lists & List Operations","5.3 — List Functions & Methods","5.4 — Tuples","6.1 — Object Identity, Immutability, Unpacking","6.2 — Sets","6.3 — Dictionaries"],"slugs":["Lecture-2.1","Lecture-2.2","Lecture-2.3.1","Lecture-3.1","Lecture-3.2","Lecture-3.3","Lecture-3.4","style-guide","Lecture-4.1","Lecture-4.2","Lecture-4.3","Lecture-4.4","Lecture-5.1","Lecture-5.2","Lecture-5.3","Lecture-5.4","Lecture-6.1","Lecture-6.2","Lecture-6.3"],"post":{"title":"3.3 — Conditional execution using if statement","slug":"Lecture-3.3","content":"<h1>Flow of execution</h1>\n<p>Flow of execution refers to order in which statements (lines of code) in our program are executed.</p>\n<p>So far in our programs, each line was executed unconditionally.\nFor most programs, it is not enough as we need to make choices or run code repeatedly.</p>\n<p>We need to control the flow of execution in our programs.</p>\n<p>The control flow of a program determines:</p>\n<ul>\n<li>Which parts of the code should always be executed</li>\n<li>Which parts should be executed only under certain conditions</li>\n<li>Which parts should be executed repeatedly</li>\n</ul>\n<p>All of these can be achieved using control flow statements:</p>\n<ul>\n<li><inline-code>if</inline-code> statement for conditional execution</li>\n<li><inline-code>for</inline-code> and <inline-code>while</inline-code> loops for repeated execution</li>\n</ul>\n<h1><code>if</code> statement — to execute or not to execute</h1>\n<p>To write useful programs, we almost always need to check certain conditions.</p>\n<ul>\n<li>We might want to execute certain statements only in specific situations.</li>\n<li><inline-code>if</inline-code> statement give us this ability</li>\n</ul>\n<div class=\"px1 py025 br5\" style=\"background-color: white; width: 30%; white-space: pre;\"><p><code class=\"bgred\">if</code>  <code class=\"bggreen\">condition</code>  <code class=\"bgyellow\">:</code>\n<code>    </code><code class=\"bgblue\">code block</code></p></div>\n<ul>\n<li><code class=\"bggreen\">condition</code> must be a boolean expression</li>\n<li><code class=\"bgblue\">code block</code> is one of more Python statements (lines of code)</li>\n<li><code class=\"bgblue\">code block</code> is executed only if the condition is True, otherwise it is skipped.</li>\n<li>Notice space before code block. It is called <sc>indentation</sc>.\n<ul>\n<li><div class=\"bgred px1 py025\">Indentation is required to tell Python that the code belongs inside <inline-code>if</inline-code> statement.</div></li>\n<li>Typically, 4 spaces are used for indentation.</li>\n<li>We can use <i>tab</i> key to indent.</li>\n</ul>\n</li>\n</ul>\n<p>Try the following examples with different values for variables.</p>\n<p>Example 1:</p>\n<python>x = 10  \nif x > 0:\n    print(x, \"is positive\")\n</python>\n<p>Example 2:</p>\n<python>num = -5.2\n\nabsolute_num = num\n\nif num &#x3C; 0:\n    absolute_num = -num\n    \nprint(\"Absolute value of\", num, \"is\", absolute_num)\n</python>\n<output>Absolute value of -5.2 is 5.2\n</output>\n<p>Example 3:</p>\n<python>x = 1000\ny = 123\n\nmin_value = x\n\nif y &#x3C; min_value:\n    min_value = y\n    \nprint(\"Minimum of\", x, \"and\", y, \"is\", min_value)\n</python>\n<output>Minimum of 1000 and 123 is 123\n</output>\n<h2><inline-code>if</inline-code> statement with <inline-code>else</inline-code> part</h2>\n<p><inline-code>if</inline-code> statements can have <inline-code>else</inline-code> part to make a choice between two code blocks.</p>\n<div class=\"px1 py025 br5\" style=\"background-color: white; width: 30%; white-space: pre;\"><p><code class=\"bgred\">if</code>  <code class=\"bggreen\">condition</code>  <code class=\"bgyellow\">:</code>\n<code>    </code><code class=\"bggreen\">code block<sub>1</sub></code>\n<code class=\"bgred\">else</code> <code class=\"bgyellow\">:</code>\n<code>    </code><code class=\"bgblue\">code block<sub>2</sub></code></p></div>\n<ul>\n<li>When <code class=\"bggreen\">condition</code> is <inline-code>True</inline-code>, <code class=\"bggreen\">code block<sub>1</sub></code> is executed</li>\n<li>Otherwise (<code class=\"bggreen\">condition</code> is <inline-code>False</inline-code>) and <code class=\"bgblue\">code block<sub>2</sub></code> is executed</li>\n<li>The code blocks are also called <sc>branches</sc> of the if-statement.</li>\n</ul>\n<python>x = 10  # change this to -5 and run\n\nif x > 0:\n   print(\"x is positive.\")\nelse:\n    print(\"x is not positive.\")\n</python>\n<p>Variables can be created inside the branches of <inline-code>if</inline-code> statement.<br>\nBe careful that all branches have same variable names!</p>\n<p>There is an error in code below. To fix it, we have to make sure both branches of <inline-code>if</inline-code> statement create the same variable name.</p>\n<python>income = 15000\n\nif income &#x3C; 12000:\n    tax = 0.0\nelse:\n    taxes = income * 15.5 / 100  # Change variable name to tax\n    \nprint(\"Your tax is\", tax)\n</python>\n<output>NameError: name 'tax' is not defined\n</output>\n<div class=\"p2 bggreen\"><p><b>Try it!</b></p><p>Write a program that takes an integer as input from the user, call it <inline-code>X</inline-code>. Then the program should display either <inline-code>The number X is even</inline-code> OR <inline-code>The number X is odd</inline-code>, depending on the input received.</p><solution><python>num = int(input(\"Please enter a number: \"))\n\n# a number is even if remainder is zero when divided by 2\nif num % 2 == 0:\n    print(\"The number\", num, \"is even\")\nelse:\n    print(\"The number\", num, \"is odd\")\n</python></solution></div>\n<h2>Chained <inline-code>if-elif-else</inline-code> statement</h2>\n<p>Sometime, we want to check a series of <i>mutually exclusive</i> conditions.</p>\n<p>To do so, we can use a series of <inline-code>elif</inline-code> blocks in an <inline-code>if</inline-code> statement.</p>\n<python>income = 20000\n\nif income &#x3C; 12000:\n    tax = 0.0\nelif income &#x3C; 30000:\n    tax = income * 15.0 / 100\nelif income &#x3C; 100000:\n    tax = income * 20.0 / 100\nelse:  # if all above were False i.e. income >= 100000\n    tax = income * 25.0 / 100\n    \nprint(\"Your tax is\", tax)\n</python>\n<ul>\n<li>Mutually exclusive — only one of these blocks will get executed.</li>\n<li>Order matters! If first of the conditions is <inline-code>True</inline-code>, later conditions are not checked.\n<ul>\n<li>As soon as one block is executed, the remaining will be skipped.</li>\n</ul>\n</li>\n<li>You can have as many <inline-code>elif</inline-code>’s as you want</li>\n<li>The final <inline-code>else</inline-code> part is not required so you may omit it if not needed.</li>\n</ul>\n<h2>Example</h2>\n<p>Is there anything wrong in code below?</p>\n<python>money = 5000.0\n\nif money > 0.0:\n    print(\"Positive balance\")\nelif money > 1000.0:\n    print(\"You're rich! Go celebrate!\")\nelse: \n    print(\"Uh-oh. No money.\")\n</python>\n<output>Positive balance\n</output>\n<p>Order of conditions matters!</p>\n<solution><python>money = 5000.0\n\nif money > 1000.0:\n    print(\"You're rich! Go celebrate!\")\nelif money > 0.0:\n    print(\"Positive balance\")\nelse: \n    print(\"Uh-oh. No money.\")\n</python></solution>\n<h2>Nested <inline-code>if</inline-code> statements</h2>\n<p><inline-code>if</inline-code> statements can be nested inside other <inline-code>if</inline-code> statements.</p>\n<python>x = 10\nif x > 0:\n    print(\"Positive\")\nelse:\n    if x &#x3C; 0:\n        print(\"Negative\")\n    else:\n        print(\"Zero\")\n</python>\n<p>Above code is logically equivalent of the chained <inline-code>if</inline-code> below:</p>\n<python>x = 10\nif x > 0:\n    print(\"Positive\")\nelif x &#x3C; 0:\n    print(\"Negative\")\nelse:\n    print(\"Zero\")\n</python>\n<p>You can use either nested or chained conditionals, but note that nested conditional can easily become hard to read.</p>\n<h2>Correct indentation is essential!</h2>\n<p>Sometimes, incorrect indentation may not give an error but it may lead to unexpected program.</p>\n<python>income = 1000\n\nif income &#x3C; 12000:\n    print(\"You don't have to pay tax.\")\n    tax = 0.0\nelse:\n    print(\"You have to pay tax.\")\ntax = income * 15.0 / 100  # this line should be indented\n    \nprint(\"Your tax is\", tax)\n</python>\n<h2>Try it</h2>\n<p>Write a program that given a number <inline-code>x</inline-code> prints either of the following:</p>\n<ul>\n<li><inline-code>x</inline-code> is even</li>\n<li><inline-code>x</inline-code> is an odd number multiple of 3</li>\n<li><inline-code>x</inline-code> is an odd number not multiple of 3</li>\n</ul>\n<solution><python>x = int(input(\"Please enter a number: \"))\n\nif x % 2 == 0:\n    print(x, \"is even\")\nelif x % 3 == 0:  \n    print(x, \"is odd and a multiple of 3\")\nelse:\n    print(x, \"is odd and not a multiple of 3\")\n\n</python></solution>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}