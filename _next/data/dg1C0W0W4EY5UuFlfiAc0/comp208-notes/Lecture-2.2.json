{"pageProps":{"titles":["2.1 — Programming Basics","2.2 — Variables, Arithmetic & String operations","2.3 — Function Calls, Expressions","3.1 — Defining functions, Errors & Debugging","3.2 — Boolean Expressions, Comparison & Logical Operators","3.3 — Conditional execution using if statement","3.4 — for loop & String indexing, slicing","Python Style Guide","4.1 — Escape Characters & Controlling print()","4.2 — String methods & in operator","4.3 — while statement & Nested loops","4.4 — return statement & Importing modules","5.1 — Scope of Variables","5.2 — Lists & List Operations","5.3 — List Functions & Methods","5.4 — Tuples","6.1 — Object Identity, Immutability, Unpacking","6.2 — Sets","6.3 — Dictionaries","7.1 — Nested data structures & comparisons","7.2 — Iterables & comprehensions","7.3 — Reading and writing files","8.1 — Default arguments & Modules","8.2 — Handling Exceptions","9.1 — Object Oriented Programming (OOP)","9.2 — More on methods & __str__","10.1 — NumPy","10.2 — Plotting using Matplotlib","Week 10 — More on NumPy","11.1 — Root finding","11.2 — Interpolation & Curve fitting","12.1 — More NumPy & Linear algebra","12.2 — Solving a system of linear equations","12.3 — Numerical Integration","Week 13 — Binary search, Sorting, Random numbers"],"slugs":["Lecture-2.1","Lecture-2.2","Lecture-2.3.1","Lecture-3.1","Lecture-3.2","Lecture-3.3","Lecture-3.4","style-guide","Lecture-4.1","Lecture-4.2","Lecture-4.3","Lecture-4.4","Lecture-5.1","Lecture-5.2","Lecture-5.3","Lecture-5.4","Lecture-6.1","Lecture-6.2","Lecture-6.3","Lecture-7.1","Lecture-7.2","Lecture-7.3","Lecture-8.1","Lecture-8.2","Lecture-9.1","Lecture-9.2","Lecture-10.1","Lecture-10.2","Lecture-10.3","Lecture-11.1","Lecture-11.2","Lecture-12.1","Lecture-12.2","Lecture-12.3","Lecture-13"],"post":{"title":"2.2 — Variables, Arithmetic & String operations","slug":"Lecture-2.2","content":"<h1>Comments</h1>\n<p>Comments are annotations we add to our program and are ignored by the Python interpreter.</p>\n<p>In Python, we start a comment using <inline-code>#</inline-code>.</p>\n<p>A comment can appear on a line by itself or at the end of a line.</p>\n<p>We use comments to:</p>\n<ul>\n<li>Make the code easier to read and understand by explaining how it works.</li>\n<li>Indicate authorship and license.</li>\n<li>Disable some code (prevent it from executing) but still keeping it in the file.</li>\n</ul>\n<python># Author: Deven\n# My first program\n\n# This is a comment on its own line &#x26; it will be ignored\nprint(\"Hello, world!\")  # str\nprint(123)  # int\nprint(1.614)  # float \n</python>\n<p>In Thonny, we can use <inline-code>Edit menu -> Toggle comment</inline-code> to comment/uncomment the selected lines.</p>\n<h1>Variables</h1>\n<p>In Python, a <sc>Variable</sc> is a name that refers to an object in computer memory.<br>\nA variable can be created using <sc>Assignment Statement</sc>:</p>\n<div class=\"center code my3\"><p><span class=\"bgblue p1 br5\">variable_name = value</span></p></div>\n<p><inline-code>=</inline-code> is known as the <sc>assignment operator</sc>.</p>\n<python># create a variable and assign it value 20\ntemperature = 20  \n\n# variable temperature refers to 20 which is displayed\nprint(\"Today's temperature is\", temperature)\n\n# show type of the variable\nprint(\"Type of temperature variable is\", type(temperature))\n</python>\n<output>Today's temperature is 20\nType of temperature variable is &#x3C;class 'int'>\n</output>\n<h1>Arithmetic with numbers</h1>\n<p>Calculations with numbers can be done using <i>arithmetic operators</i>.</p>\n<python># Addition\nprint(1.5 + 1.5) # 3.0\n\n# Subtraction\nprint(10 - 20)  # -10\n\n# Multiplication\nprint(42 * 42)  # 1764\n\n# Division\nprint(1 / 5)  # 0.2\n\n# Exponentiation (x to the power of y)\nprint(2 ** 16)  # 65536\n\n\ntemperature = 20\n# Unary minus operator\nprint(-temperature)  # -20\n\n\n# Computing rest mass energy of an electron\nrest_mass = 9.109e-31  # Using scientific notation for floating point numbers\nspeed_of_light = 3e8\nrest_mass_energy = rest_mass * (speed_of_light ** 2)  # E = mc^2\nprint(rest_mass_energy)  # 8.198099999999999e-14\n</python>\n<h2>Floor division and remainder</h2>\n<img src=\"module-2/divmod.svg\" style=\"margin:2em;\">\n<python># floor division\nprint(20 // 3)  # 6\n\n# remainder\nprint(20 % 3)  # 2\n\n\n# Converting seconds to minutes\n\nduration = 320\nprint(duration, \"seconds equal\", duration / 60, \"minutes.\")\n# 320 seconds equal 5.333333333333333 minutes.\n \n# Alternative approach:\nminutes = duration // 60\nseconds = duration % 60\nprint(duration, \"seconds equal\", minutes, \"minutes and\", seconds, \"seconds.\")\n# 320 seconds equal 5 minutes and 20 seconds.\n</python>\n<h2>Result type of arithmetic operations</h2>\n<p>For all operators (except division <inline-code>/</inline-code>):</p>\n<ul>\n<li>if one or more of the operands are of type <inline-code>float</inline-code>, result value will have type <inline-code>float</inline-code></li>\n<li>if both operands are of type <inline-code>int</inline-code>, result value will have type <inline-code>int</inline-code>.</li>\n</ul>\n<p>For division operator <inline-code>/</inline-code>:</p>\n<ul>\n<li>the result value is always of type <inline-code>float</inline-code> regardless of whether the operands are of type <inline-code>int</inline-code> or <inline-code>float</inline-code>.</li>\n</ul>\n<python>x = 2 + 1\nprint(x, type(x))  # 3 &#x3C;class 'int'>\n\nx = 2 + 1.0\nprint(x, type(x))  # 3.0 &#x3C;class 'float'>\n\n# Classic division always results in float\nx = 1 / 2  \nprint(x, type(x))  # 0.5 &#x3C;class 'float'>\n\n</python>\n<div class=\"px2 py1 my2\" style=\"border: solid 1px lightgray; border-radius:5px; background-color: #d6efd6;\"><p><b class=\"p0\">Try the above examples with other operators!</b></p></div>\n<h1>Basic string operations</h1>\n<p>Strings are sequences of zero or more characters.</p>\n<p>In Python, strings are enclosed by either single or double quotes.</p>\n<python>\"Hello\"\n'everyone!'\n\"I'm Batman.\"  # single quote allowed inside double quotes,\n'You can call me \"Bruce\".'  # and vice versa.\n'123' # this is a string, not a number!\n\"\" # this is an empty string\n\" \" # this is a string with just one space\n\n# a multi-line string using triple quotes\n\"\"\"The woods are lovely, dark and deep,   \nBut I have promises to keep,   \nAnd miles to go before I sleep,   \nAnd miles to go before I sleep.\n\"\"\"\n\n# We can also use single quotes for multi-line strings\n'''I hold it true, whate'er befall;\nI feel it when I sorrow most;\n'Tis better to have loved and lost\nThan never to have loved at all.\n'''\n</python>\n<h2>String concatenation</h2>\n<p>Strings can be joined with <inline-code>+</inline-code> operator.</p>\n<python>message = \"Hello\" + \"everyone\"\nprint(message)  # Helloeveryone\n\nname = \"Alice\"\nmessage = \"Hello \" + name\nprint(message)  # Hello Alice\n\n# Result is a string \"123\" and not the number 6\nstring = \"1\" + \"2\" + \"3\"\nprint(string)  # 123\n\nprice = 100\nprint(price + \" USD\")\n# TypeError: unsupported operand type(s) for +: 'int' and 'str'\n\n</python>\n<h2>String repetition</h2>\n<p>String can be repeated multiple times using <inline-code>*</inline-code> operator.</p>\n<python>print(\"Welcome! \" * 3)  # 'Welcome! Welcome! Welcome! '\n\nprint(4 * \"ha\")  # 'hahahaha'\n\n</python>\n<h2>String length</h2>\n<p>The function <inline-code>len()</inline-code> returns length of its argument string.</p>\n<python>password = \"xyz1234\"\nprint(\"Password length:\", len(password))\n# Password length: 7\n\nprint(len(1234))\n# TypeError: object of type 'int' has no len()\n\n</python>\n<h1>More on Variables</h1>\n<p>Let us write code that implements the following formula to convert fahrenheit to celsius:</p>\n<p><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mo>=</mo><mfrac><mrow><mn>5</mn><mo stretchy=\"false\">(</mo><mi>f</mi><mo>−</mo><mn>32</mn><mo stretchy=\"false\">)</mo></mrow><mn>9</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">c = \\frac{5(f-32)}{9}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.355em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">9</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">5</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">3</span><span class=\"mord mtight\">2</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<python>print(\"10 F in C is\", 5 * (10 - 32) / 9)\n</python>\n<h2>Variables allow “saving” intermediate results of a computation</h2>\n<p>We can use variable to store the result so that we can reuse it in the program later.</p>\n<python>\n# Using variable fahrenheit, now we just change value here\n# instead of changing it in the formula below\nfahrenheit = 10\n\n# Store the result of the expression\ncelsius = 5 * (fahrenheit - 32) / 9\n\nprint(fahrenheit, \"F in C is\", celsius)\n\n# Use variable celsius for more calculations\nprint(\"Adding 10 degrees today:\", celsius + 10)\n</python>\n<h2>Variables can be reassigned new values</h2>\n<python># Create variable name \"number\" and assign a value to it\nnumber = 123  \nprint(number)  # displays 123\n\n# Assign new value to existing variable \"number\"\nnumber = -50\n\nprint(number)  # displays -50\n\n# add 10 and assign the result value to existing variable \"number\"\nnumber = number + 10\n\nprint(number)  # displays -40\n</python>\n<p>New values can be of different type.</p>\n<div style=\"margin-top: 2em; margin-bottom: 2em; width: 1000;\">\n<iframe width=\"1000\" height=\"500\" frameborder=\"0\" src=\"https://pythontutor.com/iframe-embed.html#code=number%20%3D%20123%20%20%23%20an%20int%20value%0Amessage%20%3D%20%22hello%22%20%20%23%20a%20string%0A%0Aprint%28number,%20type%28number%29%29%0Aprint%28message,%20type%28message%29%29%0A%0A%23%20Now%20variable%20number%20refers%20to%20the%20string%20%22hello%22%0Anumber%20%3D%20message%0A%0Aprint%28number,%20type%28number%29%29%0Aprint%28message,%20type%28message%29%29%0A&#x26;codeDivHeight=400&#x26;codeDivWidth=350&#x26;cumulative=false&#x26;curInstr=0&#x26;heapPrimitives=true&#x26;origin=opt-frontend.js&#x26;py=3&#x26;rawInputLstJSON=%5B%5D&#x26;textReferences=false\"> </iframe>\n</div>\n<p>However, variables should be changed with caution as it can produce errors or strange results.</p>\n<python>number = 123  # an int value\nmessage = \"hello\"  # a string\n\n\n# Now variable number refers to the string \"hello\"\nnumber = message\n\nprint(number * 2) # String repetition!\n\nprint(number - 10) # minus won't work with string.\n</python>\n<output>hellohello\nTraceback (most recent call last):\n    print(number - 10)\nTypeError: unsupported operand type(s) for -: 'str' and 'int'\n</output>\n<h2>Example: Swapping values</h2>\n<p>Sometimes we need to swap (interchange) values of two variables.</p>\n<p>A naive attempt (which does not work):</p>\n<python>x = 137\ny = 42\n\n# Try swapping\nx = y\ny = x\n\nprint(x, y)  # 42 42\n</python>\n<p>The following will work:</p>\n<python>x = 137\ny = 42\n\n# Correct way to swap\ntemp = x\nx = y\ny = temp\n\nprint(x, y)  # 42 137\n</python>\n<h2>Rules for variable names</h2>\n<ul>\n<li>A variable name can only contain alpha-numeric characters and underscores <inline-code>A-Z, a-z, 0-9, _</inline-code></li>\n<li>A variable name cannot start with a number</li>\n<li>Variable names are case-sensitive\n<ul>\n<li>(<inline-code>cat</inline-code>, <inline-code>Cat</inline-code>, and <inline-code>CAT</inline-code> are three different variables)</li>\n</ul>\n</li>\n<li>They cannot be keywords.\n<ul>\n<li>Python has 33 reserved keywords, you can see a list of them by typing <inline-code>help(\"keywords\")</inline-code> in the Python shell.</li>\n</ul>\n</li>\n</ul>\n<div class=\"px2 my2\" style=\"border: solid 1px lightgray; border-radius:5px; background-color: #d6dcef;\"><p>Python files should be named using the same rules as above.</p></div>\n<h2>Good practice for naming variables</h2>\n<ul>\n<li>Name your variable something descriptive of its purpose or content.</li>\n<li>If the variable is one word, all letters should be lowercase. Eg: <inline-code>hour</inline-code>, <inline-code>day</inline-code>.</li>\n<li>If the variable contains more than one word, then they should all be lowercase and each separated by an underscore. This is called <i>snake case</i>.<br>\ne.g. <inline-code>is_sunny</inline-code>, <inline-code>cat_name</inline-code></li>\n<li>Good variable names: <inline-code>hour</inline-code>, <inline-code>is_open</inline-code>,  <inline-code>number_of_books</inline-code>, <inline-code>course_code</inline-code></li>\n<li>Bad variable names: <inline-code>asfdstow</inline-code>, <inline-code>nounderscoreever</inline-code>, <inline-code>ur_stupid</inline-code>, <inline-code>CaPiTAlsANyWHErE</inline-code></li>\n</ul>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}