{"pageProps":{"titles":["Week 1 — Computer and Programming Basics","Week 2 — Types, Variables, Expressions, Functions","Sep 9-10 Problem Set 2","Week 3 —  Conditionals & Iteration","Sep 16-17 Problem Set","Week 4 —  print(), String methods, while loop","Python Style Guide","Sep 23-24 Problem Set","Week 5 —  Scope of variables, Lists & Tuples","Sep 30-Oct 1 Problem Set","Week 6 —  Immutability, Dictionary & Set","Oct 7-8 Problem Set","Week 7 —  Nested data structures, iterables, comprehensions","Week 8 —  Exceptions & File IO","Oct 21-22 Problem Set","Week 9 — Object oriented programming","Oct 28-29 — Problem Set","Week 10 — NumPy & Matplotlib","Nov 4-5 More on NumPy & Problems"],"slugs":["Lecture-1.2","Lecture-week2","_Sep09-problem-set","Lecture-week3","_Sep16-17-problem-set","Lecture-week4","style-guide","_Sep23-24-problem-set","Lecture-week5","_Sep30-Oct1-problem-set","Lecture-week6","_Oct7-8-problem-set","Lecture-week7","Lecture-week8","_Oct21-22_problem-set","Lecture-week9","_Oct28-29_problem-set","Lecture-week10","_Nov4-5_problem-set"],"post":{"title":"Week 7 —  Nested data structures, iterables, comprehensions","slug":"Lecture-week7","content":"<h1>Nested data structures</h1>\n<h2>Matrix as a list of lists</h2>\n<p>A matrix of numbers can be stored as a list of lists.</p>\n<python>matrix = [[81, 75, 90, 60], \n          [80, 70, 85, 55],\n          [40, 50, 45, 85]]\n\n# By using one index, we can get inner list (a row of matrix)\nprint(matrix[1]) \n# [80, 70, 85, 55]\n\n# By using two indices, we can get an element inside an inner list\nprint(matrix[1][3])  # 55\n</python>\n<h3>Iterating over matrices in <i>row-first</i> order:</h3>\n<div class=\"flex\"><python>matrix = [[81, 75, 90, 60], \n          [80, 70, 85, 55],\n          [40, 50, 45, 85]]\n\nnum_rows = len(matrix)  # no. of inner lists\nnum_cols = len(matrix[0])  # length of an inner list\n\nfor r in range(num_rows):\n    print(\"Row\", r, \":\")\n    for c in range(num_cols):\n        print(matrix[r][c])\n</python><output>Row 0 :\n81\n75\n90\n60\nRow 1 :\n80\n70\n85\n55\nRow 2 :\n40\n50\n45\n85\n</output></div>\n<h2>List of tuples</h2>\n<python>points = [(1, 1, 3), (4, 10.5, 9), (7, 4.4, 9.7)]\n# List element can be modified:\npoints[1] = (4, 12, 10)  # Changing to new points\nprint(points)  # [(1, 1, 3), (4, 12, 10), (7, 4.4, 9.7)]\n\n# Trying to change the second points's z-coordinate\npoints[1][2] = 20  \n# TypeError: 'tuple' object does not support item assignment\n</python>\n<p>Iterating over list of tuples:</p>\n<python>points = [(1, 1, 3), (4, 10.5, 9), (7, 4.4, 9.7)]\n\n# p is a tuple\nfor p in points:\n    dist = (p[0]**2 + p[1]**2 + p[2]**2)**0.5\n    print(p, \":\", dist)\n    \n# (1, 1, 3) : 3.3166247903554\n# (4, 10.5, 9) : 14.396180048887969\n# (7, 4.4, 9.7) : 12.7455874717488\n</python>\n<python>points = [(1, 1, 3), (4, 10.5, 9), (7, 4.4, 9.7)]\n\n# Unpacking tuple into 3 variables x, y, z\nfor x, y, z in points:\n    dist = (x**2 + y**2 + z**2)**0.5\n    print(x, y, z, \":\", dist)\n    \n# 1 1 3 : 3.3166247903554\n# 4 10.5 9 : 14.396180048887969\n# 7 4.4 9.7 : 12.7455874717488\n</python>\n<h2>List of dictionaries</h2>\n<p>A dictionary can be used to represent a data record such as student record in a course in the following example.</p>\n<p>A list of such dictionaries can store multiple data records.</p>\n<python>student_records = [\n    {\"Name\": \"Khalid\", \"ID\": 2601234, \"grades\": [90, 95, 100]},\n    {\"Name\": \"Reza\", \"ID\": 2601000, \"grades\": [95, 95, 97]},\n    {\"Name\": \"Deven\", \"ID\": 2605000, \"grades\": [80, 85, 90]}\n]\n\n# grades is a list with 3 assignment grades\n</python>\n<p>What is assignment 1 grades for “Reza” ?</p>\n<python>print(student_records[1][\"grades\"][0])  # 95\n</python>\n<p>Display total grade for each student.</p>\n<python>for record in student_records:\n    print(\"Total grade for\", record[\"Name\"], \"is\", sum(record[\"grades\"]))\n</python>\n<output>Total grade for Khalid is 285\nTotal grade for Reza is 287\nTotal grade for Deven is 255\n</output>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>Comparing data structures</h1>\n<p>Data structures — list, tuples, sets and dictionaries can be compared for equality using <inline-code>==</inline-code> and <inline-code>!=</inline-code> operators.</p>\n<python># Lists, order matters\ngrades1 = [85, 80, 100]\ngrades2 = [85, 80, 100]\ngrades3 = [85, 100, 80]\n\n# True only when all elements are equal in order\nprint(grades1 == grades2)  # True\nprint(grades2 == grades3)  # False\n\n\n# tuples, order matters\npoint1 = (1, 1, 2)\npoint2 = (1, 2, 1)\nprint(point1 != point2)  # True\n\n\n# sets, order does not matter\nfruits1 = {\"apple\", \"orange\", \"banana\"}\nfruits2 = {\"orange\", \"apple\",  \"banana\"}\n\n# True only when sets are of equal length and both sets contain same elements\nprint(fruits1 == fruits2)  # True\nprint(fruits1 == {\"apple\", \"orange\", \"banana\", \"grapes\"})  # False\n\n# dictionaries, order does not matter\nphonebook1 = {\"A\": 5140001000, \"B\": 5140002000, \"C\": 5140003000 }\nphonebook2 = { \"B\": 5140002000, \"A\": 5140001000, \"C\": 5140003000 }\n\n# True only when dictionaries are of equal length and \n# both contain same key-value pairs\nprint(phonebook1 == phonebook2)  # True\nprint(phonebook1 == {\"A\": 4381001000, \"B\": 5140002000, \"C\": 5140003000 })  # False\n\n\n# Works for nested structures as well\npoints1 = [(1, 1), (2, 10)]\npoints2 = [(1, 1), (2, 10)]\nprint(points1 == points2)  # True\nprint(points1 == [(1, 1), (2, 5)])  # False\n\nstudent1 = {\"name\": \"Reza\", \"grades\": [90, 100, 100]}\nstudent2 = {\"name\": \"Reza\", \"grades\": [90, 100, 90]}\nprint(student1 == student2)  # False\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>Iterables</h1>\n<p>An <sc>iterable</sc> is a kind of object that can produce a sequence of other objects and hence can be used in a <inline-code>for</inline-code> loop.</p>\n<p>We have seen the following types of iterable objects:</p>\n<div class=\"code\"><ul>\n<li>range: sequence of integers</li>\n<li>strings: sequence of characters</li>\n<li>tuples: (immutable) sequence of any object</li>\n<li>lists: sequence of any object</li>\n<li>dictionaries: sequence of tuples (key, value)</li>\n<li>sets: sequence of immutable objects (but order is not defined)</li>\n</ul></div>\n<p>Iterables can be used as arguments of the functions <inline-code>list()</inline-code>, <inline-code>set()</inline-code>, <inline-code>tuple()</inline-code>, <inline-code>dict()</inline-code>, etc.</p>\n<python># range object only stores start, end and step size.\nprint(range(10, 101, 10))  # range(10, 101, 10)\n\n# list stores all objects in memory \nl = list(range(10, 101, 10))\nprint(l)\n# [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n\ns = set(range(10, 101, 10))\nprint(s)\n# {100, 70, 40, 10, 80, 50, 20, 90, 60, 30}\n\nd = dict([(\"a\", 1), (\"b\", 2)])\nprint(d)  # {'a': 1, 'b': 2}\n</python>\n<h2><inline-code>enumerate</inline-code> function</h2>\n<div class=\"flex\"><python>mylist = [10, 50, -3.14, 5]\n\nfor i in range(len(mylist)):\n    num = mylist[i]\n    print(i, num)\n</python><python>mylist = [10, 50, -3.14, 5]\n\nfor i, num in enumerate(mylist):\n    print(i, num)\n</python></div>\n<python>mylist = [10, 50, -3.14, 5]\nprint(enumerate(mylist))\n# &#x3C;enumerate object at 0x10e327100>\n\n# enumerate creates an iterable of tuples (index, element), \n# which we convert to list\nlist_of_tuples = list(enumerate(mylist))\nprint(list_of_tuples)\n# [(0, 10), (1, 50), (2, -3.14), (3, 5)]\n</python>\n<h2><inline-code>zip</inline-code> function</h2>\n<p><inline-code>zip(x, y)</inline-code> function creates an iterable of tuples <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_i, y_i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span> where <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> is element from <inline-code>x</inline-code> and <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">y_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> is element from <inline-code>y</inline-code>.</p>\n<python>x_values = [0.5, -2, 5, 10]\ny_values = [-1.5, 3, -3.5, 20]\n\npoints = list(zip(x_values, y_values))\nprint(points)\n# [(0.5, -1.5), (-2, 3), (5, -3.5), (10, 20)]\n</python>\n<div class=\"flex\"><python>x_vector = [1, 2.5, 5]\ny_vector = [2, 4, 10.5]\n\ntotal = 0\nfor i in range(len(x_vector)):\n    total += x_vector[i] * y_vector[i]\n    \nprint(total)\n</python><python>x_vector = [1, 2.5, 5]\ny_vector = [2, 4, 10.5]\n\ntotal = 0\nfor x, y in zip(x_vector, y_vector):\n    total += x * y\n    \nprint(total)\n</python></div>\n<p>What happens when one of the list arguments of <inline-code>zip</inline-code> is shorter?</p>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>List, set and dictionary comprehensions</h1>\n<p>We often find ourselves repeating the following pattern to create a list.</p>\n<p>Python provides a simpler way to create a list using list comprehension.</p>\n<python>some_list = []\nfor i in some_iterable:\n    some_list.append(some_expression)\n\n# Using list comprehension\nsome_list = [some_expression for i in some_iterable]\n</python>\n<p>Examples:</p>\n<python>even_nums = [i for i in range(2, 20, 2)]\nprint(even_nums)\n# [2, 4, 6, 8, 10, 12, 14, 16, 18]\n\n\n# Need not use loop variable i in the expression\nzeros = [0 for i in range(7)]\nprint(zeros)\n# [0, 0, 0, 0, 0, 0, 0]\n\n\nimport math\n# We can use any expression for values\nsine_values = [math.sin(x) for x in [-math.pi/2, 0, math.pi/2]]\nprint(sine_values)\n# [-1.0, 0.0, 1.0]\n\n\nstring = \"10.0,20.5,100.123\"\nnumbers = [float(word) for word in string.split(\",\")]\nprint(numbers)\n# [10.0, 20.5, 100.123]\n</python>\n<h3>Nested list comprehensions</h3>\n<python>matrix = [[10, 20, 30],\n          [40, 50, 60],\n          [70, 80, 90]]\n\nsquared = [[item ** 2 for item in row] for row in matrix]\n\nprint(squared)\n# [[100, 400, 900],\n#  [1600, 2500, 3600],\n#  [4900, 6400, 8100]]\n\n</python>\n<h3>Using if-statement in list comprehension</h3>\n<python>squares_of_odds = []\nfor x in range(1, 20):\n    if x % 2 != 0:\n        squares_of_odds.append(x * x)\n\nprint(squares_of_odds)\n# [1, 9, 25, 49, 81, 121, 169, 225, 289, 361]\n\n# same as above but using list comprehension\nsquares_of_odds = [x * x for x in range(1, 20) if x % 2 != 0]\nprint(squares_of_odds)\n# [1, 9, 25, 49, 81, 121, 169, 225, 289, 361]\n\n</python>\n<h3>Set and dictionary comprehension</h3>\n<python>odd_squares = {i*i for i in range(1, 20, 2)}\nprint(odd_squares)\n# {1, 121, 225, 289, 9, 169, 361, 81, 49, 25}\n\n\nnames = [\"A\", \"B\", \"C\", \"D\"]\nnames_to_index = {name: i for i, name in enumerate(names)}\nprint(names_to_index)\n# {'A': 0, 'B': 1, 'C': 2, 'D': 3}\n</python>\n<h1>Default arguments of functions</h1>\n<ul>\n<li>Python allows function arguments to have default values.\n<ul>\n<li>These arguments are called <sc>keyword arguments</sc>.</li>\n</ul>\n</li>\n<li>If the function is called without the keyword argument, the argument gets its default value.</li>\n</ul>\n<p>Example: both <inline-code>greeting</inline-code> and <inline-code>num_of_times</inline-code> have a default value in the function below:</p>\n<python>def greet(name, greeting=\"Hello\", num_of_times=1): \n    for i in range(num_of_times):\n        print(greeting, name)\n\n# try the following one at a time:\n# greet(\"Dev\")\n# greet(\"Dev\", greeting=\"Hi\")\n# greet(\"Dev\", num_of_times=3)\n# greet(\"Dev\", greeting=\"Hi\", num_of_times=3)\n# greet(\"Dev\", num_of_times=3, greeting=\"Hi\")\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}