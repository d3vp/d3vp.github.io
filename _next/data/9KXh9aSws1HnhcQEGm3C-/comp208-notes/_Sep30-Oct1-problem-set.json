{"pageProps":{"titles":["Week 1 — Computer and Programming Basics","Week 2 — Types, Variables, Expressions, Functions","Sep 9-10 Problem Set 2","Week 3 —  Conditionals & Iteration","Sep 16-17 Problem Set","Week 4 —  print(), String methods, while loop","Python Style Guide","Sep 23-24 Problem Set","Week 5 —  Scope of variables, Lists & Tuples","Sep 30-Oct 1 Problem Set","Week 6 —  Immutability, Dictionary & Set","Oct 7-8 Problem Set","Week 7 —  Nested data structures, iterables, comprehensions","Week 8 —  Exceptions & File IO","Oct 21-22 Problem Set","Week 9 — Object oriented programming","Oct 28-29 — Problem Set","Week 10 — NumPy & Matplotlib","Nov 4-5 More on NumPy & Problems"],"slugs":["Lecture-1.2","Lecture-week2","_Sep09-problem-set","Lecture-week3","_Sep16-17-problem-set","Lecture-week4","style-guide","_Sep23-24-problem-set","Lecture-week5","_Sep30-Oct1-problem-set","Lecture-week6","_Oct7-8-problem-set","Lecture-week7","Lecture-week8","_Oct21-22_problem-set","Lecture-week9","_Oct28-29_problem-set","Lecture-week10","_Nov4-5_problem-set"],"post":{"title":"Sep 30-Oct 1 Problem Set","slug":"_Sep30-Oct1-problem-set","content":"<p><span style=\"margin-left: -1em;\"><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1.</mn></mrow><annotation encoding=\"application/x-tex\">1.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">.</span></span></span></span></span></span> Write a function that takes a positive integer, <inline-code>n</inline-code>, as argument and returns a list with <inline-code>n</inline-code> random numbers between <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></span> and <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></span>.</p>\n<python>from random import random\n\ndef random_list(n: int) -> list[float]:\n    # Start with an empty list\n    \n    # Call the random() function n times in a loop\n    # and add the random number to the list\n\n    # return the list\n\n\nprint(random_list(10))\n</python>\n<solution><python>from random import random\n\ndef random_list(n: int) -> list[float]:\n    result = []\n    for i in range(n):\n        result.append(random())\n        \n    return result\n\n\nprint(random_list(10))\n</python></solution>\n<hr style=\"margin: 2em auto; border-top: 1px solid #b0b0b0;\">\n<p><span style=\"margin-left: -1em;\"><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2.</mn></mrow><annotation encoding=\"application/x-tex\">2.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">.</span></span></span></span></span></span> Write the function <inline-code>euclidean_distance</inline-code> that returns Euclidean distance between two 2D points.<br>\nThe arguments are two tuples, where each tuple contains x and y coordinates for a point.</p>\n<python>def euclidean_distance(p1: tuple[float], p2: tuple[float]) -> float:\n    # Use indexing (p1[0], etc.) to get the coordinates to compute the distance\n\n\ndist = euclidean_distance((1, 1), (2, 3))  # tuples\nprint(dist)  # 2.23606797749979\n</python>\n<solution><python>def euclidean_distance(p1: tuple[float], p2: tuple[float]) -> float:\n    \"\"\"\n    Computes Euclidean distance between two 2D points.\n\n    Args:\n        p1: tuple of length 2\n        p2: tuple of length 2\n\n    Returns: the euclidean distance as a float\n    \"\"\"\n    d = (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2\n    return d ** 0.5\n\n\ndist = euclidean_distance((1, 1), (2, 3))  # tuples\nprint(dist)  # 2.23606797749979\n</python></solution>\n<hr style=\"margin: 2em auto; border-top: 1px solid #b0b0b0;\">\n<p><span style=\"margin-left: -1em;\"><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3.</mn></mrow><annotation encoding=\"application/x-tex\">3.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mord\">.</span></span></span></span></span></span> Write a function called <inline-code>filter_values</inline-code> that takes a list of integers and returns\na new list consisting of the numbers above a given threshold.</p>\n<python>def filter_values(nums: list[int], threshold: int) -> list[int]:\n    # Start with an empty list\n\n    # Loop over the list nums and add the number to the new list if \n    # it is greater than the threshold\n\n\n\nprint(filter_values([3, 1, 2, 5, 4], 3))  # [5, 4]\nprint(filter_values([3, 1, 2, 5, 4], 5))  # []\n</python>\n<solution><python>def filter_values(nums: list[int], threshold: int) -> list[int]:\n    '''Return a new list consisting of those numbers in nums\n        that are above threshold\n    '''\n    new_list = []\n    \n    for n in nums:\n        if n > threshold:\n            new_list.append(n)\n\n    return new_list\n\n\nprint(filter_values([3, 1, 2, 5, 4], 3))  # [5, 4]\nprint(filter_values([3, 1, 2, 5, 4], 5))  # []\n</python></solution>\n<hr style=\"margin: 2em auto; border-top: 1px solid #b0b0b0;\">\n<p><span style=\"margin-left: -1em;\"><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4.</mn></mrow><annotation encoding=\"application/x-tex\">4.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mord\">.</span></span></span></span></span></span> Write a function called <inline-code>bonus_grades</inline-code> that takes a list of grades and add a bonus to each grade. Grades should not exceed <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>100</mn></mrow><annotation encoding=\"application/x-tex\">100</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span></span> after adding the bonus. The function does not return anything.</p>\n<python>def bonus_grades(grades: list[int], bonus: int) -> None:\n    # Loop over the grades, \n        # add bonus to each grade.\n        # if new grade exceeds 100, make new grade 100\n        # change the grade in the list to new grade\n\n\ngrades = [55, 60, 67, 97]\nbonus_grades(grades, 5)\nprint(grades)  # [60, 65, 72, 100]\n</python>\n<solution><python>def bonus_grades(grades: list[int], bonus: int) -> None:\n    for i in range(len(grades)):\n        grades[i] = min(grades[i] + bonus, 100)\n        \n        \n  \ngrades = [55, 60, 67, 97]\nbonus_grades(grades, 5)\nprint(grades)  # [60, 65, 72, 100]\n</python></solution>\n<hr style=\"margin: 2em auto; border-top: 1px solid #b0b0b0;\">\n<p><span style=\"margin-left: -1em;\"><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5.</mn></mrow><annotation encoding=\"application/x-tex\">5.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span><span class=\"mord\">.</span></span></span></span></span></span> Given a list <inline-code>mylist</inline-code>, we know that we can use slicing to make a reversed copy of the list:</p>\n<python>mylist = [1, 2, 3]\nreversed_mylist = mylist[::-1]  # creates a copy\nprint(mylist)  # [1, 2, 3]\nprint(reversed_mylist)  # [3, 2, 1]\n</python>\n<p>In this question, we want to reverse a list without creating a copy.</p>\n<p>Write a function <inline-code>reverse_inplace</inline-code> that takes a list <inline-code>array</inline-code> as an argument and modifies <inline-code>array</inline-code> so that order of its elements are reversed.<br>\nThe function should return nothing and it should not create a copy of the array.</p>\n<python>def reverse_inplace(array: list) -> None:\n    # Use two indices i and j, \n    # i goes from left to right, while j goes from right to left.\n    # In the loop, swap (exchange) array[i] and array[j]\n\n\nnumbers = [1, 2, 3, 4, 5, 6]\nreverse_inplace(numbers)\nprint(numbers)  # [6, 5, 4, 3, 2, 1]\n\nfruits = [\"orange\", \"apple\", \"banana\"]\nreverse_inplace(fruits)\nprint(fruits)  # ['banana', 'apple', 'orange']\n</python>\n<solution><python>def reverse_inplace(array: list) -> None:\n    \"\"\" Reverses the array in place, without creating a copy.\n        Returns nothing.\n    \"\"\"\n    i = 0\n    j = len(array) - 1\n    while i &#x3C; j:\n        # Swap values at indices i and j\n        temp = array[i]\n        array[i] = array[j]\n        array[j] = temp\n        \n        i += 1\n        j -= 1\n\n\nnumbers = [1, 2, 3, 4, 5, 6]\nreverse_inplace(numbers)\nprint(numbers)\n\nfruits = [\"orange\", \"apple\", \"banana\"]\nreverse_inplace(fruits)\nprint(fruits)\n</python></solution>\n<hr style=\"margin: 2em auto; border-top: 1px solid #b0b0b0;\">\n<p><span style=\"margin-left: -1em;\"><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>6.</mn></mrow><annotation encoding=\"application/x-tex\">6.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mord\">.</span></span></span></span></span></span> Design a function called <inline-code>sum_of_two</inline-code> that takes a list of numbers and one target number, and checks if it is possible to find the target number as the sum of two numbers in the list. The same number can be used twice in the sum.</p>\n<python>def sum_of_two(nums: list[int], target: int) -> bool:\n    # Use two nested loops to get all pairs of numbers n1 and n2 from the list\n    # if sum of any n1 and n2 is equal to the target, return True\n    # If there are no such n1 and n2, return False\n\n\nprint(sum_of_two([1, 5, 10], 15))  # True\nprint(sum_of_two([1, 5, 10], 13))  # False\nprint(sum_of_two([1, 5, 10], 2))  # True\n</python>\n<solution><python>def sum_of_two(nums: list[int], target: int) -> bool:\n    \"\"\" Returns True iff it is possible to form target as\n        the sum of two numbers from nums.\n    \"\"\"\n    for n1 in nums:\n        for n2 in nums:\n            if n1 + n2 == target:\n                return True\n    \n    return False\n\n\n# Another approach:\n# def sum_of_two(nums: list[int], target: int) -> bool:\n#     \"\"\" Returns True iff it is possible to form target as\n#         the sum of two numbers from nums.\n#     \"\"\"\n#     for n in nums:\n#         if (target - n) in nums:\n#             return True\n#     \n#     return False\n\n\nprint(sum_of_two([1, 5, 10], 15))  # True\nprint(sum_of_two([1, 5, 10], 13))  # False\nprint(sum_of_two([1, 5, 10], 2))  # True\n</python></solution>\n<hr style=\"margin: 2em auto; border-top: 1px solid #b0b0b0;\">\n<p><span style=\"margin-left: -1em;\"><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>7.</mn></mrow><annotation encoding=\"application/x-tex\">7.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">7</span><span class=\"mord\">.</span></span></span></span></span></span> Write a function <inline-code>dot_product</inline-code> that takes two lists of numbers (vectors) and returns the dot product of the two vectors.</p>\n<python>def dot_product(x: list[float], y: list[float]) -> float:\n    # Use a single loop (need to use index here)\n    # take product of x[i] and y[i] and sum all products\n\n\nx = [1, 2.5, 5]\ny = [2, 4, 10.5]\nprint(dot_product(x, y))  # 64.5\n</python>\n<solution><python>def dot_product(x: list[float], y: list[float]) -> float:\n    total = 0\n    for i in range(len(x)):\n        total += x[i] * y[i]\n        \n    return total\n\n\nx = [1, 2.5, 5]\ny = [2, 4, 10.5]\nprint(dot_product(x, y))  # 64.5\n</python></solution>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}