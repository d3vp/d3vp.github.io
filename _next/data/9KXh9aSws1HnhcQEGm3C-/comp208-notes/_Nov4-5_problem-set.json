{"pageProps":{"titles":["Week 1 — Computer and Programming Basics","Week 2 — Types, Variables, Expressions, Functions","Sep 9-10 Problem Set 2","Week 3 —  Conditionals & Iteration","Sep 16-17 Problem Set","Week 4 —  print(), String methods, while loop","Python Style Guide","Sep 23-24 Problem Set","Week 5 —  Scope of variables, Lists & Tuples","Sep 30-Oct 1 Problem Set","Week 6 —  Immutability, Dictionary & Set","Oct 7-8 Problem Set","Week 7 —  Nested data structures, iterables, comprehensions","Week 8 —  Exceptions & File IO","Oct 21-22 Problem Set","Week 9 — Object oriented programming","Oct 28-29 — Problem Set","Week 10 — NumPy & Matplotlib","Nov 4-5 More on NumPy & Problems"],"slugs":["Lecture-1.2","Lecture-week2","_Sep09-problem-set","Lecture-week3","_Sep16-17-problem-set","Lecture-week4","style-guide","_Sep23-24-problem-set","Lecture-week5","_Sep30-Oct1-problem-set","Lecture-week6","_Oct7-8-problem-set","Lecture-week7","Lecture-week8","_Oct21-22_problem-set","Lecture-week9","_Oct28-29_problem-set","Lecture-week10","_Nov4-5_problem-set"],"post":{"title":"Nov 4-5 More on NumPy & Problems","slug":"_Nov4-5_problem-set","content":"<h2>Creating NumPy arrays</h2>\n<p><inline-code>np.array</inline-code> infers <inline-code>dtype</inline-code> based on types of numbers in the argument.</p>\n<python>x = np.array([10, 20, 30])\nprint(x) #[10 20 30]\nprint(x.dtype) # int64\n\nx = np.array([1.2, 3.14, 10.15])\nprint(x) #[ 1.2   3.14 10.15]\nprint(x.dtype) # float64\n\nx = np.array([10.0, 20, 30])\nprint(x) #[10. 20. 30.]\nprint(x.dtype) # float64\n\n\n# we can explicity specify what dtype we want:\nx = np.array([10, 20, 30], dtype=float)\nprint(x) #[10. 20. 30.]\nprint(x.dtype) # float64\n\n# float is truncated to int (not rounded)\nx = np.array([1.2, 3.14, 10.65], dtype=int)\nprint(x) #[ 1  3 10]\nprint(x.dtype) # int64\n</python>\n<h2>Different shapes for different purposes</h2>\n<div class=\"flex\" style=\"align-items: center;\"><pre><code>[1.0 5.0 3.5 4.0 5.0 1.2]\n</code></pre><div><p>One point in 6D euclidean space</p></div></div>\n<div class=\"flex\" style=\"align-items: center;\"><pre><code>[[1.0 5.0 3.5]\n [4.0 5.0 1.2]]\n</code></pre><div><p>Two points in 3D euclidean space</p></div></div>\n<div class=\"flex\" style=\"align-items: center;\"><pre><code>[[1.0 5.0]\n [3.5 4.0]\n [5.0 1.2]]\n</code></pre><div><p>Three points in 2D euclidean space</p></div></div>\n<python>import numpy as np\n\n\nx = np.arange(1, 13) # 1D array\nprint(x)\n# [ 1  2  3  4  5  6  7  8  9 10 11 12]\n\n\n# 2D array, a 3x4 matrix\nmatrix1 = x.reshape((3, 4))\nprint(matrix1)\n# [[ 1  2  3  4]\n#  [ 5  6  7  8]\n#  [ 9 10 11 12]]\n\n\n# 2D array, a 2x6 matrix\nmatrix2 = matrix1.reshape((2, 6))\nprint(matrix2)\n# [[ 1  2  3  4  5  6]\n#  [ 7  8  9 10 11 12]]\n\n\ny = matrix2.reshape((12,)) # 1D array\nprint(y)\n# [ 1  2  3  4  5  6  7  8  9 10 11 12]\n</python>\n<h2><inline-code>numpy.arange</inline-code> and <inline-code>numpy.linspace</inline-code></h2>\n<python># Similar to built-in range(),\n# arguments are start, stop and step\n\nx = np.arange(10)\nprint(x)\n#[0 1 2 3 4 5 6 7 8 9]\n\n# Unlike range() float numbers are allowed\nx = np.arange(10.0, 20.0, 2.5)\nprint(x)\n# [10.  12.5 15.  17.5]\n\n\n# Create an array of 5 evenly spaced numbers in interval [0, 1]\nx = np.linspace(0, 1, 5)\nprint(x)\n# [0.   0.25 0.5  0.75 1.  ]\n</python>\n<h2>Broadcasting — operations with scalar and numpy array</h2>\n<python>x = np.linspace(-1.0, 5.0, 7)\n\nprint(x / 5)\n# [-0.2  0.   0.2  0.4  0.6  0.8  1. ]\n\nprint(x + 4)\n# [3. 4. 5. 6. 7. 8. 9.]\n\nprint((x - 3) * 2)\n# [-8. -6. -4. -2.  0.  2.  4.]\n</python>\n<h2>Special values — <inline-code>numpy.nan</inline-code>, <inline-code>numpy.inf</inline-code></h2>\n<p>Numpy has special values to represent invalid or extreme values that result from numerical computation</p>\n<ul>\n<li><inline-code>numpy.nan</inline-code> (not a number)</li>\n<li><inline-code>numpy.inf</inline-code>  (infinity)</li>\n</ul>\n<python>arr = np.linspace(-1.0, 4.0, 6)\nprint(arr)\n#[-1.  0.  1.  2.  3.  4.]\n\nprint(np.log(arr))\n#[       nan       -inf 0.         0.69314718 1.09861229 1.38629436]\n\n# Any operation on np.nan results in np.nan\nprint(np.nan * 10, 0 / np.nan)\n# nan nan\n\n# Some operations are allowed on np.inf\n\nprint(np.inf, -np.inf)\n# inf -inf\n\nprint(0 / np.inf, 1 / np.inf)\n# 0.0 0.0\n\nprint(np.inf * np.inf, 100 + np.inf)\n# inf inf\n</python>\n<h2>Vector operations</h2>\n<p>Arithmetic operators also work when both operands are numpy arrays. The operations are performed element-wise.</p>\n<python>a = np.linspace(10, 50, 5)\nprint(a)  # [10. 20. 30. 40. 50.]\nb = np.linspace(1, 5, 5)\nprint(b)  # [1. 2. 3. 4. 5.]\n\nprint(a + b)\n#[11. 22. 33. 44. 55.]\n\nprint(a / b)\n#[10. 10. 10. 10. 10.]\n</python>\n<p>Shapes of arrays have to match for vector operations.</p>\n<python>x = np.full(6, 1)  # [1 1 1 1 1 1]\ny = np.full(8, 2)  # [2 2 2 2 2 2 2 2]\n\nprint(x + y)\n# ValueError: operands could not be broadcast together with shapes (6,) (8,)\n</python>\n<h1>Slicing 2D array</h1>\n<img src=\"week10/course_array.png\" style=\"width: 80%; margin: 0 0 0 2em;\">\n<python>import numpy as np\n\ngrades = np.array([[94, 84, 97, 79],\n                   [81, 88, 93, 85],\n                   [87, 95, 86, 77]])\n\nprint('Grades for student 1, course 2:')\nprint(grades[1, 2])  # 93\n\n\nprint('All grades for student 2:')\nprint(grades[2, :])  # [87 95 86 77]\n\nprint('All grades for course 0:')\nprint(grades[:, 0])  # [94 81 87]\n</python>\n<h2>Assigning values using indices and slices</h2>\n<python>import numpy as np\n\ngrades = np.array([[94, 84, 97, 79],\n                   [81, 88, 93, 85],\n                   [87, 95, 86, 77]])\n\n# Setting same value to all indices in the slice\ngrades[0:2, 1:3] = 100\nprint(grades)\n# [[ 94 100 100  79]\n#  [ 81 100 100  85]\n#  [ 87  95  86  77]]\n\n# Setting values from array of same shape\ngrades[0:2, 1:3] = np.array([[10, 20], [30, 40]])\nprint(grades)\n# [[94 10 20 79]\n#  [81 30 40 85]\n#  [87 95 86 77]]\n</python>\n<h2>Using numpy function on 2D arrays</h2>\n<python>import numpy as np\n\ngrades = np.array([[94, 84, 97, 79],\n                   [81, 88, 93, 85],\n                   [87, 95, 86, 77]])\n\n</python>\n<p>Google to find methods to do the following:</p>\n<ul>\n<li>Find max and mean (average) for each course (columns).</li>\n<li>Find max and mean (average) for each student (rows).</li>\n<li>Find max and mean of all the grades (whole 2d array).</li>\n</ul>\n<solution><p>import numpy as np</p><p>grades = np.array([[94, 84, 97, 79],\n[81, 88, 93, 85],\n[87, 95, 86, 77]])</p><h1>Max for each course</h1><p>print(grades.max(axis=0))</p><h1>[94 95 97 85]</h1><h1>Mean for each course</h1><p>print(grades.mean(axis=0))</p><h1>[87.33333333 89.         92.         80.33333333]</h1><h1>Max for each student</h1><p>print(grades.max(axis=1))</p><h1>[97 93 95]</h1><h1>Mean for each student</h1><p>print(grades.mean(axis=1))</p><h1>[88.5  86.75 86.25]</h1><h1>Max of all grades</h1><p>print(grades.max())  # 97</p><h1>Mean of all grades</h1><p>print(grades.mean())  # 87.16666666666667</p></solution>\n<h2>Using list/array of booleans as index</h2>\n<p>When comparison operators are used with NumPy arrays, result is an array of boolean values.</p>\n<python>import numpy as np\n\narr = np.array([10, 11, 12, 13, 14, 15, 16, 17])\nprint(arr % 2 == 0) # produces numpy array of booleans\n# [ True False  True False  True False  True False]\n</python>\n<p>We can use a list/array of booleans as index to select elements of NumPy array</p>\n<python>import numpy as np\n\narr = np.array([10, 11, 12, 13])\nindices = [True, False, False, True]\nprint(arr[indices])\n# [10 13]\n\narr = np.array([10, 11, 12, 13, 14, 15, 16, 17])\nprint(arr[arr % 2 == 0])\n# [10 12 14 16]\n\n\narr = np.array([-10, -20, 0, 24, -50, 33, 10])\nprint(arr[arr > 0])\n# [24 33 10]\n</python>\n<h2>Using a list/array of integers as index</h2>\n<p>Multiple elements of a numpy array can be selected using a list or an array of indices</p>\n<python>nums = np.arange(10, 100, 10)\n# [10 20 30 40 50 60 70 80 90]\n\nindices = [0, 1, 5]\nprint(nums[indices]) # [10 20 60]\n\n# Output will be in same order as indices\nindices = np.array([2, 8, 5, 1])\nprint(nums[indices]) # [30 90 60 20]\n</python>\n<p>For 2D arrays,</p>\n<python>import numpy as np\n\nmatrix = np.arange(1, 13).reshape((3,4))\nprint(matrix)\n# [[ 1  2  3  4]\n#  [ 5  6  7  8]\n#  [ 9 10 11 12]]\n\nrow_indices = [0, 2]  \nprint(matrix[row_indices, :]) # Select rows 0 &#x26; 2\n# [[ 1  2  3  4]\n#  [ 9 10 11 12]]\n\ncol_indices = [1, 2]\nprint(matrix[:, col_indices]) # Select columns 1 &#x26; 2\n# [[ 2  3]\n#  [ 6  7]\n#  [10 11]]\n\n# Select numbers at (0, 1) and  (2, 2)\nprint(matrix[row_indices, col_indices])\n# [ 2 11]\n</python>\n<h2>Question</h2>\n<p>Write code to get the numbers that are common between two python NumPy arrays. Google to find which function to use.</p>\n<python>import numpy as np\n\na = np.array([1, 2, 3, 2, 3])\nb = np.array([7, 2, 10, 3, 7])\n</python>\n<solution><python>import numpy as np\n\na = np.array([1, 2, 3, 2, 3])\nb = np.array([7, 2, 10, 3, 7])\ncommon = np.intersect1d(a, b)\nprint(common)\n</python></solution>\n<h2>Question</h2>\n<p>Write a function that uses NumPy arrays to evaluate the following expression:</p>\n<div class=\"math math-display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo fence=\"true\">∣</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mi>π</mi><mi>x</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>−</mo><mn>3</mn><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mfrac><mi>x</mi><mi>π</mi></mfrac><msup><mo stretchy=\"false\">)</mo><mn>3</mn></msup><mo fence=\"true\">∣</mo></mrow><annotation encoding=\"application/x-tex\">\\left|sin(2 \\pi x)^2 - 3 cos(\\frac{x}{\\pi})^3\\right|</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.859975em;vertical-align:-0.686em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.173975em;\"><span style=\"top:-1.955985em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∣</span></span></span><span style=\"top:-2.556985em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∣</span></span></span><span style=\"top:-2.572975em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∣</span></span></span><span style=\"top:-3.173975em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∣</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6500149999999999em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">3</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.173975em;\"><span style=\"top:-1.955985em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∣</span></span></span><span style=\"top:-2.556985em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∣</span></span></span><span style=\"top:-2.572975em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∣</span></span></span><span style=\"top:-3.173975em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∣</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6500149999999999em;\"><span></span></span></span></span></span></span></span></span></span></span></span></div>\n<solution><python>import numpy as np\n\ndef f(x):\n    return np.abs(np.sin(2 * np.pi * x) ** 2 - 3 * np.cos(x / np.pi) ** 3)\n</python></solution>\n<p>Plot the above function with <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1000</mn></mrow><annotation encoding=\"application/x-tex\">1000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span></span> values from interval <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>8</mn><mi>π</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[0, 8 \\pi]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">8</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mclose\">]</span></span></span></span></span>.</p>\n<solution><python>import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef f(x):\n    return np.abs(np.sin(2 * np.pi * x) ** 2 - 3 * np.cos(x / np.pi) ** 3)\n\n\nx = np.linspace(0, 8 * np.pi, 1000)\ny = f(x)\nplt.plot(x, y)\nplt.show()\n</python></solution>\n<h2>Question — average velocities over time intervals</h2>\n<ul>\n<li>For a moving object, we are given a sequence <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>y</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">y_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span>  of positions at corresponding times <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>t</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">t_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> for <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>k</mi><mo>≤</mo><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">0 \\le k \\le N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83041em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></li>\n<li>We want to compute average velocity <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">v_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> for each of the <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span> time intervals, <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>i</mi><mo>≤</mo><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">1 \\le i \\le N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.79549em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></li>\n</ul>\n<div class=\"math math-display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub><mo>=</mo><mfrac><mrow><msub><mi>y</mi><mi>i</mi></msub><mo>−</mo><msub><mi>y</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><mrow><msub><mi>t</mi><mi>i</mi></msub><mo>−</mo><msub><mi>t</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">v_i = \\frac{y_i - y_{i-1}}{t_i - t_{i-1}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.154661em;vertical-align:-0.894331em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.26033em;\"><span style=\"top:-2.3139999999999996em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.894331em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></div>\n<python>y = np.array([0., 1.3,  5. , 10.9, 18.9, 28.7])\nt = np.array([0., 0.49, 1. , 1.5 , 2.08, 2.55])\n</python>\n<solution><python>y = np.array([0., 1.3,  5. , 10.9, 18.9, 28.7])\nt = np.array([0., 0.49, 1. , 1.5 , 2.08, 2.55])\n\nN = y.shape[0]\ny_diff = y[1:] - y[:N-1]\n# y[1:]  =>  [ 1.3  5.  10.9 18.9 28.7]\n# y[:N-1] =>  [ 0.   1.3  5.  10.9 18.9]\n\nt_diff = t[1:] - t[:N-1]\n\nv = y_diff / t_diff\nprint(v)\n</python></solution>\n<h1>Plotting — US residential sector energy consumption</h1>\n<p>We use the dataset for US residential sector energy consumption obtained from:\n<a href=\"http://users.stat.ufl.edu/~winner/data/resid_energy.dat\">http://users.stat.ufl.edu/~winner/data/resid_energy.dat</a>\n<a href=\"http://users.stat.ufl.edu/~winner/data/resid_energy.txt\">http://users.stat.ufl.edu/~winner/data/resid_energy.txt</a></p>\n<p>Download the following files from myCourses:</p>\n<ul>\n<li>energyconsumption5year.csv</li>\n<li>energyconsumption.csv</li>\n</ul>\n<h2>Reading the bar and scatter plots</h2>\n<img src=\"week10/energy_bar.png\" style=\"width: 80%; margin: 2em 0 0 2em;\">\n<p>The bar chart for energy consumption versus year shows that since 1985 energy consumption has been gradually increasing with the maximum during 2010</p>\n<img src=\"week10/energy_scatter.png\" style=\"width: 80%; margin: 2em 0 0 2em;\">\n<ul>\n<li>The scatter plot shows relationship between energy consumption and cost of electricity over time. We see a roughly linear relationship (also called “correlation” in statistical terminology) — high consumption is associated with low cost of electricity.\n<ul>\n<li>This does not imply causal relationship i.e. we cannot say that low cost of electricity caused higher consumption. (We need more detailed analysis for that, e.g we need to look at change in economy (GDP), household income, etc.</li>\n</ul>\n</li>\n</ul>\n<h2>Question — creating the plots</h2>\n<p>Write  code to create the bar chart above. Use the function <inline-code>matplotlib.pyplot.bar</inline-code>.</p>\n<solution><python>import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndata = np.loadtxt('energyconsumption5year.csv',\n                  delimiter=\",\",\n                  skiprows=1)\n\nyear_values = data[:, 0] # first column\nenergy_values = data[:, 5]\n\n\nplt.bar(year_values, energy_values, color='green')\n\nplt.xlabel(\"Year\", fontsize=14)\nplt.ylabel(\"Residental energy consumption\\n(million billion BTUs)\", fontsize=14)\n\nplt.show()\n</python></solution>\n<p>Write  code to create the scatter plot above. Use the function <inline-code>matplotlib.pyplot.scatter</inline-code>.</p>\n<solution><python>import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndata = np.loadtxt('energyconsumption.csv',\n                  delimiter=\",\",\n                  skiprows=1)\n\ncost_values = data[:, 4]\nenergy_values = data[:, 5]\n\nplt.scatter(cost_values, energy_values, marker='o', c='r')\n\nplt.xlabel(\"Cost of residential electricity\\n(USD per million BTUs)\", fontsize=14)\nplt.ylabel(\"Residental energy consumption\\n(million billion BTUs)\", fontsize=14)\n\nplt.show()\n</python></solution>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}