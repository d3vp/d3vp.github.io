{"pageProps":{"allSlugs":[["Lecture-1",[{"title":"1 — Programming Basics","slug":"Lecture-1"}]],["Lecture-2.1",[{"title":"2.1 — Variables, Arithmetic & String operations","slug":"Lecture-2.1"}]],["Lecture-2.2",[{"title":"2.2 — Defining functions, Errors & Debugging","slug":"Lecture-2.2"}]],["Lecture-3.1",[{"title":"3.1 — Order of Expression Evaluation, Comparing Values, Conditional Execution","slug":"Lecture-3.1"}]],["Lecture-3.2",[{"title":"3.2 — if statement, for loop, Indexing & Slicing Strings","slug":"Lecture-3.2"}]],["Lecture-4.1",[{"title":"4.1 — return vs. print, while statement, Modules","slug":"Lecture-4.1"}]],["Lecture-4.2",[{"title":"4.2 — String methods, break & continue statements","slug":"Lecture-4.2"}]],["Lecture-5.1",[{"title":"5.1 — Controlling print(), Nested Loops, Lists","slug":"Lecture-5.1"}]],["Lecture-5.2",[{"title":"5.2 — Scope of variables, List operations","slug":"Lecture-5.2"}]],["Lecture-6.1",[{"title":"6.1 — Tuples, Immutable objects, Sets","slug":"Lecture-6.1"}]],["Lecture-6.2",[{"title":"6.2 — More list & set operations, Dictionaries","slug":"Lecture-6.2"}]],["Lecture-7.1",[{"title":"7.1 — Iterables, Unpacking, Nested Lists","slug":"Lecture-7.1"}]],["Lecture-7.2",[{"title":"7.2 — Nested data structures, Comprehensions, Modules","slug":"Lecture-7.2"}]],["Lecture-8.1",[{"title":"8.1 — Nested list comprehensions, Reading & Writing Files","slug":"Lecture-8.1"}]],["Lecture-8.2",[{"title":"8.2 — Shallow vs. deep copy, Handling exceptions","slug":"Lecture-8.2"}]],["Lecture-9.1",[{"title":"9.1 — Object Oriented Programming (OOP)","slug":"Lecture-9.1"}]],["Lecture-9.2",[{"title":"9.2 — Keyword arguments, More on OOP","slug":"Lecture-9.2"}]],["Lecture-10.1",[{"title":"10.1 — NumPy","slug":"Lecture-10.1"}]],["Lecture-10.2",[{"title":"10.2 — Plotting using Matplotlib, More Numpy","slug":"Lecture-10.2"}]],["Lecture-11.1",[{"title":"11.1 — More Numpy, Linear algebra, Random numbers","slug":"Lecture-11.1"}]],["Lecture-11.2",[{"title":"11.2 — Interpolation & Curve fitting","slug":"Lecture-11.2"}]],["Lecture-12.1",[{"title":"12.1 — System of Linear Equations, Numerical Integration","slug":"Lecture-12.1"}]]],"post":{"slug":"Lecture-6.2","content":"<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"updating-multiple-items-in-a-list-using-slice-assignment\">Updating multiple items in a list using slice assignment</h2><p>The syntax of the slice assignment is as follows:</p><python lineno=\"false\">list_object[start:stop:step] = iterable\n</python><p>For now, think of <inline-code>iterable</inline-code> as a sequence/container such as a list, string, tuple etc.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"\"></h2><python>days = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\nprint(days[1:3])\n# ['Tue', 'Wed']\n\ndays[1:3] = [1, 2]\nprint(days)\n# ['Mon', 1, 2, 'Thu', 'Fri', 'Sat', 'Sun']\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-1\"></h2><python>days = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\nprint(days[1::2])\n# ['Tue', 'Thu', 'Sat']\n\ndays[1::2] = [\"\", \"\", \"\"]\nprint(days)\n# ['Mon', '', 'Wed', '', 'Fri', '', 'Sun']\n\ndays[:3] = \"MTW\"\nprint(days)\n# ['M', 'T', 'W', '', 'Fri', '', 'Sun']\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"other-list-methods\">Other list methods</h2><python># list.reverse() : Reverse the list \"in place\"\ngrades = [90, 70, 60.5, 70, 80]\ngrades.reverse()\nprint(grades)  # [80, 70, 60.5, 70, 90]\n\n# list.clear() : Remove all items from list.\ngrades = [90, 70, 60.5, 70, 80]\ngrades.clear()\nprint(grades)  # []\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"what-modifies-a-list\">What modifies a list?</h2><ul>\n<li>Assigning a value to an element using its index.\n<python>a = [1, 2, 3]\na[0] = 5\n</python>\n</li>\n<li>Using the slice assignment to modify the elements of a list.\n<python>a = [1, 2, 3]\na[:2] = [4, 5]\n</python>\n</li>\n<li>Using methods like <code>append(), insert(), remove() , pop(), clear()</code>, etc.</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"what-does-not-modify-a-list\">What does not modify a list?</h2><ul>\n<li>Slicing! It is a useful tool to create new lists out of an existing lists.\n<python>a = [1, 2, 3]\nb = a[:]  # makes a copy of a\nprint(a is b)  # False\n</python>\n</li>\n<li>The <inline-code>+</inline-code> and <inline-code>*</inline-code> operators create a new list\n<python>a = [1, 2, 3]\nb = a  # does not copy, just a new name for same list\nb = b + [4]  # b now refers to a new list [1, 2, 3, 4]\n             # a still refers to [1, 2, 3]\nprint(a is b)  # False\n</python>\n</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"set-methods\">Set methods</h2><python># set.update(iterable):\n#   Adds all items from the iterable to the set.\n\nnumbers = {1, 2, 3}\nnumbers.update([10, 2, 2, 3, 20])\nprint(numbers)  # {1, 2, 3, 10, 20}\n\nnumbers.update((\"a\", \"b\")) \nprint(numbers)  # {1, 2, 3, 'a', 10, 20, 'b'}\n\nprimes = {2, 3, 5}\nprimes.update({5, 7, 11})\nprint(primes)  # {2, 3, 5, 7, 11}\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-2\"></h2><python># set.clear(): Remove all elements from this set.\n\nnumbers = {1, 2, 3}\nnumbers.clear()\nprint(numbers)  # set()\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-3\"></h2><python># For the following methods, suppose A and B are sets.\n\n# A.intersection(B):\n#    Returns a new set that contains elements that are\n#    present in both A and B   \n\nodd = {3, 5, 7, 9, 25}\nsquares = {4, 9, 25, 36}\nodd_squares = odd.intersection(squares)\nprint(odd_squares)  # {9, 25}\n\n# Intersection can also be done using operator &#x26;\nodd_squares = odd &#x26; squares\nprint(odd_squares)  # {9, 25}\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-4\"></h2><python># A.union(B):\n#    Returns a new set that contains elements that are\n#    present in  A or B or both\n\nx = {1, 2, 3}\ny = {2, 3, 5}\nall_numbers = x.union(y)\nprint(all_numbers)  # {1, 2, 3, 5}\n\n# Same above but using an operator |\nall_numbers = x | y\nprint(all_numbers)  # {1, 2, 3, 5}\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-5\"></h2><python># A.difference(B):\n#   Returns a new set that contains elements that are\n#   present only in A but not in B\nx = {1, 2, 3}\ny = {2, 3, 5}\ndiff = x.difference(y)\nprint(diff)  # {1}\n\n# Same as above but using operator -\ndiff = x - y\nprint(diff)  # {1}\n</python><p>All of the <inline-code>set</inline-code> methods work the same when elements are of other types such as strings.</p></slide>\n<slide class=\"ppt-f95 slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"dictionaries-\">Dictionaries </h2><p>Suppose we would like to store the following enrollment data:</p><hgrid class=\"ppt-f95\" margin=\"0\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>semester</th><th>no. of students</th></tr></thead><tbody><tr><td>F2017</td><td>816</td></tr><tr><td>W2018</td><td>613</td></tr><tr><td>F2018</td><td>709</td></tr><tr><td>W2019</td><td>590</td></tr></tbody></table></hgrid><p>We can do this using two lists for the two columns:</p><python>semesters = ['F2017', 'W2018', 'F2018', 'W2019']\nstudents = [816, 613, 709, 590]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-6\"></h2><p>What should we do if we want to add new data?</p><python>semesters = ['F2017', 'W2018', 'F2018', 'W2019']\nstudents = [816, 613, 709, 590]\n\nsemesters.append(\"F2020\")\nstudents.append(550)\n# ['F2017', 'W2018', 'F2018', 'W2019', 'F2020']\n# [816, 613, 709, 590, 550]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-7\"></h2><p>What if we want to modify the value for a specific semester?</p><python>semesters = ['F2017', 'W2018', 'F2018', 'W2019']\nstudents = [816, 613, 709, 590]\n\nidx = semesters.index(\"W2018\")\nstudents[idx] = 600\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-8\"></h2><p>What we if try to add an entry for a semester that already exists?</p><p>List allows duplicates so it does not check if a semester already exists.</p><python>semesters = ['F2017', 'W2018', 'F2018', 'W2019']\nstudents = [816, 613, 709, 590]\n\nsemesters.append(\"F2018\")\nstudents.append(500)\n# ['F2017', 'W2018', 'F2018', 'W2019', 'F2018']\n# [816, 613, 709, 590, 500]\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"use-a-dictionary\">Use a dictionary!</h2><ul>\n<li>You can think of an item of a dictionary as a pair of objects:\n<ul>\n<li>The first object of the pair is called a <sc>key</sc>.</li>\n<li>The second object is referred to as the <sc>value</sc>.</li>\n</ul>\n</li>\n<li>A dictionary is called a <i>mapping</i> type because it maps key objects to value objects.</li>\n</ul><python># A dictionary is created using a sequence of key-value pairs\nenrollment = {'F2017': 816, 'W2018': 613,\n              'F2018': 709, 'W2019': 590}\n\nprint(type(enrollment))  # &#x3C;class 'dict'>\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-9\"></h2><python># Number of key-value pairs\nprint(len(enrollment))  # 4\n\n# This is an empty dictionary, not a set!\nempty_dict = {}\nprint(len(empty_dict)) # 0\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"dictionary-examples\">Dictionary Examples</h2><python># Key: a number, Value: True if number is prime, else False\nis_prime = {2: True, 3: True, 4: False, 5: True,\n            7: True, 10: False}\n\n# Key: inventory items, Value: count of items in inventory\ninventory = {\"sofa\": 5, \"table\": 10, \"chair\": 20, \"mattress\": 5}\n\n# Key: city name, Value: area of city\npopulation = {\"Montreal\": 431.50, \"Toronto\": 630.20}\n\n# Key: country name, Value: capital city\ncapitals = {\"Canada\": \"Ottawa\", \"United States\": \"Washington, D.C.\",\n            \"France\": \"Paris\", \"Germany\": \"Berlin\"}\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"note-on-keys-and-values\">Note on keys and values</h2><ul>\n<li>Keys\n<ul>\n<li>Have to be immutable objects.</li>\n<li>Have to be unique in a dictionary. A dictionary cannot contain two items with the same key.</li>\n</ul>\n</li>\n<li>Values\n<ul>\n<li>Values can be of any type; both mutable and immutable values are allowed.</li>\n<li>Many keys can map to the same value. i.e. values need not be unique.</li>\n</ul>\n</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"dictionary-lookup\">Dictionary Lookup</h2><p>With lists, we can access an item of the list through its index.</p><p>With dictionaries, we can access a value stored in the dictionary through the key associated with it.</p><python>enrollment = {'F2017': 816, 'W2018': 613, 'F2018': 709,\n              'W2019': 590, 'F2019': 744}\n\nnum_students = enrollment[\"F2018\"]\nprint(num_students)  # 709\n\n# Key must exist in the dictionary if we want to access its value\nprint(enrollment[\"F2020\"])  # KeyError: 'F2020'\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"adding-an-item\">Adding an item</h2><p>We can add a new item by specifying a key and a value: <inline-code>dictionary[key] = value</inline-code></p><python>enrollment = {'F2018': 709, 'W2019': 590}\n\nenrollment[\"F2020\"] = 800  # add an item\nenrollment[\"W2020\"] = 900  # add another item\n\n# {'F2018': 709, 'W2019': 590, 'F2020': 800, 'W2020': 900}\n\nenrollment[\"F2018\"] = 700  # change an existing item\n\n# {'F2018': 700, 'W2019': 590, 'F2020': 800, 'W2020': 900}\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"removing-an-item\">Removing an item</h2><p>We can delete an item using the following syntax: <inline-code>del dictionary[key]</inline-code></p><python>enrollment = {'F2018': 709, 'W2019': 590, 'F2019': 744}\n\ndel enrollment[\"F2019\"]\n\n# {'F2018': 709, 'W2019': 590}\n\ndel enrollment[\"F2020\"]\n# KeyError: 'F2020'\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-10\"></h2><p>What will be printed in the following examples?</p><hgrid><python>d = {'x' : 0, 'y' : 1, 'z' : 2} \nx = d['y']\nprint(x)\n</python></hgrid><hgrid><python>d = {'x' : 0, 'y' : 1, 'z' : 2} \nx = d[0]\nprint(x)\n</python></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"check-for-membership\">Check for membership</h2><p>We can check if a key is part of a dictionary using the <inline-code>in</inline-code> and <inline-code>not in</inline-code> operators.</p><python>d = {'x' : 0, 'y' : 1, 'z' : 2} \nprint('x' in d) #  True \nprint(0 in d) #  False\nprint(0 not in d) #  True\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"iterating-through-a-dictionary\">Iterating through a dictionary</h2><p>We can use a for loop to iterate through all the keys in a dictionary.</p><python>enrollment = {'F2018': 709, 'W2019': 590, 'F2019': 744}\n\nfor key in enrollment:\n    print(key, \"->\", enrollment[key])\n</python><output>F2018 -> 709\nW2019 -> 590\nF2019 -> 744\n</output></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"functions-and-methods-for-dictionaries\">Functions and methods for dictionaries</h2><python># dict(L): creates and returns a dictionary using a list L of tuples, \n#   where each tuple is of length 2 in form of (key, value).\n\npairs = [(\"Montreal\", 1.78), (\"Rome\", 2.87), (\"Tokyo\", 9.27)]\npopulation_data = dict(pairs)\n\nprint(population_data)\n#  {'Montreal': 1.78, 'Rome': 2.87, 'Tokyo': 9.27}\n\nprint(population_data[\"Rome\"])\n# 2.87\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-11\"></h2><python>population_data = {'Montreal': 1.78, 'Rome': 2.87, 'Tokyo': 9.27}\n\n# dict.keys(): returns a iterable (sequence) of all keys\n\ncities = list(population_data.keys())\nprint(cities)  # ['Montreal', 'Rome', 'Tokyo']\n\n# dict.values(): returns a iterable (sequence) of all values\n\npopulation = list(population_data.values())\nprint(population)  # [1.78, 2.87, 9.27]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-12\"></h2><python># dict.items(): returns a iterable (sequence) of tuples (key, value) \n#   for all items in the dictionary\n\npopulation_data = {'Montreal': 1.78, 'Rome': 2.87, 'Tokyo': 9.27}\npairs = list(population_data.items())\n\nprint(pairs)\n# [('Montreal', 1.78), ('Rome', 2.87), ('Tokyo', 9.27)]\n</python><p>For more methods, use <inline-code>help(dict)</inline-code>.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-13\"></h2><p>Using the <inline-code>dict</inline-code> methods in <inline-code>for</inline-code> loop:</p><python>population_data = {'Montreal': 1.78, 'Rome': 2.87, 'Tokyo': 9.27}\n\ntotal = 0\nfor population in population_data.values():\n    total += population\n\nprint(total)  # 13.92\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-14\"></h2><python>population_data = {'Montreal': 1.78, 'Rome': 2.87, 'Tokyo': 9.27}\n\n# dict.items() returns an iterable of key-value tuples\n\nfor tup in population_data.items():\n    city = tup[0]\n    population = tup[1]\n    print(city, \"->\", population)\n\n# Montreal -> 1.78\n# Rome -> 2.87\n# Tokyo -> 9.27\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-15\"></h2><p>Making use of tuple unpacking in the for loop:</p><python>population_data = {'Montreal': 1.78, 'Rome': 2.87, 'Tokyo': 9.27}\n\nfor city, population in population_data.items():\n    print(city, \"->\", population)\n\n# Montreal -> 1.78\n# Rome -> 2.87\n# Tokyo -> 9.27\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-16\"></h2><greenbox><p>Time for some problems on Ed Lessons.</p></greenbox><divider></divider></slide>","title":"6.2 — More list & set operations, Dictionaries","date":"2023-02-03","published":true,"section":"Lecture-6.2"}},"__N_SSG":true}