{"pageProps":{"titles":["2.1 — Programming Basics","2.2 — Variables, Arithmetic & String operations","2.3 — Function Calls, Expressions","3.1 — Defining functions, Errors & Debugging","3.2 — Boolean Expressions, Comparison & Logical Operators","3.3 — Conditional execution using if statement","3.4 — for loop & String indexing, slicing","Python Style Guide","4.1 — Escape Characters & Controlling print()","4.2 — String methods & in operator","4.3 — while statement & Nested loops","4.4 — return statement & Importing modules","5.1 — Scope of Variables","5.2 — Lists & List Operations","5.3 — List Functions & Methods","5.4 — Tuples","6.1 — Object Identity, Immutability, Unpacking","6.2 — Sets","6.3 — Dictionaries"],"slugs":["Lecture-2.1","Lecture-2.2","Lecture-2.3.1","Lecture-3.1","Lecture-3.2","Lecture-3.3","Lecture-3.4","style-guide","Lecture-4.1","Lecture-4.2","Lecture-4.3","Lecture-4.4","Lecture-5.1","Lecture-5.2","Lecture-5.3","Lecture-5.4","Lecture-6.1","Lecture-6.2","Lecture-6.3"],"post":{"title":"6.2 — Sets","slug":"Lecture-6.2","content":"<h1>Sets</h1>\n<ul>\n<li>A set is a an unordered collection of <i>immutable</i> objects.</li>\n<li>A set always contains unique elements, unlike lists and tuples which allow duplicates.</li>\n<li>A set is unordered i.e. we cannot use indexing or slicing on a set object</li>\n</ul>\n<python>numbers = {1, 2, 3}\nprint(numbers)  # {1, 2, 3}\nprint(type(numbers))  # &#x3C;class 'set'>\n\n# only unique values are kept\nnumbers = {1, 2, 3, 1, 3}\nprint(numbers)  # {1, 2, 3}\nprint(len(numbers))  # 3\n</python>\n<h2>Other ways to create a set</h2>\n<python># a set can be created from any sequence\n# such as list, tuple or a string\nthings = set([10, 42, \"apple\", 42])\nprint(things)  # {'apple', 10, 42}\n\nword = \"pineapple\"\nletters = set(word)\nprint(letters)  # {'p', 'n', 'l', 'i', 'e', 'a'}\n\n# create an empty set\nempty_set = set()\nprint(len(empty_set))  # 0\n\n# This does not create an empty set!\nempty_dictionary = {}\nprint(type(empty_dictionary))  # &#x3C;class 'dict'>\n</python>\n<h2>Set elements must be immutable</h2>\n<p>A set can contain <inline-code>int</inline-code>, <inline-code>float</inline-code>, <inline-code>str</inline-code>, <inline-code>bool</inline-code> and <inline-code>tuple</inline-code> objects because they are all immutable.</p>\n<p>But a set cannot contain a list because lists are mutable.</p>\n<python># tuples are immutable so allowed in set\npoints = {(1, 1), (3, 10), (3, 10)}\nprint(points)  \n# {(3, 10), (1, 1)}\n\n# lists are mutable so not allowed\npoints = {[1, 1], [3, 10], [3, 10]}  \n# TypeError: unhashable type: 'list'\n</python>\n<h2>Set operators and methods</h2>\n<python># set.add(x):\n#   Adds an element x to the set if x does not exist in the set. \n#   Does not return anything.\nnumbers = {1, 2, 3}\nnumbers.add(20)\nprint(numbers)  # {1, 2, 3, 20}\n\nnumbers.add(3)\nprint(numbers)  # {1, 2, 3, 20}\n\n\n# set.remove(x):\n#   Remove an element x from the set. Does not return anything.\n#   Throws KeyError if element x is not present in the set.\nnumbers = {1, 2, 3}\nnumbers.remove(2)\nprint(numbers)  # {1, 3}\nnumbers.remove(5)  # KeyError: 5\n\n# set.update(sequence):\n#   Adds all items from the sequence to the set.\nnumbers = {1, 2, 3}\nnumbers.update([10, 20, 2, 2, 3])\nprint(numbers)  # {1, 2, 3, 10, 20}\n\nnumbers.update([\"a\", \"b\"])\nprint(numbers)  # {1, 2, 3, 10, 'a', 20, 'b'}\n\n\n# set.clear(): Remove all elements from this set.\nnumbers = {1, 2, 3}\nnumbers.clear()\nprint(numbers)  # set()\n\n\n# in/not in operators to check if element exists in a set\nnumbers = {1, 2, 3}\nprint(2 in numbers)  # True\nprint(5 not in numbers)  # True\n\nshapes = {'circle', 'square'}\nprint(\"circle\" in shapes)  # True\n\n\n# For the following methods, suppose A and B are sets.\n\n# A.intersection(B):\n#    Returns a new set that contains elements that are\n#    present in both A and B   \nodd = {3, 5, 7, 9, 25}\nsquares = {4, 9, 25, 36}\nodd_squares = odd.intersection(squares)\nprint(odd_squares)  # {9, 25}\n\n# Intersection can also be done using operator &#x26;\nodd_squares = odd &#x26; squares\nprint(odd_squares)  # {9, 25}\n\n\n# A.union(B):\n#    Returns a new set that contains elements that are\n#    present in  A or B or both\n\nx = {1, 2, 3}\ny = {2, 3, 5}\nall_numbers = x.union(y)\nprint(all_numbers)  # {1, 2, 3, 5}\n\n# Same above but using an operator |\nall_numbers = x | y\nprint(all_numbers)  # {1, 2, 3, 5}\n\n\n# A.difference(B):\n#   Returns a new set that contains elements that are\n#   present only in A but not in B\nx = {1, 2, 3}\ny = {2, 3, 5}\ndiff = x.difference(y)\nprint(diff)  # {1}\n\n# Same as above but using operator -\ndiff = x - y\nprint(diff)  # {1}\n\n# All of the above methods work the same when elements are\n# of other types such as strings. \n</python>\n<h2>Sets cannot be indexed or sliced because they are not ordered</h2>\n<python>primes = {2, 3, 5, 7, 11}\nprimes[4]  # TypeError: 'set' object is not subscriptable\n</python>\n<p>But you can use for loop to iterate over the elements:</p>\n<python># The order in which items will be printed is not defined\n# because sets are not ordered\nnumbers = {10, 1, 5, 20}\nfor n in numbers:\n    print(n)\n</python>\n<output>1\n10\n20\n5\n</output>\n<h2>Why use sets?</h2>\n<ul>\n<li>Set are faster than lists and tuples, when inserting, removing and searching elements.</li>\n<li>When ordering of elements is important or when elements are mutable, use lists or tuples</li>\n<li>When only unique immutable elements need to be stored, use sets.</li>\n</ul>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}