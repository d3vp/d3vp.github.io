{"pageProps":{"allSlugs":[["Lecture-1",[{"title":"1 — Programming Basics","slug":"Lecture-1"}]],["Lecture-2.1",[{"title":"2.1 — Variables, Arithmetic & String operations","slug":"Lecture-2.1"}]],["Lecture-2.2",[{"title":"2.2 — Function calls, Defining functions, Types of Errors","slug":"Lecture-2.2"}]],["Lecture-3.1",[{"title":"3.1 — Order of Expression Evaluation, Comparing Values, Conditional Execution","slug":"Lecture-3.1"}]],["Lecture-3.2",[{"title":"3.2 — if statement, for loop, Indexing & Slicing Strings","slug":"Lecture-3.2"}]],["Lecture-4.1",[{"title":"4.1 — return vs. print, while statement, Modules","slug":"Lecture-4.1"}]],["Lecture-4.2",[{"title":"4.2 — String methods, break & continue statements","slug":"Lecture-4.2"}]],["Lecture-5.1",[{"title":"5.1 — Controlling print(), Nested Loops, Lists","slug":"Lecture-5.1"}]],["Lecture-5.2",[{"title":"5.2 — Scope of variables, List operations","slug":"Lecture-5.2"}]],["Lecture-6.1",[{"title":"6.1 — Tuples, Immutable objects, Sets","slug":"Lecture-6.1"}]],["Lecture-6.2",[{"title":"6.2 — More list & set operations, Dictionaries","slug":"Lecture-6.2"}]],["Lecture-7.1",[{"title":"7.1 — Iterables, Unpacking, Nested Lists","slug":"Lecture-7.1"}]],["Lecture-7.2",[{"title":"7.2 — Nested data structures, Comprehensions, Modules","slug":"Lecture-7.2"}]],["Lecture-8.1",[{"title":"8.1 — Nested list comprehensions, Reading & Writing Files","slug":"Lecture-8.1"}]],["Lecture-8.2",[{"title":"8.2 — Shallow vs. deep copy, Handling exceptions","slug":"Lecture-8.2"}]],["Lecture-9.1",[{"title":"9.1 — Object Oriented Programming (OOP)","slug":"Lecture-9.1"}]]],"post":{"slug":"Lecture-6.1","content":"<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"tuples\">Tuples</h2><ul>\n<li>A tuple is an ordered collection of objects, like lists.</li>\n<li>A tuple is <i>immutable</i>. A tuple object cannot be modified after it is created.</li>\n<li>We create a tuple using parentheses <inline-code>()</inline-code>.</li>\n</ul><python>tup = (1, 2, 3)\nprint(type(tup))  # &#x3C;class 'tuple'>\n\n# tuple with only one item\ntup = (10,)  # comma is required!\nprint(tup, type(tup))  # (10,) &#x3C;class 'tuple'>\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"\"></h2><p>We can use <inline-code>tuple</inline-code> function to convert other sequences such as lists and strings into a tuple.</p><python>word = \"apple\"\ntup = tuple(word)\nprint(tup)\n# ('a', 'p', 'p', 'l', 'e')\n\nprimes = [2, 3, 5, 7]\nprimes = tuple(primes)\nprint(primes)\n# (2, 3, 5, 7)\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"tuples-are-immutable\">Tuples are immutable</h2><p>Items cannot be added, removed or changed in a tuple.</p><p>Therefore, unlike lists, none of the operations that modify a tuple are allowed.</p><python>x = (1, 1, 2, 3, 5)\nx[3] = 100\n# TypeError: 'tuple' object does not support item assignment\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-1\"></h2><p>Assigning a new object to a variable does not affect/modify the current object the variable refers to.</p><python>x = (1, 1, 2, 3, 5)\n\n# This does not modify the above tuple object so\n# it is allowed\nx = (1, 2, 3)  \n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-2\"></h2><p>In general, operations that do not modify a tuple are available.</p><python>tup = (45, 23, 'abc') \n\n# Indexing and slicing work the same way as lists.\nprint(tup[1])\n# 23\nprint(tup[1:])\n# (23, 'abc')\n\nprint(len(tup))  # number of items in a tuple\n# 3\n</python><p>Similary <inline-code>min()</inline-code>, <inline-code>max()</inline-code>, and <inline-code>sum()</inline-code> functions work with tuples.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-3\"></h2><python>tup = (45, 23, 'abc') \n\n# Following methods are available for tuples\nprint(tup.index(\"abc\"))\n# 2\n\nprint(tup.count(23))\n# 1\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-4\"></h2><p>Since a tuple is a sequence, we can use it in a <inline-code>for</inline-code> loop just like a list:</p><hgrid><python>numbers = (10, 20, 30)\n\nfor n in numbers:\n    print(n)\n</python><output>10\n20\n30\n</output></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"why-use-tuples\">Why use tuples?</h2><p>If lists are more flexible than tuples, why should we use tuples?</p><ul>\n<li>Immutability is useful to avoid changing data by mistake.</li>\n<li>We can use tuples as elements of sets and as keys in a dictionary.</li>\n<li>Programs are a bit faster when working with tuples.</li>\n</ul></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-5\"></h2><greenbox><p>Try the problem “Euclidean distance using list/tuple” on Ed Lessons.</p></greenbox></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"object-identity\">Object Identity</h2><ul>\n<li>Each object is assigned an <sc>ID</sc> at its creation (think of a memory address).</li>\n<li>This ID is unique and constant for this object as long as the object exists.</li>\n<li>The built-in function <inline-code>id()</inline-code> can be used to retrieve the ID of an object.</li>\n</ul><python>x = 1234\ny = x\n# x and y both refer to the same object, \n# therefore the IDs are the same.\nprint(id(x) == id(y))  # True\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-6\"></h2><python># x and y point to two different objects, \n# therefore we expect x and y to have different IDs.\nx = 1234\ny = 5678\nprint(id(x) == id(y))  # False\n\n# x and y point to two different objects (with the same value),\n# therefore we expect x and y to have different IDs.\nx = int(\"1234\")  # integer 1234\ny = int(\"12\" + \"34\")  # integer 1234\n\nprint(id(x) == id(y))  # False\n</python></slide>\n<slide class=\"ppt-f95 slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"identity-operators-\">Identity operators </h2><ul>\n<li><inline-code>is</inline-code> and <inline-code>is not</inline-code> are comparison operators used to check if the two operands refer to the same object.</li>\n<li>Using <inline-code>is</inline-code> operator means: are two variables referring to one and the same object?</li>\n<li>Using <inline-code>==</inline-code> operator means: are two variables referring to objects that contain same data?</li>\n</ul><hgrid><python>x = int(\"1234\")\ny = int(\"12\" + \"34\")\nz = x \nprint(x == y)  # True\nprint(x == z)  # True\n</python><python>x = int(\"1234\")\ny = int(\"12\" + \"34\")\nz = x \nprint(x is y)  # False\nprint(x is z)  # True\n</python></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"mutable-vs-immutable-objects\">Mutable vs Immutable objects</h2><p><sc>Immutable</sc>: the content of the object cannot be changed after the object has been created.</p><ul>\n<li>e.g. <inline-code>str</inline-code>, <inline-code>int</inline-code>, <inline-code>float</inline-code>, <inline-code>tuple</inline-code></li>\n</ul><p><sc>Mutable</sc>: the content of the object can be changed after its creation without changing its identity.</p><ul>\n<li>e.g. <inline-code>list</inline-code>, <inline-code>dict</inline-code>, <inline-code>set</inline-code></li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"strings-are-immutable\">Strings are immutable</h2><p>Unlike lists, we cannot use the square brackets to modify a character in the string.</p><python lineno=\"false\">s = \"cats\"\ns[0] = \"r\"  # TypeError: 'str' object does not support item assignment\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-7\"></h2><p>All strings operations that seem to change a string actually <i>create</i> a new string.</p><hgrid><python>s = \"cat\"\nt = s\nprint(\"Before:\", s is t)\n\ns = s.replace('c','r')\nprint(\"After:\", s is t)\n\nprint(\"s:\", s)\nprint(\"t:\", t)\n</python><output>Before: True\nAfter: False\ns: rat\nt: cat\n</output></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"lists-are-mutable\">Lists are mutable</h2><p>The following code does not create a copy of the list <inline-code>x</inline-code>.<br>\nIt simply create a new variable name for the same list.</p><python>x = [1, 2, 3]\ny = x  # new name y for same list\n\nprint(x is y)  # True\n</python><p>Let us see some implications of this.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-8\"></h2><p>In the following illustrations, think about what is modified.</p><ul>\n<li>Whether a variable changes its value i.e. the variable refers to a different value</li>\n<li>Whether a list object is modified i.e. some element of the list is changed.</li>\n</ul></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-9\"></h2><div class=\"ppt-scale-1_25\"><iframe width=\"800\" height=\"310\" scrolling=\"no\" style=\"overflow: hidden;\" frameborder=\"0\" src=\"https://pythontutor.com/iframe-embed.html#code=x%20%3D%205%0Ay%20%3D%20x%0Ay%20%3D%20y%20%2B%203%20%0Aprint%28x,%20y%29&#x26;codeDivHeight=400&#x26;codeDivWidth=350&#x26;cumulative=false&#x26;curInstr=0&#x26;heapPrimitives=true&#x26;origin=opt-frontend.js&#x26;py=3&#x26;rawInputLstJSON=%5B%5D&#x26;textReferences=false\"> </iframe></div></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-10\"></h2><div class=\"ppt-scale-1_25\"><iframe width=\"800\" height=\"400\" scrolling=\"no\" style=\"overflow: hidden;\" frameborder=\"0\" src=\"https://pythontutor.com/iframe-embed.html#code=x%20%3D%20%5B5,%206,%207%5D%0Ay%20%3D%20x%0Ay%5B0%5D%20%3D%20y%5B0%5D%20%2B%203%0Aprint%28x%5B0%5D,%20y%5B0%5D%29&#x26;codeDivHeight=400&#x26;codeDivWidth=350&#x26;cumulative=false&#x26;curInstr=0&#x26;heapPrimitives=true&#x26;origin=opt-frontend.js&#x26;py=3&#x26;rawInputLstJSON=%5B%5D&#x26;textReferences=false\"> </iframe></div></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-11\"></h2><div class=\"ppt-scale-1_25\"><iframe width=\"800\" height=\"400\" scrolling=\"no\" style=\"overflow: hidden;\" frameborder=\"0\" src=\"https://pythontutor.com/iframe-embed.html#code=def%20example%28x%29%3A%0A%20%20%20%20x%20%3D%20x%20*%205%0A%0Ax%20%3D%205%0Aexample%28x%29%20%0Aprint%28x%29&#x26;codeDivHeight=400&#x26;codeDivWidth=350&#x26;cumulative=false&#x26;curInstr=0&#x26;heapPrimitives=true&#x26;origin=opt-frontend.js&#x26;py=3&#x26;rawInputLstJSON=%5B%5D&#x26;textReferences=false\"> </iframe></div></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-12\"></h2><div class=\"ppt-scale-1_25\"><iframe width=\"800\" height=\"500\" scrolling=\"no\" style=\"overflow: hidden;\" frameborder=\"0\" src=\"https://pythontutor.com/iframe-embed.html#code=def%20example%28x%29%3A%0A%20%20%20%20x%5B0%5D%20%3D%20x%5B0%5D%20*%205%0A%0Ax%20%3D%20%5B5,%206,%207%5D%0Aexample%28x%29%0Aprint%28x%5B0%5D%29&#x26;codeDivHeight=400&#x26;codeDivWidth=350&#x26;cumulative=false&#x26;curInstr=0&#x26;heapPrimitives=true&#x26;origin=opt-frontend.js&#x26;py=3&#x26;rawInputLstJSON=%5B%5D&#x26;textReferences=false\"> </iframe></div></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"sets\">Sets</h2><ul>\n<li>A set is a an <i>unordered</i> collection of <i>immutable</i> objects.</li>\n<li>A set always contains unique elements, unlike lists and tuples which allow duplicates.</li>\n<li>A set is unordered i.e. we cannot use indexing or slicing on a set object</li>\n</ul><hgrid><python lineno=\"false\">numbers = {1, 2, 3}\nprint(numbers)  # {1, 2, 3}\nprint(type(numbers))  # &#x3C;class 'set'>\n</python><python lineno=\"false\"># only unique values are kept\nnumbers = {1, 2, 3, 1, 3}\nprint(numbers)  # {1, 2, 3}\nprint(len(numbers))  # 3\n</python></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"other-ways-to-create-a-set\">Other ways to create a set</h2><python># a set can be created from any sequence\n# such as list, tuple or a string\nthings = set([10, 42, \"apple\", 42])\nprint(things)  # {'apple', 10, 42}\n\nword = \"pineapple\"\nletters = set(word)\nprint(letters)  \n# {'p', 'n', 'l', 'i', 'e', 'a'}\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-13\"></h2><python># create an empty set\nempty_set = set()\nprint(len(empty_set))  # 0\n\n# This does not create an empty set!\nempty_dictionary = {}\nprint(type(empty_dictionary))  # &#x3C;class 'dict'>\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"set-elements-must-be-immutable\">Set elements must be immutable</h2><p>A set can contain <inline-code>int</inline-code>, <inline-code>float</inline-code>, <inline-code>str</inline-code>, <inline-code>bool</inline-code> and <inline-code>tuple</inline-code> objects because they are all immutable.</p><p>But a set cannot contain a list because lists are mutable.</p><python># tuples are immutable so allowed in set\npoints = {(1, 1), (3, 10), (3, 10)}\nprint(points)  \n# {(3, 10), (1, 1)}\n\n# lists are mutable so not allowed\npoints = {[1, 1], [3, 10], [3, 10]}  \n# TypeError: unhashable type: 'list'\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"set-operators-and-methods\">Set operators and methods</h2><python># set.add(x):\n#   Adds an element x to the set if x does not exist in the set. \n#   Does not return anything.\n\nnumbers = {1, 2, 3}\nnumbers.add(20)\nprint(numbers)  # {1, 2, 3, 20}\n\nnumbers.add(3)\nprint(numbers)  # {1, 2, 3, 20}\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-14\"></h2><python># set.remove(x):\n#   Remove an element x from the set. Does not return anything.\n#   Throws KeyError if element x is not present in the set.\n\nnumbers = {1, 2, 3}\nnumbers.remove(2)\nprint(numbers)  # {1, 3}\n\nnumbers.remove(5)  # KeyError: 5\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-15\"></h2><p><inline-code>in</inline-code>, <inline-code>not in</inline-code> operators can be used to check if an element exists in a set.</p><python>numbers = {1, 2, 3}\nprint(2 in numbers)  # True\nprint(5 not in numbers)  # True\n\nshapes = {'circle', 'square'}\nprint(\"circle\" in shapes)  # True\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-16\"></h2><p><b>Sets cannot be indexed or sliced because they are not ordered.</b></p><hgrid><python>primes = {2, 3, 5, 7, 11}\nprimes[4]  # TypeError: 'set' object is not subscriptable\n</python></hgrid><p>But we can use for loop to iterate over the items:</p><hgrid><python># The order in which items will be printed \n# is not defined because sets are not ordered\n\nnumbers = {10, 1, 5, 20}\nfor n in numbers:\n    print(n)\n</python><output>1\n10\n20\n5\n</output></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"why-use-sets\">Why use sets?</h2><ul>\n<li>Set are faster than lists and tuples, when inserting, removing and searching elements.</li>\n<li>When order of elements is important or when elements are mutable, use lists or tuples</li>\n<li>When only unique immutable elements need to be stored, use sets.</li>\n</ul></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-17\"></h2><greenbox><p>Try the problem “Word count” on Ed Lessons.</p></greenbox></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-18\"></h2><greenbox><p>Try the problem “List duplicates” on Ed Lessons.</p></greenbox><divider></divider></slide>","title":"6.1 — Tuples, Immutable objects, Sets","date":"2024-02-01","published":true,"section":"Lecture-6.1"}},"__N_SSG":true}