{"pageProps":{"titles":["L1.1 — Computer and Programming Basics","L1.2 — Variables & Expressions","L2.1 — Control Flow Statements","Python Style Guide","May 14 — Problem Set","L2.2 — print(), String methods & while loop","May 17 — Problem Set","L3.1 — More loops & Defining functions","May 19 — Problem Set","L3.2 — Lists","May 21 — Problem Set","L4.1 — Tuples, Dictionaries, Sets","May 26 — Problem Set","May 28 — Problem Set","L4.2 — Nested data structures","June 2 — Problem Set","June 4 — Problem Set","L5.1 — Handling Exceptions, File IO","L5.2 — Comparing data structures, Writing modules, Matplotlib"],"slugs":["Lecture-1.1","Lecture-1.2","Lecture-2.1","style-guide","_May14-problem-set","Lecture-2.2","_May17-problem-set","Lecture-3.1","_May19-problem-set","Lecture-3.2","_May21-problem-set","Lecture-4.1","_May26-problem-set","_May28-problem-set","Lecture-4.2","_June2-problem-set","_June4-problem-set","Lecture-5.1","Lecture-5.2"],"post":{"title":"June 4 — Problem Set","slug":"_June4-problem-set","content":"<h1>Problems</h1>\n<ol>\n<li>\n<p>Consider the following data with student ID and assignment grades. Write a function <inline-code>get_top_student</inline-code> that takes the dictionary <inline-code>student_grades</inline-code> as argument and returns a tuple of form <inline-code>(top_student_id, top_student_grade)</inline-code> where <inline-code>top_student_grade</inline-code> is total assignment grade for the top student <inline-code>top_student_id</inline-code> is the corresponding ID of that student.</p>\n<python>all_grades = {\n    # student_ID : 3 assignment grades\n    2601000: [90, 95, 100],\n    2602000: [95, 85, 80],\n    2603000: [80, 88, 98],\n    2604000: [100, 98, 100]\n}\n\nprint(get_top_student(all_grades))\n</python>\n<output>(2604000, 298)\n</output>\n<solution><python>def get_top_student(student_grades):\n    top_grade = None\n    top_id = None\n    \n    for student_id, grades in student_grades.items():\n        # First time, top_grade should be None so just assign it\n        if top_grade is None:  # top_grade == None also works\n            top_grade = sum(grades)\n            top_id = student_id\n        else:\n            # Compare total grade with top_grade so far\n            total = sum(grades)\n            if total > top_grade:\n                top_grade = total\n                top_id = student_id\n                \n    return (top_id, top_grade)\n            \n\n\nstudent_grades = {\n    # student_ID : 3 assignment grades\n    2601000: [90, 95, 100],\n    2602000: [95, 85, 80],\n    2603000: [80, 88, 98],\n    2604000: [100, 98, 100]\n}\n\nprint(get_top_student(student_grades))\n</python></solution>\n</li>\n<li>\n<p>Write a function <inline-code>polygon_length</inline-code> that takes an argument <inline-code>points</inline-code>, a list of tuples, where each tuple contains a 2D point with co-ordinates <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x, y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span></span>. You can think of the sides of the polygon as being formed by joining points <inline-code>points[0], points[1], ..., points[L-1], points[0]</inline-code> where <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span></span> is <inline-code>len(points)</inline-code>. The function should compute and return the total length of the polygon i.e. sum of its sides.</p>\n<python>def euclidean_distance(p1, p2):\n    \"\"\"\n    Computes Euclidean distance between two 2D points.\n\n    Args:\n        p1: list/tuple of length 2\n        p2: list/tuple of length 2\n\n    Returns: the euclidean distance as a float\n    \"\"\"\n    d = (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2\n    return d ** 0.5\n\n\n# Create function here\n\npolygon = [(0, 0), (2, 0),(2, 2), (0, 2)]\nprint(polygon_length(polygon))  # prints 8.0\n</python>\n<solution><python>def polygon_length(points):\n    length = 0\n    for i in range(len(points)):\n        if i == len(points) - 1:\n            j = 0\n        else:\n            j = i + 1\n            \n        # polygon side is formed by joining points[i] and points[j]\n        length += euclidean_distance(points[i], points[j])\n        \n    return length\n\n\npolygon = [(0, 0), (2, 0),(2, 2), (0, 2)]\nprint(polygon_length(polygon))\n</python></solution>\n</li>\n<li>\n<p>Write a function <inline-code>sudoku_generator</inline-code> that generates a random <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>9</mn><mo>×</mo><mn>9</mn></mrow><annotation encoding=\"application/x-tex\">9 \\times 9</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">9</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">9</span></span></span></span></span> Sudoku grid.</p>\n<ul>\n<li>First start with empty list <inline-code>grid</inline-code></li>\n<li>In a loop, generate 9 lists (i.e. 9 rows of grid) and append them the <inline-code>grid</inline-code>, each list (row) is generated as follows:\n<ul>\n<li>A row is a list of length 9, with random integers from range 1 to 9.</li>\n</ul>\n</li>\n<li>Now you should have a list of lists (<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>9</mn><mo>×</mo><mn>9</mn></mrow><annotation encoding=\"application/x-tex\">9 \\times 9</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">9</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">9</span></span></span></span></span>).</li>\n<li>Replace <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>75</mn><mi mathvariant=\"normal\">%</mi></mrow><annotation encoding=\"application/x-tex\">75\\%</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">7</span><span class=\"mord\">5</span><span class=\"mord\">%</span></span></span></span></span> of values in the grid with zeros. To do this, suppose <inline-code>N = int(0.75 * 81)</inline-code> is the number of values to be replaced with zero.\n<ul>\n<li>For <inline-code>N</inline-code> times, in a loop, generate random indices <inline-code>i</inline-code> and <inline-code>j</inline-code>, each from <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></span> to <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>8</mn></mrow><annotation encoding=\"application/x-tex\">8</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">8</span></span></span></span></span>. Then set value <inline-code>grid[i][j] = 0</inline-code></li>\n</ul>\n</li>\n</ul>\n<p>Note that this program won’t generate a perfectly valid Sudoku grid. We need more work to make it a valid Sudoku grid. So this problem is meant to give you some idea about how to approach such a problem.</p>\n<python>from random import randint\n\n\ndef sudoku_generator():\n    # Write code here\n\ndef display_sudoku(grid):\n    for row in grid:\n        for num in row:\n            print(num, end=\" \")\n        print()\n\ndisplay_sudoku(sudoku_generator())\n</python>\n<output>0 0 2 9 0 2 4 8 0 \n7 0 0 0 0 0 0 4 9 \n8 8 0 4 8 8 5 0 0 \n0 4 0 4 0 0 0 9 0 \n0 0 0 8 0 0 0 0 0 \n0 0 0 1 0 0 0 2 9 \n9 0 0 5 0 0 4 8 0 \n0 8 3 0 1 4 0 0 0 \n4 0 3 3 4 0 0 5 6 \n</output>\n<solution><python>from random import randint\n\n\ndef sudoku_generator():\n    grid = []\n    \n    for i in range(9):\n        row = []\n        for j in range(9):\n            row.append(randint(1, 9))\n        grid.append(row)\n        \n    for count in range(int(0.75 * 81)):\n        i = randint(0, 8)  # random index i\n        j = randint(0, 8)  # random index j\n        grid[i][j] = 0\n    \n    return grid\n\n\ndef display_sudoku(grid):\n    for row in grid:\n        for num in row:\n            print(num, end=\" \")\n        print()\n\ndisplay_sudoku(sudoku_generator())\n</python></solution>\n</li>\n<li>\n<p>Suppose we have a thesaurus with data of following kind:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Word</th><th>Synonyms</th></tr></thead><tbody><tr><td>brave</td><td>bold, courageous, dauntless, fearless, gallant</td></tr><tr><td>happy</td><td>blissful, delighted, glad, gratified, joyful</td></tr><tr><td>absurd</td><td>bizarre, crazy, fanciful, foolish, insane, nonsensical</td></tr></tbody></table>\n<p>How will you store this data so that it is easy and efficient to ask the following kinds of questions?</p>\n<ul>\n<li>Does the thesaurus contain the word “sad” ?</li>\n<li>Are words “brave” and “courageous” synonyms?</li>\n</ul>\n<p>Create the appropriate data structure in Python and write code that answer the questions above.</p>\n</li>\n</ol>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}