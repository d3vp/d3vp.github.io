{"pageProps":{"allPosts":[{"slug":"Lecture-1.md","content":"\n:::blockquote{.notes-only}\nIn the beginning was the Tao. The Tao gave birth to Space and Time.\nTherefore Space and Time are the Yin and Yang of programming.\n:cite[— [Tao of Programming](https://www.mit.edu/~xela/tao.html)]\n:::\n\n##  Binary Numbers \n\nIn decimal system, a number is expressed as a sequence of digits $0$ to $9$.\n\nFor example, `Two thousand twenty one ⇔ 2021`\n\n##\n\nIn binary number system the set of digits, is called binary digits or :sc[bits]: $\\{0, 1\\}$.  \n\nA binary number is expressed as a sequence of bits.  \n\nFor example, $183$ in binary is $10110111$.\n\n## Converting from decimal to binary\n\n::decimal-binary\n\n## Converting from binary to decimal\n\n::binary-decimal\n\n## Groups of bits\n\nA group of $8$ bits is called a :i[byte]  e.g. $11010111$\n- $1$ kilobyte (kB) = $1000$ bytes\n- $1$ megabyte (MB) = $10^6$  (million) bytes\n- $1$ gigabyte (GB) = $10^9$ (billion) bytes\n- $1$ terabyte (TB) = $10^{12}$ bytes (1000 billion)\n\n## What is programming? \n\n:::div{.gap1}\nProgramming is the process of creating a set of instructions — a program — to tell a computer how to perform a task.\n\nPrograms take input data, perform some computation — numerical or symbolic (text) — and produce output data.\n:::\n\n##\n\n:::div{.gap1}\nComputers can perform only basic binary operations (such as add or multiply two numbers)\n\nHow do we communicate complex instructions to computers? — Use a programming language!\n:::\n\n## Levels of programming languages\n\n:::div{.my2}\n| Low-level languages                                    | High-level languages                              |\n|--------------------------------------------------------|---------------------------------------------------|\n| Closer to machine, difficult for humans                | Closer to humans,  easier for humans to work with |\n|                                                        |                                                   |\n| Less portable, provide  less abstraction over hardware | More portable, more abstraction over hardware     |\n| Examples: Assembly Language                            | Examples: Java, Python                            |\n:::\n\n\n## How do computers understand high-level languages?\n\n:::div{.gap1}\nHigh-level languages are translated into machine code (for CPU). \n\nProgramming languages come in two main flavors — :i[compiled] languages or :i[interpreted] languages.\n\nCompilers and interpreters are software tools responsible to translate source code into machine code.\n:::\n\n##\n\n:::div{style=\"margin-bottom: 1em;\"}\n:sc[Compiled] languages (e.g. C/C++, Java)  \n\n- High-level program (source code)  ➞  :sc[Compiler] ➞ Binary executable (e.g. .exe or .dmg)\n- Once compiled, the binary program can be executed without compiler.\n:::\n\n:::div\n:sc[Interpreted] (e.g. Python, Ruby)\n\n- High-level program (source code) ➞ Executed directly by an :sc[Interpreter]\n- The interpreter is required on the machine where the program is executed.\n:::\n\n::divider\n\n## Data in binary\n\nComputers can understand only binary numbers  \n\nHow can we encode data in the real world into binary numbers?\n\n::img{src=\"module-1/data-in-binary.svg\" style=\"margin: 2rem auto; width:100%;\" }\n\n## Integers in binary\n\nWe already saw how to represent positive integers in binary e.g.  \n:div[$109 = 1101101_2$]{style=\"text-align: center;\"}\n\nFor signed integers (to differentiate negative and positive), an extra leftmost bit is used for sign only, e.g.  \n    :div[$-109 = \\colorbox{lightblue}{1}1101101_2$]{style=\"text-align: center;\"} \n    :div[$+109 = \\colorbox{lightblue}{0}1101101_2$]{style=\"text-align: center;\"}\n\n::div[(For more info: https://en.wikipedia.org/wiki/Signed_number_representations)]{.smaller}\n\n## Real numbers in binary\n\n64-bit :sc[Floating point] format is used to represent numbers with decimal point, e.g.  \n:div[$\\colorbox{lightblue}{0}\\colorbox{lightpink}{10000000000}\\colorbox{lightgreen}{1001001000011111101101010100010001000010110100011000} = 3.141592653589793$]{style=\"text-align: center;\"}\n\n::div[(For more info: https://en.wikipedia.org/wiki/Double-precision_floating-point_format)]{.smaller}\n\n##\n\nFloating point format has a :i[finite precision], but digits of $\\pi$ run forever: :div[$3.1415926535897932384626433832795028841...$]{style=\"text-align: center;\"}\n\nWith only 64-bits, we can only have precision up to a fixed digits after decimal point: $3.141592653589793$\n\n\n\n## Text in binary\n\n::p[Letters and punctuations in human languages are encoded in binary using a :i[Character Encoding] such as ASCII or UTF-8 (Unicode).]{.ppt-m-3}\n\n::image{style=\"margin: 0 auto; width: 80%;\" src=\"module-1/ASCII-Table.png\" .ppt-img50}  \n::div[(source: https://simple.wikipedia.org/wiki/ASCII)]{style=\"font-size: 0.6em; margin: 0 auto;\"}\n\n## Images, audio & video in binary\n\nBinary data is stored in a file using a specific format.\n\nPrograms know what to do (play music, show image, etc) based on the format.  \n\nWe already know some of these formats:\n- Images: jpeg, png\n- Audio: mp3, m4a, wma\n- Video: mp4, avi, wmv\n\n\n::divider\n\n## Thonny Demo — Editor vs Shell\n\nPython interpreter works in two modes:\n- An interactive :sc[Shell] mode (with the prompt `>>>`)\n    - Line(s) of code is executed immediately as soon entered and output is visible immediately\n- :sc[Script] mode\n    - Executes a Python file (`.py`) as a program.\n\nThonny allows us to use both modes in one graphical interface.\n\n## Comments\n\nComments are annotations we add to our program and are ignored by the Python interpreter.\n\nIn Python, we start a comment using `#`.\n\n```python\n# Author: Deven\n# My first program\n\n# This is a comment on its own line & it will be ignored\nprint(\"Hello, world!\")  # str\nprint(123)  # int\nprint(1.614)  # float \n```\n\n##    \nWe use comments to:\n- Make the code easier to read and understand by explaining how it works.\n- Indicate authorship and license.\n- Disable some code (prevent it from executing) but still keeping it in the file.\n\n\nIn Thonny, we can use `Edit menu -> Toggle comment` to comment/uncomment the selected lines.\n\n\n## Objects and Data Types\n\nAll data in a Python program is represented by :sc[objects]. \n\nAn object always has a :sc[type] (or :sc[class]) associated with it.\n\nWe can use `type()` function to know the type of an object.\n\n:::hgrid{gap=\"7em\"}\n```python lineno=false\n>>> type(5)\n<class 'int'>\n```\n\n::image{style=\"margin: 0 auto; width: 40%;\" src=\"module-1/int.svg\" .ppt-img100}  \n:::\n\n##\n\n::::div{style=\"display: grid; gap: 3em;\"}\n:::hgrid{gap=\"7em\"}\n```python lineno=false\n>>> type(3.1415)\n<class 'float'>\n```\n\n::image{style=\"margin: 0 auto; width: 40%;\" src=\"module-1/float.svg\" .ppt-img100}  \n:::\n\n:::hgrid{gap=\"7em\"}\n```python lineno=false\n>>> type(\"Hello\")\n<class 'str'>\n```\n\n::image{style=\"margin: 0 auto; width: 40%;\" src=\"module-1/str.svg\" .ppt-img100}  \n:::\n::::\n\n##\n\nAn object's type determines the operations that the object supports:\n\n```python\n#  objects of int type can be added using +\n>>> 10 + 5\n15\n\n# But an object of type str cannot be added to an int using +\n>>> \"Hello\" + 5\nTraceback (most recent call last):\n  File \"<pyshell>\", line 1, in <module>\nTypeError: can only concatenate str (not \"int\") to str\n```\n\n## Summary\n \nWe saw the three basic data types in Python:\n- `int`: Integers such as $..., -1, 0, 1, 2, ...$\n- `float`: Floating-point numbers such as $-1.2, 3.14,$ etc.\n- `str`: Text data (a sequence of characters) such as \"hello world\", \"Python\", etc.\n\nThe terms :sc[Object] and :sc[Value] are used interchangeably.  \nSo are the terms :sc[Class] and :sc[Type].\n\n\n::divider","title":"1 — Programming Basics","date":"2024-01-03","published":true},{"slug":"Lecture-2.1.md","content":"\n## Review of last week\n\nAll data in a Python program is represented by :sc[objects]. \n\nAn object always has a :sc[type] (or :sc[class]) associated with it.\n\n- `int`: Integers such as $..., -1, 0, 1, 2, ...$\n- `float`: Floating-point numbers such as $-1.2, 3.14,$ etc.\n- `str`: Text data (a sequence of characters) such as \"hello world\", \"Python\", etc.\n\nIn Thonny, we can use `Edit menu -> Toggle comment` to comment/uncomment the selected lines.\n\n## Variables\n\nIn Python, a :sc[Variable] is a name that refers to an object in computer memory.  \nA variable can be created using :sc[Assignment Statement]:  \n\n:::div{.center .code .my3}\n:span[variable_name = value]{.bgblue .p1 .br5}\n:::\n\n`=` is known as the :sc[assignment operator].\n\n##\n\n```python\n# create a variable and assign it value 20\ntemperature = 20  \n\n# variable temperature refers to 20 which is displayed\nprint(\"Today's temperature is\", temperature)\n\n# show type of the variable\nprint(\"Type of temperature variable is\", type(temperature))\n```\n\n```output\nToday's temperature is 20\nType of temperature variable is <class 'int'>\n```\n\n## Arithmetic with numbers\nCalculations with numbers can be done using :i[arithmetic operators].\n\n::::div{.hgrid}\n:::div\n```python\n# Addition\nprint(1.5 + 1.5) # 3.0\n\n# Subtraction\nprint(10 - 20)  # -10\n```\n:::\n:::div\n```python\n# Multiplication\nprint(42 * 42)  # 1764\n\n# Division\nprint(1 / 5)  # 0.2\n\n# Exponentiation (x to the power of y)\nprint(2 ** 16)  # 65536\n```\n:::\n::::\n\n##\n\n```python\ntemperature = 20\n# Unary minus operator\nprint(-temperature)  # -20\n\n\n# Computing rest mass energy of an electron\nrest_mass = 9.109e-31  # Using scientific notation\nspeed_of_light = 3e8\n\nrest_mass_energy = rest_mass * (speed_of_light ** 2)  # E = mc^2\nprint(rest_mass_energy)  # 8.198099999999999e-14\n```\n\n## Floor division and remainder\n\n::img{src=\"module-2/divmod.svg\" style=\"margin:2em;\"}\n\n\n```python\n# floor division\nprint(20 // 3)  # 6\n\n# remainder\nprint(20 % 3)  # 2\n```\n\n## \n\n```python\n# Converting seconds to minutes\n\nduration = 320\nprint(duration, \"seconds equal\", duration / 60, \"minutes.\")\n# 320 seconds equal 5.333333333333333 minutes.\n\n\n# Alternative approach:\nminutes = duration // 60\nseconds = duration % 60\nprint(duration, \"seconds equal\", minutes, \"minutes and\", \n      seconds, \"seconds.\")\n# 320 seconds equal 5 minutes and 20 seconds.\n```\n\n## Result type of arithmetic operations\n\n::image{style=\"margin: 0 auto; width: 65%;\" src=\"module-2/result_type.png\" .ppt-img80} \n\n##\n```python\nx = 2 + 1\nprint(x, type(x))  # 3 <class 'int'>\n\nx = 2 + 1.0\nprint(x, type(x))  # 3.0 <class 'float'>\n\n# Classic division always results in float\nx = 1 / 2  \nprint(x, type(x))  # 0.5 <class 'float'>\n```\n\n:::div{.px2 .py1 .my2 style=\"border: solid 1px lightgray; border-radius:5px; background-color: #d6efd6;\"}\n:b[Try the above examples with other operators!]{.p0}\n:::\n\n##\n\nTry the problem \"Distance between two points\" on Ed.\n\n## Basic string operations\n\nStrings are sequences of zero or more characters.\n\nIn Python, strings are enclosed by either single or double quotes.\n \n```python\n\"Hello\"\n'everyone!'\n\"I'm Batman.\"  # single quote allowed inside double quotes,\n'You can call me \"Bruce\".'  # and vice versa.\n'123' # this is a string, not a number!\n\"\" # this is an empty string\n\" \" # this is a string with just one space\n```\n\n##\n```python\n# a multi-line string using triple quotes\nlines = \"\"\"The woods are lovely, dark and deep,   \nBut I have promises to keep,   \nAnd miles to go before I sleep,   \nAnd miles to go before I sleep.\n\"\"\"\nprint(lines)\n\n# We can also use single quotes for multi-line strings\nprint(\n'''I hold it true, whate'er befall;\nI feel it when I sorrow most;\n'Tis better to have loved and lost\nThan never to have loved at all.\n''')\n```\n\n## String concatenation (joining) using `+` operator\n\n```python\nmessage = \"Hello\" + \"everyone\"\nprint(message)  # Helloeveryone\n\nname = \"Alice\"\nmessage = \"Hello \" + name\nprint(message)  # Hello Alice\n\nstring = \"1\" + \"2\" + \"3\"\nprint(string)  # 123 and not the number 6\n\nprice = 100\nprint(price + \" USD\")\n# TypeError: unsupported operand type(s) for +: 'int' and 'str'\n```\n\n## String repetition\nString can be repeated multiple times using `*` operator.\n\n```python\nprint(\"Welcome! \" * 3)  # 'Welcome! Welcome! Welcome! '\n\nprint(4 * \"ha\")  # 'hahahaha'\n\n```\n\n## String length\nThe function `len()` returns length of its argument string.\n\n```python\npassword = \"xyz1234\"\nprint(\"Password length:\", len(password))\n# Password length: 7\n\nprint(len(1234))\n# TypeError: object of type 'int' has no len()\n\n```\n\n## Order of Expression Evaluation\n\nWhen we have multiple operators in the same expression, which operator should apply first?  \n\nAll Python operators have a :sc[precedence] and :sc[associativity]:\n- Precedence — for two different kinds of operators, which should be applied first?\n- Associativity — for two operators with the same precedence, which should be applied first?\n\n##\nTable below show operators from higher precedence to lower.\n\n:::div{.my2 .hgrid}\n| Operator            | Associativity |\n|---------------------|---------------|\n| `()` (parentheses)  | -             |\n| `**`                | Right         |\n| Unary `-`           | -             |\n| `*`, `/`, `//`, `%` | Left          |\n| Binary `+`, `-`     | Left          |\n| `=` (assignment)    | Right         |\n:::\n\n\n##\n```python\nx = 3\ny = 5\n# Multiplication has higher precedence than addition\nz = x + 2 * y + 1  \nprint(z)  # 14\n\n# Need to use parentheses to enforce the order we want\nz = (x + 2) * (y + 1)\nprint(z)  # 30\n\n# Same precedence so left to right\nz = x * y / 100  \nprint(z)  # 0.15\n```\n\n## \n```python\n# Same as 2 ** (3 ** 2) because \"**\" goes right to left\nz = 2 ** 3 ** 2\nprint(z)  # 512\n\n# Using parentheses to enforce the order we want\nz = (2 ** 3) ** 2  \nprint(z)  # 64\n\nx = 5\nx = x + 1  # addition happens first and then assignment\nprint(x)  # 6\n\n```\n\n## More on Variables\n\nLet us write code that implements the following formula to convert fahrenheit to celsius:\n\n$$c = \\frac{5(f-32)}{9}$$\n\n\n```python\nprint(\"10 F in C is\", 5 * (10 - 32) / 9)\n```\n\n## :span[Variables allow \"saving\" intermediate results of a computation]{style=\"font-size: 0.83em;\"}\n\nWe can use variable to store the result so that we can reuse it in the program later.  \n\n```python\nfahrenheit = 10\n\n# Store the result of the expression\ncelsius = 5 * (fahrenheit - 32) / 9\n\nprint(fahrenheit, \"F in C is\", celsius)\n\n# Use variable celsius for more calculations\nprint(\"Adding 10 degrees today:\", celsius + 10)\n```\n\n## :span[Variables can be reassigned new values]{style=\"font-size: 0.85em;\"}\n```python\n# Create variable name \"number\" and assign a value to it\nnumber = 123  \nprint(number)  # displays 123\n\n# Assign new value to existing variable \"number\"\nnumber = -50\n\nprint(number)  # displays -50\n\n# add 10 and assign the result value to existing variable \"number\"\nnumber = number + 10\n\nprint(number)  # displays -40\n```\n\n##\n\nNew values can be of different type.  \n\n<div style=\"margin-top: 2em; margin-bottom: 2em; width: 800;\">\n<iframe  width=\"800\" height=\"500\" frameborder=\"0\" src=\"https://pythontutor.com/iframe-embed.html#code=number%20%3D%20123%20%20%23%20an%20int%20value%0Amessage%20%3D%20%22hello%22%20%20%23%20a%20string%0A%0Aprint%28number,%20type%28number%29%29%0Aprint%28message,%20type%28message%29%29%0A%0A%23%20Now%20variable%20number%20refers%20to%20the%20string%20%22hello%22%0Anumber%20%3D%20message%0A%0Aprint%28number,%20type%28number%29%29%0Aprint%28message,%20type%28message%29%29%0A&codeDivHeight=400&codeDivWidth=350&cumulative=false&curInstr=0&heapPrimitives=true&origin=opt-frontend.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false\"> </iframe>\n</div>\n\n## \nHowever, variables should be changed with caution as it can produce errors or strange results.\n```python\nnumber = 123  # an int value\nmessage = \"hello\"  # a string\n\n# Now variable number refers to the string \"hello\"\nnumber = message\nprint(number * 2) # String repetition!\nprint(number - 10) # minus won't work with string.\n```\n\n```output\nhellohello\nTraceback (most recent call last):\n    print(number - 10)\nTypeError: unsupported operand type(s) for -: 'str' and 'int'\n```\n\n## Example: Swapping values\nSometimes we need to swap (interchange) values of two variables.\n\n::::div{.hgrid style=\"width: 110%;\"}\n:::div\nA naive attempt (does not work):\n```python\nx = 137\ny = 42\n\n# Try swapping\nx = y\ny = x\n\nprint(x, y)  # 42 42\n```\n:::\n\n:::div\nThe following will work:\n```python\nx = 137\ny = 42\n\n# Correct way to swap\ntemp = x\nx = y\ny = temp\n\nprint(x, y)  # 42 137\n```\n:::\n::::\n\n##\n\nTry the problem \"Textbox\" on Ed.\n\n\n## Rules for variable names\n\n- A variable name can only contain alpha-numeric characters and underscores `A-Z, a-z, 0-9, _`\n- A variable name cannot start with a number\n- Variable names are case-sensitive\n    - (`cat`, `Cat`, and `CAT` are three different variables)\n- They cannot be keywords.\n    - Python has 33 reserved keywords, you can see a list of them by typing `help(\"keywords\")` in the Python shell.\n\n:::div{.px2 .my2 style=\"border: solid 1px lightgray; border-radius:5px; background-color: #d6dcef;\"}\nPython filenames must follow the same rules as above.\n:::\n\n## Good practice for naming variables\n\n- Name your variable something descriptive of its purpose or content.\n- If the variable is one word, all letters should be lowercase. Eg: `hour`, `day`.\n- If the variable contains more than one word, then they should all be lowercase and each separated by an underscore. This is called :i[snake case].  \n    e.g. `is_sunny`, `cat_name`\n- Good variable names: `hour`, `is_open`,  `number_of_books`, `course_code`\n- Bad variable names: `asfdstow`, `nounderscoreever`, `ur_stupid`, `CaPiTAlsANyWHErE`\n\n\n\n\n::divider\n","title":"2.1 — Variables, Arithmetic & String operations","date":"2024-01-06","published":true},{"slug":"Lecture-2.2.md","content":"\n## Function calls\nFunction take zero or more input values, perform an action or computation, and return the result value. \n\nInput values passed to a function are called :sc[arguments].  \n\nA :sc[Function Call] is an expression that looks like below:\n\n\n:::div{.center .code .my3}\n:span[function_name(argument1, argument2, ..., argumentN)]{.bgblue .p1 .br5}\n:::\n    \nHow do we say it? — function \"takes\" argument(s) and \"returns\" a result. The result is also called the :sc[return value].\n\n## \nThe number of arguments required by a function depends on how that function is defined. \n\nFollowing are some built-in functions available in Python:\n```python\n# min() function takes 2 or more numbers and returns the minimum \nx = min(1, -4, 6)\nprint(x)  # -4\n\n# abs() function takes a number and returns absolute value of the number\ny = abs(-6)\nprint(y)  # 6\n\n# Gives an error if we do not give exactly one number\nz = abs(-1, 4)\n# TypeError: abs() takes exactly one argument (2 given)\n```\n\n## Expressions vs Statements\nAn :sc[Expression] is any valid combination of values, variables, operators, function calls.  \n\nWhen executed, it always evaluates to a single object.\n\n```python\nx = 3\ny = 4\nz = x ** 2 + y ** 2  # this expression evaluates to an int object\nprint(z)  # 25\n\ns = \"hello\"\ns2 = s * len(s) # this expression evaluates to str value\nprint(s2)  # hellohellohellohellohello\n\n```\n\n## \nA statement is one or more lines of code that performs a task but does not evaluate to any value.  \n\nSo, statements cannot be used as a part of an expression.\n\n```python\n>>> x = 123  # Does not evaluate to anything so nothing shows below\n>>> x  # This is an trivially an expression\n123\n>>> 10 + (x = 123)  # Trying to use assignment statement in an expression\n    10 + (x = 123)\n            ^\nSyntaxError: invalid syntax\n```\n\n## Function composition\nFunction composition is calling a function with the result(s) of another function(s).\n\nIt is a very useful thing to do especially when we do not need to store intermediate results.\n\n::::div{.hgrid}\n:::div\n::div[Using intermediate variables]{.b}\n```python\nx = -5\ny = -8\na = abs(x)\nb = abs(y)\nz = min(a, b)\nprint(x, y, z)\n```\n:::\n\n:::div\n::div[Using composition]{.b}\n```python\nx = -5\ny = -8\nz = min(abs(x), abs(y))\nprint(x, y, z)\n```\n:::\n::::\n\n## \n\nCheck :i[2.2 (B) — Built-in Functions] on Ed Lessons.\n\n\n## `print()` displays a space between arguments\n\n```python place=\"start\"\nnum = 1.5e3\ncity = \"New York City\"\nyear = 2023\nprint(num, city, year)\n```\n\nFirst, the arguments of `print()` are evaluated as:\n\n```python place=\"start\"\nprint(1500.0, \"New York City\", 2023)\n```\n\nThen, `print()` function is executed, which would display:\n\n:::div{.code style=\"background-color: white; border-radius:5px; padding: 0.25rem 1rem;\"}\n1500.0:span[&nbsp;]{style=\"background-color: red;\"}New York City:span[&nbsp;]{style=\"background-color: red;\"}2023\n:::\n\n::div[(Highlighted in red are spaces added by `print()`)]{.ppt-f90 style=\"margin-top: 0.5em;\"}\n\n\n##\n\n```python place=\"start\"\nx1 = 1.5\ny1 = 2\n\nprint(\"Point:\", \"(\", x1, \",\", y1, \")\")\n```\n\nFirst, the arguments of `print()` are evaluated as:\n\n```python place=\"start\"\nprint(\"Point:\", \"(\", 1.5, \",\", 2, \")\")\n```\n\nThen, `print()` function is executed, which would display:\n\n:::div{.code style=\"background-color: white; border-radius:5px; padding: 0.25rem 1rem;\"}\n:span[Point:]:span[&nbsp;]{style=\"background-color: red;\"}(:span[&nbsp;]{style=\"background-color: red;\"}1.5:span[&nbsp;]{style=\"background-color: red;\"},:span[&nbsp;]{style=\"background-color: red;\"}2:span[&nbsp;]{style=\"background-color: red;\"})\n:::\n\n::div[(Highlighted in red are spaces added by `print()`)]{.ppt-f90 style=\"margin-top: 0.5em;\"}\n\n## \n\n```python place=\"start\"\nx1 = 1.5\ny1 = 2\n\npoint1 = \"(\" + str(x1) + \", \" + str(y1) + \")\" \nprint(\"Point:\", point1)\n```\n\nFirst, the arguments of `print()` are evaluated as:\n\n```python place=\"start\"\nprint(\"Point:\", \"(1.5, 2)\")\n```\n\nThen, `print()` function is executed, which would display:\n\n:::div{.code style=\"background-color: white; border-radius:5px; padding: 0.25rem 1rem;\"}\n:span[Point:]:span[&nbsp;]{style=\"background-color: red;\"}(1.5, 2)\n:::\n\n::div[(Highlighted in red are spaces added by `print()`)]{.ppt-f90 style=\"margin-top: 0.5em;\"}\n\n\n## Defining a function\n\nA function is a :i[named] block of code that performs a task.\n\nSo far we have been using (calling) functions to do specific tasks — `print()`, `input()`, etc.\n\nWe can also define/create our own function.\n\n\n## Defining a function that takes no arguments\n\n:span[Such functions always do the same thing each time they are executed.]{.ppt-f94}\n\n::::div{.hgrid}\n:::div\n```python\n# Function definition\ndef display_greeting():\n    print(\"+------------+\")\n    print(\"|  Welcome!  |\")\n    print(\"+------------+\")\n\n# Function call\ndisplay_greeting()\n\n# Call it again\ndisplay_greeting()\n```\n:::\n\n:::div\n```output\n+------------+\n|  Welcome!  |\n+------------+\n+------------+\n|  Welcome!  |\n+------------+\n```\n:::\n::::\n\n\n## :span[Functions with arguments and return value]{.ppt-f90}\nA function can return a value using `return` statement.\n\n::::div{.hgrid}\n:::div\n```python\ndef f(x):\n    result = x * x - x - 1\n    return result\n    # OR: return x * x - x - 1\n\n# Call the function f\ny = f(5)\nprint(y)  # 19\n\n# Call again\ny = f(10)\nprint(y)  # 89\n```\n:::\n:::div\n```python\n# two parameters\ndef mean(x, y):\n    return (x + y) / 2\n\n\nprint(mean(3, 4))  # 3.5\n```\n:::\n::::\n\n##\n\n:::div{.bgred .px2 .py025 .br5}\nParentheses `()` are required to call a function. Omitting them is a common mistake.\n\nWhen a function is called, correct number of arguments must be passed. It is an error to pass too many or too few arguments than what a function definition expects.\n:::\n\n## Creating a function — general form/syntax\n\n```python\ndef function_name(param1, param2, ..., paramN):  # function header\n    # function body\n    statement1\n    statement2\n    .\n    .\n    statementN\n```\n\n- `def` is a Python keyword used to define functions\n- Notice how statements are indented by spaces, typically 4 spaces. In Thonny, we can just use tab key once to indent by 4 spaces.\n\n##\n\n- When we define a function using `def` keyword:\n    - it is not executed.  \n    - Only the function name is created, which refers to the code block inside the function.\n- When we call a function, the code block inside the function is :i[actually] executed.\n\n\n## Why create our own functions?\n\n- Functions allow code re-use; duplication of code can be avoided.\n- They help organize code into sections, which makes programs easier to read and understand.\n- They make programs easier to fix.\n\n\n## Docstrings\n\nA :sc[docstring] (documentation string) is a multiline (triple-quoted) string that we write after the header of a function to explain how the function works.\n\nIt is an important part of programming to write such documentation.  \nYou will be expected do so in your assignments.\n\n##\n\n```python\ndef euclidean_distance(x1, y1, x2, y2):\n    \"\"\"\n    Computes Euclidean distance between two 2D points.\n\n    Parameters:\n        x1 (float): x-coordinate of first point  \n        y1 (float): y-coordinate of first point\n        x2 (float): x-coordinate of second point\n        y2 (float): y-coordinate of second point\n\n    Returns: the euclidean distance as a float\n    \"\"\"\n    d = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    return d ** 0.5\n```\n\n## Types of Errors\n\n:b[Syntax Errors]: When syntax is incorrect such as wrong punctuations, invalid characters, missing quotes or parentheses etc.  \nProgram does not run at all in the case of syntax errors.\n```python\n# The following code has Syntax error due to missing double-quotes:\nx = 5\nprint(\"Square of x is)\nprint(x ** 2)\n```\n\n##\n\n:::div{.ppt-f94}\n:b[Runtime Errors], also called :sc[Exceptions], occur when there is a problem in the program during execution.  \nAll code executes until an exception occurs.\n```python\n# The following code produces NameError because \n# variable y was not created before it is used.\nx = 5\nprint(\"Value of x is\", x)\nprint(\"Square of x is\", y ** 2)\n```\n\n:b[Semantic] or Logic errors are said to occur when a program executes without a problem but does not produce correct output as expected.\n\n:sc[Debugging] is the process of finding and removing errors in a program.\n:::\n\n::divider\n","title":"2.2 — Function calls, Defining functions, Types of Errors","date":"2024-01-07","published":true},{"slug":"Lecture-3.1.md","content":"\n## :span[Debugging in Thonny to understand expression evaluation]{.ppt-f80}\n\n:::div{.ppt-f87}\nIn Thonny, we can use debugging features to understand how expressions are evaluated:\n\n- To show variables and their values, go to menu \"View -> Variables\"\n- First, run program in :i[debug mode] by clicking the \"Debug current script\" button (located next to the \"Run current script\" button and looks like a bug)\n- Then, we have two options:\n    - Run the program line-by-line using \"Step over\" button next to the \"Debug\" button\n    - Run program going inside each expression using \"Step into\" button (located next to \"Step over\" button)\n:::\n\n## \n\nTry the following examples in Thonny and use debug:\n\n```python\nx = 7\n\n# Increment value of variable x by 1\nx = x + 1\n\n#\ny = x * x + 2 * (x + 1) + max(x + 1, 5)\n\n# Calling print() with 4 arguments\nprint(\"x =\", x, \"y =\", y)\n```\n\n## \n\n```python\nx1 = 1.5\ny1 = 2\n\nprint(\"Given points:\", \"(\", x1, \",\", y1, \")\")\n\npoint1 = \"(\" + str(x1) + \", \" + str(y1) + \")\" \nprint(\"Given points:\", point1)\n```\n\n\n##  Boolean Values\n\nPython has two values `True` and `False` of type `bool`, which are useful for expressing and storing   yes/no or true/false kind of data.\n\n```python\n>>> True\nTrue\n>>> False\nFalse\n>>> type(True)\n<class 'bool'>\n>>> type(False)\n<class 'bool'>\n```\n\n## Comparison Operators\n\n:sc[comparison operators], also known as :i[relational operators], are used to compare two values, such as numbers or string.  \nThe result of such comparison is always a `bool` value i.e. `True` or `False`.\n\n:::div{.hgrid}\n```python\n# are these numbers equal?\n>>> 10 == 10  \nTrue\n>>> 10 == 20\nFalse\n```\n```python\n>>> x = 5\n>>> y = 10\n>>> x == y\nFalse\n>>> x < y\nTrue\n>>> x > y\nFalse\n```\n:::\n\n##\n\n```python\n# A variable can store the result of a boolean expression \n# (just like we did for arithmetic expressions)\n>>> x = 3\n>>> is_positive = (x > 0)\n>>> is_positive\nTrue\n\n>>> x = 5\n>>> y = 5\n>>> is_equal = (x == y)\n>>> is_equal\nTrue\n```\n\n## Boolean Expressions\nA :sc[boolean expression] is an expression that evaluates to either `True` or `False`.\nExamples above show how boolean expressions are created using comparison operators.\n\n:::div{.p1 .br5 .bgred}\n- Common error is using `=` (single equals sign) instead of `==` (double equals sign)\n- `=` is the assignment operator, used to create variable and assign it a value\n- `==` is a comparison operator used to check for equality between two values\n:::\n\n\n## List of comparison operators\n- `x == y` — `True` if `x` is equal to `y`, otherwise `False`\n- `x != y` — `True` if `x` is not equal to `y`, otherwise `False`\n- `x < y` — `True` if `x` is less than `y`, otherwise `False`\n- `x > y` — `True` if `x` is greater than `y`, otherwise `False`\n- `x <= y` — `True` if `x` is less than or equal to `y`, otherwise `False`\n- `x >= y` — `True` if `x` is greater than or equal to `y`, otherwise `False`\n    \n\n## Order of operations\n\nAll comparison operators (e.g. `==`, `!=`, etc.) have same priority and are evaluated from left to right.\n\nAll arithmetic and string operators have higher priority than comparison operators.\n\n```python\n>>> x = 5\n# + operator will be evaluated before ==\n>>> x + 1 == 6\nTrue\n```\n\n##\n\n::::div{.p1 .br5 .bggreen}\nWrite a program that takes an integer as input from the user and displays on your screen whether it is true or false that such integer is even.\n\n:::div{.hgrid}\n```output\nEnter a number: 5\n5 is an even number: False\n```\n```output\nEnter a number: 8\n8 is an even number: True\n```\n:::\n\n```python\nnum = int(input(\"Enter a number: \"))\n# Write code below\n```\n::::\n\n##\n\n:::solution\n```python\nnum = int(input(\"Enter a number: \"))\n\n# a number is even if remainder is 0 when it is divided by 2\nis_even = (num % 2 == 0)\n\nprint(num, \"is an even number:\", is_even)\n\n# without using extra variable:\n# print(num, \"is an even number:\", num % 2 == 0)\n```\n:::\n\n\n## Comparing strings\nComparison operators work for strings as well.  \nThe comparison is done :i[alphabetically] i.e. following a dictionary order\n\n:::div{.hgrid}\n```python\n>>> \"cat\" == \"cat\"\nTrue\n>>> \"cat\" == \"dog\"\nFalse\n>>> \"cat\" != \"Cat\"\nTrue\n```\n```python\n# \"c\" appears before \"d\" alphabetically\n>>> \"cat\" < \"dog\"\nTrue\n\n# A-Z appear before a-z alphabetically\n>>> \"cat\" < \"Dog\"\nFalse\n```\n:::\n\n##\n\n```python\n# Objects of different types are always not equal\n>>> \"cat\" == 123\nFalse\n\n# inequality is not allowed \n# between a number and str\n>>> \"cat\" < 123\nTypeError: '<' not supported between instances of 'str' and 'int'\n\n# All of the above examples work the same when using variables\n>>> s1 = \"cat\"\n>>> s2 = \"dog\"\n>>> s1 == s2\nFalse\n```\n\n\n## Equality and floating point numbers\n\nConsider following example:\n\n```python\n>>> x = 1.1 + 2.2\n>>> x == 3.3  # why is this False?\nFalse\n```\n\n- As we saw earlier, a floating-point number is stored with 64-bit :i[finite precision].\n- This means that a number may not be stored as precisely as we would like.\n\n## Correct way to check if two `float` values are equal\n\nWe should check if they are \"close enough\".\n\n```python\n>>> epsilon = 0.000001  # define how close two numbers need to be\n\n>>> x = 1.1 + 2.2\n>>> x\n3.3000000000000003\n\n# Check if x and 3.3 are within epsilon distance\n>>> abs(x - 3.3) < epsilon\nTrue\n```\n\nThe epsilon value depends on the application and how much error we are willing tolerate.\n\n## Logical Operators\nLogical operators are useful to combine multiple conditions.\n\nLogical operators take boolean expressions as operands and produce a result of type `bool` when evaluated.\n\nPython has 3 boolean operators:\n- `not` — a unary operator\n- `and` — binary operator\n- `or` — binary operator\n\n##\n\nSuppose `x` is a variable of type `bool`:\n:::div{.code .p1 style=\"font-size: 0.75em;\"}\n| x     | not x |\n|-------|---------|\n| False | True    |\n| True  | False   |\n:::\n\n`not x` evaluates to the opposite value of `x`.\n\n## \n\nSuppose `x` and `y` are variables of type `bool`:\n::::div{.hgrid}\n:::div{.code .ppt-py2 .ppt-f80}\n| x     | y     | x and y |\n|-------|-------|---------|\n| True  | True  | True    |\n| True  | False | False   |\n| False | True  | False   |\n| False | False | False    |\n:::\n:::div{.code .ppt-py2 .ppt-f80}\n| x     | y     | x or y |\n|-------|-------|---------|\n| True  | True  | True    |\n| True  | False | True   |\n| False | True  | True   |\n| False | False | False    |\n:::\n::::\n\n`x and y` evaluates to `True` if and only if both `x` and `y` are `True`.\n\n`x or y` evaluates to `False` if and only if both `x` and `y` are `False`.\n\n## Order of operations\n\nIn order of higher to lower priority: `not`, `and`, `or`\n\nAs usual, we can use parentheses in order to change the priority.\n\n:::::div{.hgrid}\n::::div{style=\"border-right: solid 1px black;\"}\nWhat does `b and not a or b` evaluate to if `a = False` and `b = True` ?\n:::div{.code}\n- b and not a or b\n- True and not False or True\n- True and True or True\n- True or True\n- True\n:::\n::::\n::::div\nWhat does `a and not (a or b)` evaluate to if `a = True` and `b = False` ? \n:::div{.code}\n- a and not (a or b)\n- True and not (True or False)\n- True and not True\n- True and False\n- False\n:::\n::::\n:::::\n\n## Updated operator precedence table\n\n::::div{.hgrid}\n:::div{.ppt-f80}\n| Operator                         | Associativity |\n|----------------------------------|---------------|\n| `()` (parentheses)               | -             |\n| `**`                             | Right         |\n| Unary `-`                        | -             |\n| `*`, `/`, `//`, `%`              | Left          |\n| Binary `+`, `-`                  | Left          |\n| `==`, `!=`, `<`, `>`, `<=`, `>=` | Left          |\n| `not`                            | -             |\n| `and`                            | Left          |\n| `or`                             | Left          |\n| `=` (assignment)                 | Right         |\n:::\n\nYou don't need to memorize all this, use parenthesis when in doubt!\n\n::::\n\n\n\n## Try these examples in Thonny\n\nChange the value of x and see results of boolean expressions.\n\n```python\nx = 30\n# Is an even number greater than 20?\nprint(x % 2 == 0 and x > 20)\n\nx = 10\n# Is an even number or a multiple of 5 greater than 20?\nprint(x % 2 == 0 or x % 5 == 0 and x > 20)\n\n# Is a multiple of 2 or 5, greater than 20? \nprint((x % 2 == 0 or x % 5 == 0) and x > 20)\n```\n\n##\n\n:::div{.px1 .py025 .bggreen}\n:b[Try it!]\n\nWrite a program that takes 3 integers $x, y, z$ as inputs and prints out `True` if $y$ is an even number between $x$ and $z$, `False` otherwise. Assume all 3 numbers will be different.\n\n```python\n# Retrieve inputs from the user\nx = int(input(\"Enter the x: \"))\ny = int(input(\"Enter the y: \"))\nz = int(input(\"Enter the z: \"))\n\n# Write code below\n```\n:::\n\n##\n\n:::solution\n```python\n# Retrieve inputs from the user\nx = int(input(\"Enter the x: \"))\ny = int(input(\"Enter the y: \"))\nz = int(input(\"Enter the z: \"))\n\n# check if y is even\nis_even = y % 2 == 0\n\n# check if y is between x and z\nis_between = (x < y and y < z) or (z < y and y < x)\n\nprint(is_even and is_between)\n```\n:::\n\n\n## Flow of execution\n\n- Flow of execution refers to order in which statements (lines of code) in our program are executed.\n- So far in our programs, each line was executed unconditionally.\n- For most programs, it is not enough as we need to make choices or run code repeatedly.\n\nWe need to control the flow of execution in our programs.\n\n## Control flow\n\nThe control flow of a program determines:\n- Which parts of the code should always be executed\n- Which parts should be executed only under certain conditions\n- Which parts should be executed repeatedly\n\nAll of these can be achieved using control flow statements:\n- `if` statement for conditional execution\n- `for` and `while` loops for repeated execution\n\n\n## :code[if] statement — to execute or not to execute\n\n:::::hgrid{cols=\"1fr 4fr\" margin=\"0 0\" gap=\"2em\"}\n::::hgrid\n:::div{.px1 .py025 .br5 style=\"background-color: white; white-space: pre;\"}\n:code[if]{.bgred}  :code[condition]{.bggreen}  :code[:]{.bgyellow}\n`    `{code}:code[code block]{.bgblue}\n:::\n::::\n:::div\n- :code[condition]{.bggreen} must be a boolean expression\n- :code[code block]{.bgblue} is one of more Python statements\n- :code[code block]{.bgblue} is executed only if the condition is True, otherwise it is skipped.\n:::\n:::::\n:::div{style=\"margin-top: -1em;\"}\nNotice space before code block. It is called :sc[indentation]. \n\n:div[Indentation is required to tell Python that the code belongs inside `if` statement.]{.bgred .px1 .py025}\n\nTypically, 4 spaces are used for indentation. We can use :i[tab] key to indent.\n:::\n\n##\n\nTry the following examples with different values for variables.\n\n```python place=\"start\"\nx = 10  \nif x > 0:\n    print(x, \"is positive\")\n```\n\n```python place=\"start\"\nnum = -5.2\n\nabsolute_num = num\n\nif num < 0:\n    absolute_num = -num\n    \nprint(\"Absolute value of\", num, \"is\", absolute_num)\n```\n\n##\n\n```python\nx = 1000\ny = 123\n\nmin_value = x\n\nif y < min_value:\n    min_value = y\n    \nprint(\"Minimum of\", x, \"and\", y, \"is\", min_value)\n```\n\n\n## `if` statement with `else` part\n\n`if` statements can have `else` part to make a choice between two code blocks.\n\n:::::hgrid{cols=\"1fr 4fr\" margin=\"0 0\" gap=\"2em\"}\n::::hgrid\n:::div{.px1 .py025 .br5 style=\"background-color: white; white-space: pre;\"}\n:code[if]{.bgred}  :code[condition]{.bggreen}  :code[:]{.bgyellow}\n`    `{code}:code[code block:sub[1]]{.bggreen}\n:code[else]{.bgred} :code[:]{.bgyellow}\n`    `{code}:code[code block:sub[2]]{.bgblue}\n:::\n::::\n\n:::div\n- When :code[condition]{.bggreen} is `True`, :code[code block:sub[1]]{.bggreen} is executed\n- Otherwise (:code[condition]{.bggreen} is `False`) and :code[code block:sub[2]]{.bgblue} is executed \n- The code blocks are also called :sc[branches] of the if-statement.\n:::\n:::::\n##\n\n```python\nx = 10  # change this to -5 and run\n\nif x > 0:\n   print(\"x is positive.\")\nelse:\n    print(\"x is not positive.\")\n```\n\n## \n\n::::div{.p2 .bggreen}\nWrite a program that takes an integer as input from the user and displays whether the number is even or odd.\n\n:::hgrid\n```output\nPlease enter a number: 5\nThe number 5 is odd\n```\n```output\nPlease enter a number: 8\nThe number 8 is even\n```\n:::\n::::\n\n##\n\n:::solution\n```python\nnum = int(input(\"Please enter a number: \"))\n\n# a number is even if remainder is zero when divided by 2\nif num % 2 == 0:\n    print(\"The number\", num, \"is even\")\nelse:\n    print(\"The number\", num, \"is odd\")\n```\n:::\n\n\n::divider\n","title":"3.1 — Order of Expression Evaluation, Comparing Values, Conditional Execution","date":"2024-01-15","published":true},{"slug":"Lecture-3.2.md","content":"\n## Flow of execution — functions\n\nTry debugging in thonny for the following examples. (Also try :i[Step out] button, when the code inside a function is being executed.)\n\n:::hgrid\n```python\n# Function definition\ndef display_greeting():\n    print(\"+------------+\")\n    print(\"|  Welcome!  |\")\n    print(\"+------------+\")\n\ndisplay_greeting()\n\ndisplay_greeting()\n```\n\n```python\ndef f(x):\n    result = x * x - x - 1\n    return result\n    # OR: return x * x - x - 1\n\ny = f(5)\nprint(y)\n\ny = f(10)\nprint(y)\n```\n:::\n\n## \n\n```python\ndef f():\n    return 2\n\n\ndef g():\n    return 3\n\n\ndef h():\n    return f() * g()\n\n\nprint(h())\n```\n\n## Variables and `if` statement\n\nVariables can be created inside the branches of `if` statement.  \n\nMake sure that all branches have same variable names!\n\n```python\nincome = 15000\n\nif income < 12000:\n    tax = 0.0\nelse:\n    taxes = income * 15.5 / 100  # Change variable name to tax\n    \nprint(\"Your tax is\", tax)\n```\n\n```output\nNameError: name 'tax' is not defined\n```\n\n\n## :span[Mutually exclusive conditions — chained `if-elif-else` statement]{style=\"margin: 0 -2em;\"} \n\n::::hgrid{margin=\"0 -2em\"}\n```python place=\"center\"\nincome = 20000\n\nif income < 12000:\n    tax = 0.0\nelif income < 30000:\n    tax = income * 15.0 / 100\nelif income < 100000:\n    tax = income * 20.0 / 100\nelse:\n    tax = income * 25.0 / 100\n    \nprint(\"Your tax is\", tax)\n```\n:::div\n- Mutually exclusive — only one of these blocks will get executed. \n- Order matters! If first of the conditions is `True`, later conditions are not checked.\n- We can have as many `elif`'s as you want.\n- The final `else` part is not required so you may omit it if not needed.\n:::\n::::\n\n\n## Example\n\nIs there anything wrong in code below?\n\n:::hgrid\n```python\ntemperature = 25\n\nif temperature > 0:\n    print(\"Cold\")\nelif temperature > 20:\n    print(\"Warm\")\nelif temperature > 30:\n    print(\"Hot\")\nelse: \n    print(\"Freezing\")\n```\n```output\nCold\n```\n:::\n\n## Order of conditions matters!\n\n::::solution\n:::hgrid\n```python\ntemperature = 25\n\nif temperature > 30:\n    print(\"Hot\")\nelif temperature > 20:\n    print(\"Warm\")\nelif temperature > 0:\n    print(\"Cold\")\nelse: \n    print(\"Freezing\")\n```\n```python\ntemperature = 25\n\nif temperature > 0 and temperature <= 20:\n    print(\"Cold\")\nelif temperature > 20 and temperature <= 30:\n    print(\"Warm\")\nelif temperature > 30:\n    print(\"Hot\")\nelse: \n    print(\"Freezing\")\n\n```\n:::\n::::\n\n##\n\nTry \"Blood Pressure\" problem on Ed Lessons.\n\n## `if` statements can be nested\n\nExamples below are logically equivalent.\n\n::::hgrid{gap=\"3em\" margin=\"0 0\"}\n:::div\n:b[Nested `if` statements]\n```python place=\"start\"\nx = 10\nif x > 0:\n    print(\"Positive\")\nelse:\n    if x < 0:\n        print(\"Negative\")\n    else:\n        print(\"Zero\")\n```\n:::\n:::div\n:b[Chained `if` statement]\n```python place=\"start\"\nx = 10\nif x > 0:\n    print(\"Positive\")\nelif x < 0:\n    print(\"Negative\")\nelse:\n    print(\"Zero\")\n```\n:::\n::::\n\n::div[You can use either one, but nested statements can easily become difficult to read.]{.ppt-95}\n\n\n## Correct indentation is essential!\n\nSometimes, incorrect indentation may not give an error but it may lead to an unexpected program.\n\n```python\nincome = 1000\n\nif income < 12000:\n    print(\"You don't have to pay tax.\")\n    tax = 0.0\nelse:\n    print(\"You have to pay tax.\")\ntax = income * 15.0 / 100  # this line should be indented\n    \nprint(\"Your tax is\", tax)\n```\n\n## Iteration using `for` loop\n\n`for` loop can be used to repeatedly execute a block of code.\n\n::::hgrid{gap=\"4em\"}\n:::div\n```python\nfor i in range(5):\n    print(\"Hello\")\n```\n```output\nHello\nHello\nHello\nHello\nHello\n```\n:::\n:::div\n```python\nfor i in range(5):\n    print(i)\n```\n\n```output\n0\n1\n2\n3\n4\n```\n:::\n::::\n\n## What happens when the `for` loop is executed?\n\n::::hgrid{cols=\"1fr 3fr\" margin=\"0 0\"}\n:::hgrid\n```python\nfor i in range(5):\n    print(i)\n```\n:::\n:::div\n- `range(5)` will produce a sequence of integers $0, 1, 2, 3, 4$ in steps.\n- `for` loop allows us to iterate i.e. \"go over\" that sequence, a number at a time\n    - In each step of the loop, variable `i` gets a value from the sequence\n- We can have any valid variable name, other than `i` if we want.\n:::\n::::\n\nTry step-by-step execution of the examples above!\n\n## `range()` function takes up to 3 arguments\n\n`range(end)`: produces sequence `0, 1, 2, ..., end-1`\n\n##\n\n`range(start, end)`: produces sequence `start, start+1, ..., end-1`\n\n##\n\n`range(start, end, step)`:\n- if `step > 0`, produces sequence `start, start+step, ..., N` where `N < end`\n- if `step < 0`, produces sequence `start, start+step, ..., N` where `N > end`\n\n## Examples of range()\n\n:::hgrid\n```python\n# 0, 1, 2, ..., 9\nfor i in range(10):\n    print(i)\n\n# 1, 2, ..., 10\nfor i in range(1, 11):\n    print(i)\n    \n# 0, 2, 4, ..., 18    \nfor i in range(0, 20, 2):\n    print(i)\n```\n```python\n# 10, 15, 20, 25, ..., 95\nfor i in range(10, 100, 5):\n    print(i)\n\n# 10, 9, 8, ..., 1\nfor i in range(10, 0, -1):\n    print(i)\n```\n:::\n\n\n## Exercise\n\nCompute sum of first N numbers.\n\n##\n\n:::solution\n```python\nN = 50\n\ntotal = 0\nfor num in range(1, N+1):\n    total = total + num\n    \nprint(total)\n```\n:::\n\n##\n\nTry \"Harmonic sum\" problem on Ed Lessons.\n\n## Indexing & Slicing Strings\n\nRecall that a string is a sequence of characters.\n\nEach character, therefore, has a position or an :sc[index]. \n\nIndex starts with zero. For example, for the string `\"Hello\"`:\n\n:::::div{style=\"display:grid;margin: 0.5rem 0;\"}\n::::div{style=\"display:grid;grid-auto-flow: row;grid-auto-rows: min-content;gap:0;width: min-content;justify-self:center;\"}\n\n:::div{style=\"display:grid;grid-auto-flow: column;grid-auto-columns: min-content;gap:0;font-family: Hack;width: min-content; font-size: 0.7em;\"}\n::div[0]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n::div[1]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n::div[2]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n::div[3]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n::div[4]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n:::\n\n:::div{style=\"display:grid;grid-auto-flow: column;grid-auto-columns: min-content;gap:0;font-family: Hack;border: 1px solid black; width: min-content;\"}\n::div[H]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n::div[e]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n::div[l]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n::div[l]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n::div[o]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n:::\n\n::::\n:::::\n\n\n## \nIndices must be integers and cannot be float.\n\nPython also allows negative indices, which go from right to left:\n\n:::::div{style=\"display:grid;margin: 0.5rem 0;\"}\n::::div{style=\"display:grid;grid-auto-flow: row;grid-auto-rows: min-content;gap:0;width: min-content;justify-self:center;\"}\n\n:::div{style=\"display:grid;grid-auto-flow: column;grid-auto-columns: min-content;gap:0;font-family: Hack;width: min-content; font-size: 0.7em;\"}\n::div[0]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n::div[1]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n::div[2]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n::div[3]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n::div[4]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n:::\n\n:::div{style=\"display:grid;grid-auto-flow: column;grid-auto-columns: min-content;gap:0;font-family: Hack;border: 1px solid black; width: min-content;\"}\n::div[H]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n::div[e]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n::div[l]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n::div[l]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n::div[o]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n:::\n\n:::div{style=\"display:grid;grid-auto-flow: column;grid-auto-columns: min-content;gap:0;font-family: Hack;width: min-content; font-size: 0.7em;\"}\n::div[-5]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\"}\n::div[-4]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\"}\n::div[-3]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\"}\n::div[-2]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\"}\n::div[-1]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\"}\n:::\n\n::::\n:::::\n\nFor any string `s`, \n- valid positive index values are from `0` to `len(s)-1`.\n- valid negative index values are from `-len(s)` to `-1`.\n\n##\nSquare brackets `[]` are used to get the letter in a string at a given index.\n\n```python\n>>> message = \"Hello\"\n>>> message[0]  # first letter\n'H'\n>>> message[1]  # second letter\n'e'\n>>> message[4]  # fifth letter, the last one in the string\n'o'\n```\n\n##\n\n:::::div{style=\"display:grid;margin: 0.5rem 0;\"}\n::::div{style=\"display:grid;grid-auto-flow: row;grid-auto-rows: min-content;gap:0;width: min-content;justify-self:center;\"}\n\n:::div{style=\"display:grid;grid-auto-flow: column;grid-auto-columns: min-content;gap:0;font-family: Hack;width: min-content; font-size: 0.7em;\"}\n::div[0]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n::div[1]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n::div[2]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n::div[3]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n::div[4]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n:::\n\n:::div{style=\"display:grid;grid-auto-flow: column;grid-auto-columns: min-content;gap:0;font-family: Hack;border: 1px solid black; width: min-content;\"}\n::div[H]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n::div[e]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n::div[l]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n::div[l]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n::div[o]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n:::\n\n:::div{style=\"display:grid;grid-auto-flow: column;grid-auto-columns: min-content;gap:0;font-family: Hack;width: min-content; font-size: 0.7em;\"}\n::div[-5]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\"}\n::div[-4]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\"}\n::div[-3]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\"}\n::div[-2]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\"}\n::div[-1]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\"}\n:::\n\n::::\n:::::\n\n```python\n>>> message = \"Hello\"\n>>> message[5]  # there is no letter at this index\nIndexError: string index out of range\n>>> message[-1]\n'o'\n>>> message[-5]\n'H'\n>>> message[-6]  # there is no letter at this index\nIndexError: string index out of range\n>>> message[1.0]\nTypeError: string indices must be integers\n```\n\n## Traversing a string\n\nWe can use `for` loop with `range()` function to go over a string letter-by-letter.\n\n:::hgrid\n```python\nmessage = \"Hello\"\n\nfor i in range(len(message)):\n    print(i, message[i])\n```\n\n```output\n0 H\n1 e\n2 l\n3 l\n4 o\n```\n:::\n\n## \n\nAnother example:\n\n```python\nletters = \"bcmrst\"\n\nfor i in range(len(letters)):\n    print(letters[i] + \"ake\")\n```\n\n##\n\nTry \"Remove spaces from a string\" problem on Ed Lessons.\n\n\n## Using slice to get substrings \n\n:::div{.ppt-m-2}\nUsing slice notation we can get parts of a string: `string[start:end:step]`.  \n`start`, `end`, `step` values must be integers and work similar to `range()` function.\n:::\n\n:::::div{style=\"margin: 0.5rem 0;\" .grid}\n::::div{style=\"display:grid;grid-auto-flow: row;grid-auto-rows: min-content;gap:0;width: min-content;justify-self:center;\"}\n\n:::div{style=\"display:grid;grid-auto-flow: column;grid-auto-columns: min-content;gap:0;font-family: Hack;width: min-content; font-size: 0.7em;\"}\n::div[0]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n::div[1]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n::div[2]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n::div[3]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n::div[4]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n::div[5]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n::div[6]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n::div[7]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n::div[8]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n:::\n\n:::div{style=\"display:grid;grid-auto-flow: column;grid-auto-columns: min-content;gap:0;font-family: Hack;border: 1px solid black; width: min-content;\"}\n::div[p]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n::div[i]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n::div[n]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n::div[e]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n::div[a]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n::div[p]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n::div[p]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n::div[l]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n::div[e]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n:::\n\n:::div{style=\"display:grid;grid-auto-flow: column;grid-auto-columns: min-content;gap:0;font-family: Hack;width: min-content; font-size: 0.7em;\"}\n::div[-9]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\"}\n::div[-8]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\"}\n::div[-7]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\"}\n::div[-6]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\"}\n::div[-5]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\"}\n::div[-4]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\"}\n::div[-3]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\"}\n::div[-2]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\"}\n::div[-1]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\"}\n:::\n\n::::\n:::::\n\n```python\n>>> fruit = \"pineapple\"\n\n>>> fruit[4:7]  # letters at indices 4, 5, 6\n'app'\n>>> fruit[2:7:2]  # letters at indices 2, 4, 6\n'nap'\n```\n\n##\n\n\n:::::div{style=\"margin: 0.5rem 0;\" .grid .ppt-only}\n::::div{style=\"display:grid;grid-auto-flow: row;grid-auto-rows: min-content;gap:0;width: min-content;justify-self:center;\"}\n\n:::div{style=\"display:grid;grid-auto-flow: column;grid-auto-columns: min-content;gap:0;font-family: Hack;width: min-content; font-size: 0.7em;\"}\n::div[0]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n::div[1]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n::div[2]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n::div[3]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n::div[4]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n::div[5]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n::div[6]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n::div[7]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n::div[8]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n:::\n\n:::div{style=\"display:grid;grid-auto-flow: column;grid-auto-columns: min-content;gap:0;font-family: Hack;border: 1px solid black; width: min-content;\"}\n::div[p]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n::div[i]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n::div[n]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n::div[e]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n::div[a]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n::div[p]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n::div[p]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n::div[l]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n::div[e]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n:::\n\n:::div{style=\"display:grid;grid-auto-flow: column;grid-auto-columns: min-content;gap:0;font-family: Hack;width: min-content; font-size: 0.7em;\"}\n::div[-9]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\"}\n::div[-8]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\"}\n::div[-7]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\"}\n::div[-6]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\"}\n::div[-5]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\"}\n::div[-4]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\"}\n::div[-3]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\"}\n::div[-2]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\"}\n::div[-1]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\"}\n:::\n\n::::\n:::::\n\n\n```python\n>>> fruit[:4]  # same as fruit[0:4]\n'pine'\n>>> fruit[4:]  # same as fruit[4:len(fruit)]\n'apple'\n\n>>> fruit[-5:]  # from index -5 to the end of string\n'apple'\n>>> fruit[-5:-2]  # letters at indices -5, -4, -3\n'app'\n```\n\n##\n\n:::::div{style=\"margin: 0.5rem 0;\" .grid .ppt-only}\n::::div{style=\"display:grid;grid-auto-flow: row;grid-auto-rows: min-content;gap:0;width: min-content;justify-self:center;\"}\n\n:::div{style=\"display:grid;grid-auto-flow: column;grid-auto-columns: min-content;gap:0;font-family: Hack;width: min-content; font-size: 0.7em;\"}\n::div[0]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n::div[1]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n::div[2]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n::div[3]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n::div[4]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n::div[5]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n::div[6]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n::div[7]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n::div[8]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:end center;\"}\n:::\n\n:::div{style=\"display:grid;grid-auto-flow: column;grid-auto-columns: min-content;gap:0;font-family: Hack;border: 1px solid black; width: min-content;\"}\n::div[p]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n::div[i]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n::div[n]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n::div[e]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n::div[a]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n::div[p]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n::div[p]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n::div[l]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n::div[e]{style=\"border: 1px solid black;width:calc(var(--unit)*2);height:calc(var(--unit)*1.7);display:grid;place-content:center;\"}\n:::\n\n:::div{style=\"display:grid;grid-auto-flow: column;grid-auto-columns: min-content;gap:0;font-family: Hack;width: min-content; font-size: 0.7em;\"}\n::div[-9]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\"}\n::div[-8]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\"}\n::div[-7]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\"}\n::div[-6]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\"}\n::div[-5]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\"}\n::div[-4]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\"}\n::div[-3]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\"}\n::div[-2]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\"}\n::div[-1]{style=\"width:calc(var(--unit)*2);height:calc(var(--unit)*1.2);display:grid;place-content:start center;\"}\n:::\n\n::::\n:::::\n\n```python\n# Negative step size of -1 means go from \n# right to left, i.e. in reverse order\n>>> fruit[-4:-8:-1]  # letters at -4, -5, -6, -7\n'paen'\n\n# Omitting start and end mean select whole string,\n# but step size -1 means right to left i.e. reverse order \n>>> fruit[::-1]\n'elppaenip'\n```\n\n::divider\n","title":"3.2 — if statement, for loop, Indexing & Slicing Strings","date":"2024-01-16","published":true}]},"__N_SSG":true}