{"pageProps":{"allSlugs":[["Lecture-1",[{"title":"1 — Programming Basics","slug":"Lecture-1"}]],["Lecture-2.1",[{"title":"2.1 — Variables, Arithmetic & String operations","slug":"Lecture-2.1"}]],["Lecture-2.2",[{"title":"2.2 — Defining functions, Errors & Debugging","slug":"Lecture-2.2"}]],["Lecture-3.1",[{"title":"3.1 — Order of Expression Evaluation, Comparing Values, Conditional Execution","slug":"Lecture-3.1"}]],["Lecture-3.2",[{"title":"3.2 — if statement, for loop, Indexing & Slicing Strings","slug":"Lecture-3.2"}]],["Lecture-4.1",[{"title":"4.1 — return vs. print, while statement, Modules","slug":"Lecture-4.1"}]],["Lecture-4.2",[{"title":"4.2 — String methods, break & continue statements","slug":"Lecture-4.2"}]]],"post":{"slug":"Lecture-4.2","content":"<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"in-operator-membership-operator\"><inline-code>in</inline-code> operator (membership operator)</h2><ul>\n<li>In Python <inline-code>in</inline-code> is a keyword.</li>\n<li>The <inline-code>in</inline-code> and <inline-code>not in</inline-code> operators test for membership.</li>\n<li>We can use them with strings to test if one string is a substring of another. This operation is case-sensitive.</li>\n</ul><python>s = \"Pineapple\"\n\nprint(\"app\" in s)  # True\nprint(\"pine\" in s)  # False\n\nprint(\"x\" not in s)  # True\nprint(\"P\" not in s)  # False\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"\"></h2><greenbox><p>Try the problem “Remove Duplicates” on Ed Lessons.</p></greenbox></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-1\"></h2><greenbox><p>Try the problem “Benchpress” on Ed Lessons.</p></greenbox></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"string-methods\">String methods</h2><p>A <sc>method</sc> is similar to a function except that a method is <i>always</i> called on an object:</p><div class=\"px1 py025 code br5\" style=\"background-color: white; width: auto; white-space: pre;\"><p>object.method_name(argument1, argument2, …)</p></div></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-2\"></h2><p><inline-code>str</inline-code> type has several methods that we can call on a string object:</p><python>print(\"hello\".upper())  # calling method upper() on the string \"hello\"\n# HELLO\n\nmessage = \"hello\"\nprint(message.upper())  # using variable that refers to string\n# HELLO\n\nmessage = 10\nprint(message.upper())  # upper() only available for str objects\n# AttributeError: 'int' object has no attribute 'upper'\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"useful-string-methods\">Useful string methods</h2><python>s = \"Luke, I am your father\"\n\n# s.lower() : returns a copy of s, but with all lower case letters.\nprint(s.lower())\n# luke, i am your father\n\n# s.upper() : returns a copy of s, but with all upper case letters.\nprint(s.upper())\n# LUKE, I AM YOUR FATHER\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-3\"></h2><python>s = \"Luke, I am your father\"\n# s.replace(old, new) : returns a copy of s with all occurrences of \n# the substring old replaced by new.\nprint(s.replace(\"am\", \"am not\"))\n# Luke, I am not your father\n\nprint(s.replace(\" \", \"\")) # empty string will delete\n# Luke,Iamyourfather\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-4\"></h2><python>s = \"banana\"\n# s.count(c) : returns the number of non-overlapping \n# occurrences of substring c in s.\nprint(s.count(\"na\"))\n# 2\n\n# s.find(c) : returns the index where the substring begins in s begins. \n# If c is not a substring of s, then -1 is returned.\nprint(s.find(\"an\"))\n# 1\n\nprint(s.find(\"naa\"))\n# -1\n</python></slide>\n<slide class=\"ppt-f90 slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-5\"></h2><python>x = 1\ny = 2.5\nz = 3.14\nname = \"Reza\"\n\n# fmt.format(a1, a2, ...):\n# returns a string where the placeholders {} in format string fmt\n# are replaced by args a1, a2, etc.\n\nprint(\"x = {}, y = {}\".format(x, y))\n# x = 1, y = 2.5\n\nprint(\"Point: ({}, {}, {})\".format(x, y, z))\n# Point: (1, 2.5, 3.14)\n\nprint(\"Welcome {}!\".format(name))\n# Welcome Reza!\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"formatted-strings\">Formatted Strings</h2><python>x = 1\ny = 2.5\nz = 3.14\nname = \"Reza\"\n\nprint(f\"x = {x}, y = {y}\")\n# x = 1, y = 2.5\n\nprint(f\"Point: ({x}, {y}, {z})\")\n# Point: (1, 2.5, 3.14)\n\nprint(f\"Welcome {name}!\")\n# Welcome Reza!\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"example\">Example</h2><p>In just one expression, compare if two strings <inline-code>s1</inline-code> and <inline-code>s2</inline-code> are equal in a case-insensitive manner.</p><python>s1 = \"Hello Everyone\"\ns2 = \"hello everyone\"\n\nis_equal = s1.upper() == s2.upper()\n\n# OR\n# is_equal = s1.lower() == s2.lower()\n\nprint(is_equal)  # prints True\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"break-statement\"><inline-code>break</inline-code> statement</h2><p><inline-code>break</inline-code> statement can be used to terminate a loop before it normally ends.<br>\nAfter a <inline-code>break</inline-code> statement is executed, no other code inside the loop is executed.</p><hgrid><python>for i in range(10):\n    if i > 5:\n        break\n    print(i)\n    \nprint(\"Bye!\")\n</python><output>0\n1\n2\n3\n4\n5\nBye!\n</output></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-6\"></h2><greenbox><p>Write a function <inline-code>is_prime</inline-code> that takes an integer as argument and returns <inline-code>True</inline-code> if the number is prime, otherwise returns <inline-code>False</inline-code>.\nTo check if a number <inline-code>n</inline-code> is prime:</p><ul>\n<li>Assume <inline-code>n</inline-code> is prime</li>\n<li>Divide <inline-code>n</inline-code> by each number <inline-code>i</inline-code> from <inline-code>2</inline-code> to <inline-code>n-1</inline-code>\n<ul>\n<li>if <inline-code>n</inline-code> is divisible by any <inline-code>i</inline-code> then <inline-code>n</inline-code> cannot be not prime</li>\n</ul>\n</li>\n</ul><p>In other words, if <inline-code>n</inline-code> is not divisible by all <inline-code>i</inline-code>’s then <inline-code>n</inline-code> is prime.</p></greenbox></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-7\"></h2><solution><python>def is_prime(num):\n    prime = True\n\n    if num &#x3C; 2:\n        prime = False\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                prime = False\n                break\n\n    return prime\n\nprint(is_prime(7))  # True\nprint(is_prime(21))  # False\n</python></solution></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-8\"></h2><python>password = input(\"Enter password: \")\n\nwhile password != \"abcd1234\":\n    print(\"Incorrect password, try again!\")\n    password = input(\"Enter password: \")\n\nprint(\"Login successful!\")\n</python><greenbox><p>Change above program so that it keeps asking email and password until both are correct.<br>\nPassword comparison must be case-sensitive, while email comparison should be case-insensitive.<br>\nFor comparison, just choose any email, password that you like.</p></greenbox></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-9\"></h2><solution><python>email = input(\"Enter email: \")\npassword = input(\"Enter password: \")\n\nwhile email.lower() != \"abcd@gmail.com\" or password != \"1234\":\n    print(\"Incorrect email or password, try again!\")\n    \n    email = input(\"Enter email: \")\n    password = input(\"Enter password: \")\n    \n# If we reach this line it means both email and password were correct\nprint(\"Login successful!\")\n\n</python></solution></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"using-break-in-a-while-loop\">Using <inline-code>break</inline-code> in a <inline-code>while</inline-code> loop</h2><p>We can simplify the login example using a <inline-code>break</inline-code> statement:</p><python>while True:\n    email = input(\"Enter email: \")\n    password = input(\"Enter password: \")\n    if email.lower() == \"abcd@gmail.com\" and password == \"1234\":\n        break\n    print(\"Incorrect email or password, try again!\")\n\nprint(\"Login successful!\")\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"continue-statement\"><inline-code>continue</inline-code> statement</h2><p><inline-code>continue</inline-code> statement is useful to skip some steps in a loop.</p><p>After a <inline-code>continue</inline-code> statement is executed, code that follows the statement is skipped and execution continues from the next step of the loop.</p><python>for i in range(1, 50):\n    if i % 2 == 0 or i % 3 == 0:\n        continue\n    print(i)\n</python><output>1 5 7 11 13 17 19 23 25 29 31 35 37 41 43 47 49\n</output></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"controlling-the-flow-of-execution-with-return-statement\">Controlling the flow of execution with <inline-code>return</inline-code> statement</h2><p>As we have seen, <inline-code>return</inline-code> statement allows us to return a value from a function back to the code that calls the function.</p><p>But at the same time return statement also ends execution of the function.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-10\"></h2><p>When return statement is executed, no further code in the function gets executed.</p><hgrid><python>def display(message):\n    print(\"*** \" + message + \" ***\")\n    return\n    print(\"This will never be displayed\")\n    \n    \ndisplay(\"hello\")\n</python><output>*** hello ***\n</output></hgrid><p><inline-code>return</inline-code> can be very useful when placed inside an <inline-code>if</inline-code> statement if we want to exit from the function under certain conditions.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-11\"></h2><p>Using return statement, we can simplify the prime number example:</p><hgrid><python># We saw this before\ndef is_prime(num):\n    prime = True\n\n    if num &#x3C; 2:\n        prime = False\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                prime = False\n                break\n\n    return prime\n</python><python># Simplified version\ndef is_prime(num):\n    if num &#x3C; 2:\n        return False\n\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n\n    return True\n</python></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-12\"></h2><redbox><p><b>Important</b>: we must make sure that all branches/cases in the function return the correct values.</p><p>In previous example, if we forget the last return statement in the simplified <inline-code>is_prime</inline-code> function, <inline-code>return None</inline-code> will happen implicitly, which would be incorrect.</p></redbox></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"be-careful--incorrect-indentation-changes-logic-1\">Be careful — incorrect indentation changes logic (1)</h2><hgrid class=\"ppt-f90\" margin=\"0 0\"><python>def remove_spaces(s):\n    result = \"\" \n    for i in range(len(s)):\n        letter = s[i]\n        if letter != \" \":\n            result = result + letter\n\n    return result\n</python><python>def remove_spaces(s):\n    result = \"\" \n    for i in range(len(s)):\n        letter = s[i]\n    if letter != \" \":\n        result = result + letter\n\n    return result\n</python></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"be-careful--incorrect-indentation-changes-logic-2\">Be careful — incorrect indentation changes logic (2)</h2><hgrid class=\"ppt-f90\" margin=\"0 0\"><python>def remove_spaces(s):\n    result = \"\" \n    for i in range(len(s)):\n        letter = s[i]\n        if letter != \" \":\n            result = result + letter\n\n    return result\n</python><python>def remove_spaces(s):\n    result = \"\" \n    for i in range(len(s)):\n        letter = s[i]\n        if letter != \" \":\n            result = result + letter\n\n    return result\n</python></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-13\"></h2><greenbox><p>Try the problem “Palindrome” on Ed Lessons.</p></greenbox></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-14\"></h2><greenbox><p>Try the problem “Smallest and largest divisors” on Ed Lessons.</p></greenbox><divider></divider></slide>","title":"4.2 — String methods, break & continue statements","date":"2023-01-18","published":true,"section":"Lecture-4.2"}},"__N_SSG":true}