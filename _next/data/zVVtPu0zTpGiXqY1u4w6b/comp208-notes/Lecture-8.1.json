{"pageProps":{"allSlugs":[["Lecture-1",[{"title":"1 — Programming Basics","slug":"Lecture-1"}]],["Lecture-2.1",[{"title":"2.1 — Variables, Arithmetic & String operations","slug":"Lecture-2.1"}]],["Lecture-2.2",[{"title":"2.2 — Defining functions, Errors & Debugging","slug":"Lecture-2.2"}]],["Lecture-3.1",[{"title":"3.1 — Order of Expression Evaluation, Comparing Values, Conditional Execution","slug":"Lecture-3.1"}]],["Lecture-3.2",[{"title":"3.2 — if statement, for loop, Indexing & Slicing Strings","slug":"Lecture-3.2"}]],["Lecture-4.1",[{"title":"4.1 — return vs. print, while statement, Modules","slug":"Lecture-4.1"}]],["Lecture-4.2",[{"title":"4.2 — String methods, break & continue statements","slug":"Lecture-4.2"}]],["Lecture-5.1",[{"title":"5.1 — Controlling print(), Nested Loops, Lists","slug":"Lecture-5.1"}]],["Lecture-5.2",[{"title":"5.2 — Scope of variables, List operations","slug":"Lecture-5.2"}]],["Lecture-6.1",[{"title":"6.1 — Tuples, Immutable objects, Sets","slug":"Lecture-6.1"}]],["Lecture-6.2",[{"title":"6.2 — More list & set operations, Dictionaries","slug":"Lecture-6.2"}]],["Lecture-7.1",[{"title":"7.1 — Iterables, Unpacking, Nested Lists","slug":"Lecture-7.1"}]],["Lecture-7.2",[{"title":"7.2 — Nested data structures, Comprehensions, Modules","slug":"Lecture-7.2"}]],["Lecture-8.1",[{"title":"8.1 — Nested list comprehensions, Reading & Writing Files","slug":"Lecture-8.1"}]],["Lecture-8.2",[{"title":"8.2 — Shallow vs. deep copy, Handling exceptions","slug":"Lecture-8.2"}]],["Lecture-9.1",[{"title":"9.1 — Object Oriented Programming (OOP)","slug":"Lecture-9.1"}]],["Lecture-9.2",[{"title":"9.2 — Keyword arguments, More on OOP","slug":"Lecture-9.2"}]],["Lecture-10.1",[{"title":"10.1 — NumPy","slug":"Lecture-10.1"}]],["Lecture-10.2",[{"title":"10.2 — Plotting using Matplotlib, More Numpy","slug":"Lecture-10.2"}]],["Lecture-11.1",[{"title":"11.1 — More Numpy, Linear algebra, Random numbers","slug":"Lecture-11.1"}]],["Lecture-11.2",[{"title":"11.2 — Interpolation & Curve fitting","slug":"Lecture-11.2"}]],["Lecture-12.1",[{"title":"12.1 — System of Linear Equations, Numerical Integration","slug":"Lecture-12.1"}]],["Lecture-12.2",[{"title":"12.2 — Root Finding","slug":"Lecture-12.2"}]],["Lecture-13.1",[{"title":"13.1 — Binary Search, Sorting","slug":"Lecture-13.1"}]],["Lecture-13.2",[{"title":"13.2 — Root-finding & Miscellaneous Topics","slug":"Lecture-13.2"}]]],"post":{"slug":"Lecture-8.1","content":"<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"\"></h2><p><b class=\"sans\">How list is stored</b></p><hgrid gap=\"1em\" margin=\"0.5em 0\"><python lineno=\"false\">mylist = [3, 17, 42]\n</python><img style=\"width: 100%\" src=\"lecture-8.1/mylist_actual.png\"></hgrid><hgrid cols=\"1fr 4fr\" margin=\"0.5em 0\"><p><b class=\"sans\">Simplified:</b></p><img style=\"width: 70%\" src=\"lecture-8.1/mylist_simplified.png\"></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-1\"></h2><p><b class=\"sans\">How <i>nested list</i> is stored</b></p><python lineno=\"false\" margin=\"0.5em 0\">nested_list = [[3, 17, 42], [10, 20, 30]]\n</python><img style=\"width: 65%; margin: 1em auto;\" src=\"lecture-8.1/nested_list.png\"></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-2\"></h2><hgrid margin=\"0\"><python lineno=\"false\" margin=\"0.5em 0\">zeros = [0] * 5\nC = [zeros] * 3\nC[1][3] = 100  \nprint(C)    \n</python><python lineno=\"false\" margin=\"0.5em 0\">zeros = [0] * 5\nC = []\nfor i in range(3):\n    C.append(zeros)\nC[1][3] = 100  \nprint(C)    \n</python><output>[[0, 0, 0, 100, 0], \n [0, 0, 0, 100, 0], \n [0, 0, 0, 100, 0]]\n</output></hgrid><img style=\"width: 80%; margin: 0.5em auto;\" src=\"lecture-8.1/nested_zeros.png\"></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-3\"></h2><hgrid margin=\"0\" cols=\"1fr 4fr\"><python lineno=\"false\" margin=\"0.5em 0\">C = []\nfor i in range(3):\n    C.append([0] * 5)\nC[1][3] = 100  \nprint(C)\n</python><img style=\"width: 100%; margin: 0.5em auto;\" src=\"lecture-8.1/nested_zeros_correct.png\"></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"nested-list-comprehensions\">Nested list comprehensions</h2><python>matrix = [[10, 20, 30],\n          [40, 50, 60],\n          [70, 80, 90]]\n\nsquared = [[x ** 2 for x in row] for row in matrix]\n\nprint(squared)\n# [[100, 400, 900],\n#  [1600, 2500, 3600],\n#  [4900, 6400, 8100]]\n\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-4\"></h2><greenbox><p>Time for list comprehension problems on Ed Lessons.</p></greenbox></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"how-to-work-with-a-file-in-python\">How to work with a file in Python</h2><p>A file is a sequence of characters or bytes stored on a storage device such as a hard drive.</p><ul>\n<li>Open the file using the built-in function <inline-code>open()</inline-code></li>\n<li>Read data from the file or write data into the file</li>\n<li>Close the file</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"opening-a-file-with-open\">Opening a file with <code>open()</code></h2><p>Built-in function <inline-code>open(filename, mode)</inline-code>:</p><ul>\n<li><inline-code>filename</inline-code> (str): name of the file to read (if the file is in the current directory) or full path to the file.</li>\n<li><inline-code>mode</inline-code> (str): <inline-code>'r'</inline-code> for reading, <inline-code>'w'</inline-code> for writing, <inline-code>'a'</inline-code> for appending. If this argument is omitted, it defaults to <inline-code>'r'</inline-code></li>\n<li>Returns: a <sc>file object</sc> which allows reading from/writing to the file.</li>\n</ul><python>filename = \"quotes.txt\"\nfobj = open(filename, \"r\") # mode \"r\" for reading\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"reading-a-file-with-read-method-of-file-object\">Reading a file with <code>read()</code> method of file object</h2><p>File objects have a method <inline-code>read(size)</inline-code> that takes one optional argument:</p><ul>\n<li><inline-code>size</inline-code>: the number of characters to read from the file\n<ul>\n<li>If omitted, the entire file will be read.</li>\n</ul>\n</li>\n<li>Returns: a string containing the characters in the file</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"closing-a-file-with-close-method-of-file-object\">Closing a file with <code>close()</code> method of file object</h2><ul>\n<li><inline-code>close()</inline-code> method takes no argument and returns nothing. It closes the file associated with the file object</li>\n</ul></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-5\"></h2><p>For the following example, download the files from Ed Lessons and keep them in the same directory as the python program.</p><python>filename = \"quotes.txt\"\nfobj = open(filename, \"r\") # mode \"r\" for reading \n\nfile_content = fobj.read() # read whole file as a string\nprint(file_content) # print the string \n\nfobj.close()  # close the file\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"why-close-a-file\">Why close a file?</h2><p>Closing the file is important for many reasons</p><ul>\n<li>Operating System (e.g Windows, Mac OS) may lock the file until it is closed (Other programs may not use the file as long as it is open)</li>\n<li>Too many open files may cause your program/computer to slow down</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"reading-a-file-line-by-line\">Reading a file line by line</h2><ul>\n<li>The file object returned by <inline-code>open()</inline-code> is an iterable that can produce a sequence of lines in the file. So we can use it in a <inline-code>for</inline-code> loop.</li>\n<li>Each line will have a trailing newline (<inline-code>\"\\n\"</inline-code>) character.</li>\n</ul><python>filename = \"quotes.txt\"\nfobj = open(filename, \"r\")\n\nfor line in fobj: # file object is iterable\n    line = line.rstrip(\"\\n\")  # Remove trailing \"\\n\" character\n    print(line) \n\nfobj.close()\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"reading-a-file-as-list-of-lines\">Reading a file as list of lines</h2><python>filename = \"quotes.txt\"\nfobj = open(filename, \"r\")\n\n# Read whole file, split into lines and return a list of lines\nall_lines = fobj.readlines() \n\n# Each line will have a trailing newline character \"\\n\"\n\nprint(all_lines)\n\nfobj.close()\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"writing-text-to-a-file-in-python\">Writing text to a file in Python</h2><p>To write to a file in Python:</p><ul>\n<li>Open the file with open() using mode <inline-code>'w'</inline-code> for “write.”\n<ul>\n<li>If the file does not exist, it will be created.</li>\n<li><span class=\"bgred px05\">If the file exists, it will be deleted and replaced with an empty file.</span></li>\n</ul>\n</li>\n<li>Call <inline-code>write(s)</inline-code> method on the file object to write the string <inline-code>s</inline-code> into the file.</li>\n<li>Close the file.</li>\n</ul></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-6\"></h2><python>filename = \"grades.txt\"\nfobj = open(filename, \"w\") # mode \"w\" for writing \n\nfobj.write(\"Name,A1,A2,A3\\n\") # write line to file\nfobj.write(\"Reza,90,80,100\\n\") # write another line\nfobj.write(\"Dev,100,90,100\\n\") # write another line\n\nfobj.close()\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"appending-text-to-a-file-in-python\">Appending text to a file in Python</h2><p>Appending means adding text to the end of a file without changing/deleting text already present in the file.</p><ul>\n<li>Open the file with open() using mode <inline-code>'a'</inline-code> for “append.”\n<ul>\n<li>If the file does not exist, it will be created.</li>\n<li>If the file exists, it is NOT deleted.</li>\n</ul>\n</li>\n<li>Call <inline-code>write(s)</inline-code> method on the file object, to write the string <inline-code>s</inline-code> at the end of the file.</li>\n<li>Close the file.</li>\n</ul></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-7\"></h2><python>filename = \"grades.txt\"\nfobj = open(filename, \"a\") # mode \"a\" for appending \n\nfobj.write(\"Khalid,85,90,97\\n\")\nfobj.write(\"Alice,95,90,97\\n\") \n\nfobj.close()\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-8\"></h2><greenbox><p>Time for some problems on Ed Lessons.</p></greenbox><divider></divider></slide>","title":"8.1 — Nested list comprehensions, Reading & Writing Files","date":"2023-02-12","published":true,"section":"Lecture-8.1"}},"__N_SSG":true}