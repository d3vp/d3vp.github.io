{"pageProps":{"allSlugs":[["Lecture-1",[{"title":"1 — Programming Basics","slug":"Lecture-1"}]],["Lecture-2.1",[{"title":"2.1 — Variables, Arithmetic & String operations","slug":"Lecture-2.1"}]],["Lecture-2.2",[{"title":"2.2 — Defining functions, Errors & Debugging","slug":"Lecture-2.2"}]],["Lecture-3.1",[{"title":"3.1 — Order of Expression Evaluation, Comparing Values, Conditional Execution","slug":"Lecture-3.1"}]],["Lecture-3.2",[{"title":"3.2 — if statement, for loop, Indexing & Slicing Strings","slug":"Lecture-3.2"}]],["Lecture-4.1",[{"title":"4.1 — return vs. print, while statement, Modules","slug":"Lecture-4.1"}]],["Lecture-4.2",[{"title":"4.2 — String methods, break & continue statements","slug":"Lecture-4.2"}]],["Lecture-5.1",[{"title":"5.1 — Controlling print(), Nested Loops, Lists","slug":"Lecture-5.1"}]],["Lecture-5.2",[{"title":"5.2 — Scope of variables, List operations","slug":"Lecture-5.2"}]],["Lecture-6.1",[{"title":"6.1 — Tuples, Immutable objects, Sets","slug":"Lecture-6.1"}]],["Lecture-6.2",[{"title":"6.2 — More list & set operations, Dictionaries","slug":"Lecture-6.2"}]],["Lecture-7.1",[{"title":"7.1 — Iterables, Unpacking, Nested Lists","slug":"Lecture-7.1"}]],["Lecture-7.2",[{"title":"7.2 — Nested data structures, Comprehensions, Modules","slug":"Lecture-7.2"}]],["Lecture-8.1",[{"title":"8.1 — Nested list comprehensions, Reading & Writing Files","slug":"Lecture-8.1"}]],["Lecture-8.2",[{"title":"8.2 — Shallow vs. deep copy, Handling exceptions","slug":"Lecture-8.2"}]],["Lecture-9.1",[{"title":"9.1 — Object Oriented Programming (OOP)","slug":"Lecture-9.1"}]],["Lecture-9.2",[{"title":"9.2 — Keyword arguments, More on OOP","slug":"Lecture-9.2"}]],["Lecture-10.1",[{"title":"10.1 — NumPy","slug":"Lecture-10.1"}]],["Lecture-10.2",[{"title":"10.2 — Plotting using Matplotlib, More Numpy","slug":"Lecture-10.2"}]],["Lecture-11.1",[{"title":"11.1 — More Numpy, Linear algebra, Random numbers","slug":"Lecture-11.1"}]],["Lecture-11.2",[{"title":"11.2 — Interpolation & Curve fitting","slug":"Lecture-11.2"}]],["Lecture-12.1",[{"title":"12.1 — System of Linear Equations, Numerical Integration","slug":"Lecture-12.1"}]],["Lecture-12.2",[{"title":"12.2 — Root Finding","slug":"Lecture-12.2"}]],["Lecture-13.1",[{"title":"13.1 — Binary Search, Sorting","slug":"Lecture-13.1"}]],["Lecture-13.2",[{"title":"13.2 — Root-finding & Miscellaneous Topics","slug":"Lecture-13.2"}]]],"post":{"slug":"Lecture-13.2","content":"<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"\"></h2><p><span class=\"sans\" style=\"font-size: 1.3em;\">Remaining root-finding topics from 12.2</span></p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"zip-function\"><inline-code>zip</inline-code> function</h2><p><inline-code>zip(x, y)</inline-code> function creates an iterable of tuples <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_i, y_i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span> where <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> is element from <inline-code>x</inline-code> and <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">y_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> is element from <inline-code>y</inline-code>.</p><python>x_values = [0.5, -2, 5, 10]\ny_values = [-1.5, 3, -3.5, 20]\n\npoints = list(zip(x_values, y_values))\nprint(points)\n# [(0.5, -1.5), (-2, 3), (5, -3.5), (10, 20)]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-1\"></h2><div class=\"flex\"><python>x = [1, 2.5, 5]\ny = [2, 4, 10.5]\n\ntotal = 0\nfor i in range(len(x)):\n    total += x[i] * y[i]\n    \nprint(total)\n</python><python>x = [1, 2.5, 5]\ny = [2, 4, 10.5]\n\ntotal = 0\nfor x, y in zip(x, y):\n    total += x * y\n    \nprint(total)\n</python></div><p>What happens when one of the list arguments of <inline-code>zip</inline-code> is shorter?</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"checking-type-of-an-object\">Checking type of an object</h2><python># isinstance(obj, class):\n#       Return whether an object is an instance of a class\n\nx = 123\nprint(isinstance(x, int))  # True\nprint(isinstance(x, float))  # False\n\nx = \"apple\"\nprint(isinstance(x, str))  # True\n\nx = [1, 5, 9]\nprint(isinstance(x, list))  # True\nprint(isinstance(x, tuple))  # False\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-2\"></h2><python># isinstance(obj, tuple_of_classes):\n#    A tuple of classes, e.g. isinstance(x, (A, B, ...)), may be given.\n#    Equivalent to isinstance(x, A) or isinstance(x, B) or ...\n\nx = 3.14\nprint(isinstance(x, (int, float)))  # True\n\nx = [1, 5, 9]\nprint(isinstance(x, (list, tuple)))  # True\n\nx = (11, 51, 4)\nprint(isinstance(x, (list, tuple)))  # True\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-3\"></h2><python>def dot_product(x, y):\n    if (not isinstance(x, list) or not isinstance(y, list)\n        or len(x) != len(y)):\n        raise ValueError(\"x and y must be lists of equal length.\")\n    \n    dot = 0\n    for i in range(len(x)):\n        dot += x[i] * y[i]\n\n    return dot\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"truth-value-testing\">Truth Value Testing</h2><p>Any object can be tested for truth value, e.g. when used in an if or while condition.</p><python>x = [1, 2, 3]\n\nif x:\n    print(\"do something\")\nelse:\n    print(\"do other thing\")\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-4\"></h2><p>By default, an object is considered true</p><ul>\n<li>unless its class defines either a special  <inline-code>__bool__()</inline-code> method that returns False or a <inline-code>__len__()</inline-code> method that returns zero, when called with the object.</li>\n</ul><p>Here are most of the built-in objects considered false:</p><ul>\n<li>Constants defined to be false: <inline-code>None</inline-code> and <inline-code>False</inline-code></li>\n<li>Zeros: <inline-code>0</inline-code>, <inline-code>0.0</inline-code></li>\n<li>empty sequences and collections: <inline-code>\"\"</inline-code>, <inline-code>tuple()</inline-code>, <inline-code>[]</inline-code>, <inline-code>{}</inline-code>, <inline-code>set()</inline-code>, <inline-code>range(0)</inline-code></li>\n</ul></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-5\"></h2><p>Incorrect:</p><python>ans = input('Are you sure? ')\n\nif ans == 'y' or 'yes':\n    print('Installing...')\n</python><p>Correct:</p><python>ans = input('Are you sure? ')\n\nif ans == 'y' or ans == 'yes':\n    print('Installing...')\n</python><divider></divider></slide>","title":"13.2 — Root-finding & Miscellaneous Topics","date":"2023-03-25","published":true,"section":"Lecture-13.2"}},"__N_SSG":true}