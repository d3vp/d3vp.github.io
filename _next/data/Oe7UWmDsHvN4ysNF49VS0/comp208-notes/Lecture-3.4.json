{"pageProps":{"titles":["2.1 — Programming Basics","2.2 — Variables, Arithmetic & String operations","2.3 — Function Calls, Expressions","3.1 — Defining functions, Errors & Debugging","3.2 — Boolean Expressions, Comparison & Logical Operators","3.3 — Conditional execution using if statement","3.4 — for loop & String indexing, slicing"],"slugs":["Lecture-2.1","Lecture-2.2","Lecture-2.3.1","Lecture-3.1","Lecture-3.2","Lecture-3.3","Lecture-3.4"],"post":{"title":"3.4 — for loop & String indexing, slicing","slug":"Lecture-3.4","content":"<h1>Iteration using <inline-code>for</inline-code> loop</h1>\n<p><inline-code>for</inline-code> loop can be used to repeatedly execute a block of code.</p>\n<python>for i in range(5):\n    print(\"Hello\")\n</python>\n<output>Hello\nHello\nHello\nHello\nHello\n</output>\n<python>for i in range(5):\n    print(i)\n</python>\n<output>0\n1\n2\n3\n4\n</output>\n<p>What happened in the code above?</p>\n<ul>\n<li>range() function can produce a sequence of integers <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">0, 1, 2, 3, 4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">4</span></span></span></span></span>.</li>\n<li><inline-code>for</inline-code> loop allows us to iterate i.e. “go over” that sequence, a number at a time\n<ul>\n<li>In each step of the loop, variable <inline-code>i</inline-code> gets a value from the sequence</li>\n</ul>\n</li>\n<li>We can have any valid variable name, other than <inline-code>i</inline-code> if we want.</li>\n</ul>\n<h2>Using range() function</h2>\n<p><inline-code>range()</inline-code> function takes up to 3 arguments:</p>\n<ul>\n<li><inline-code>range(end)</inline-code> — produces sequence <inline-code>0, 1, 2, ..., end-1</inline-code></li>\n<li><inline-code>range(start, end)</inline-code> — produces sequence <inline-code>start, start+1, ..., N</inline-code> where <inline-code>N &#x3C; end</inline-code></li>\n<li><inline-code>range(start, end, step)</inline-code>\n— if <inline-code>step > 0</inline-code>, produces sequence <inline-code>start, start+step, ..., N</inline-code> where <inline-code>N &#x3C; end</inline-code>\n— if <inline-code>step &#x3C; 0</inline-code>, produces sequence <inline-code>start, start+step, ..., N</inline-code> where <inline-code>N > end</inline-code></li>\n</ul>\n<python># 0, 1, 2, ..., 9\nfor i in range(10):\n    print(i)\n\n# 1, 2, ..., 10\nfor i in range(1, 11):\n    print(i)\n    \n# 0, 2, 4, ..., 18    \nfor i in range(0, 20, 2):\n    print(i)\n\n# 10, 15, 20, 25, ..., 95\nfor i in range(10, 100, 5):\n    print(i)\n\n# 10, 9, 8, ..., 1\nfor i in range(10, 0, -1):\n    print(i)\n</python>\n<h3>Examples</h3>\n<ol>\n<li>Compute sum of first N numbers.</li>\n</ol>\n<python>N = 50\n\ntotal = 0\nfor num in range(1, N+1):\n    total = total + num\n    \nprint(total)\n</python>\n<ol start=\"2\">\n<li>Compute sum of all multiples of either 3 or 5, between 100 and 200 (both inclusive).</li>\n</ol>\n<python>total = 0\nfor n in range(100, 201):\n    if n % 3 == 0 or n % 5 == 0:\n        total = total + n\n    \nprint(total)\n</python>\n<h1>Indexing &#x26; Slicing Strings</h1>\n<p>Recall that a string is a sequence of characters.</p>\n<p>Each character, therefore, has a position or an <sc>index</sc>.</p>\n<p>Index starts with zero. For example, for the string <inline-code>\"Hello\"</inline-code>:</p>\n<p></p>\n<p></p><table class=\"code\"><tbody><tr class=\"code\"><td>H</td><td>e</td><td>l</td><td>l</td><td>o</td></tr><tr class=\"sans f-2\"><td class=\"bt1\">0</td><td class=\"bt1\">1</td><td class=\"bt1\">2</td><td class=\"bt1\">3</td><td class=\"bt1\">4</td></tr></tbody></table>\n<p>Indices must be integers and cannot be float.</p>\n<p>Python also allows negative indices, which go from right to left:</p>\n<p></p>\n<p></p><table class=\"code\"><tbody><tr class=\"code\"><td>H</td><td>e</td><td>l</td><td>l</td><td>o</td></tr><tr class=\"sans f-2\"><td class=\"bt1\">-5</td><td class=\"bt1\">-4</td><td class=\"bt1\">-3</td><td class=\"bt1\">-2</td><td class=\"bt1\">-1</td></tr></tbody></table>\n<p>For any string <inline-code>s</inline-code>,</p>\n<ul>\n<li>valid positive index values are from <inline-code>0</inline-code> to <inline-code>len(s)-1</inline-code>.</li>\n<li>valid negative index values are from <inline-code>-len(s)</inline-code> to <inline-code>-1</inline-code>.</li>\n</ul>\n<p>Square brackets <inline-code>[]</inline-code> are used to get letter in a string at given index.</p>\n<python>>>> message = \"Hello\"\n>>> message[0]  # first letter\n'H'\n>>> message[1]  # second letter\n'e'\n>>> message[4]  # fifth letter, the last one in the string\n'o'\n>>> message[5]  # there is no letter at this index\nIndexError: string index out of range\n>>> message[-1]\n'o'\n>>> message[-5]\n'H'\n>>> message[-6]  # there is no letter at this index\nIndexError: string index out of range\n>>> message[1.0]\nTypeError: string indices must be integers\n</python>\n<h2>Traversing a string</h2>\n<p>We can use <inline-code>for</inline-code> loop with <inline-code>range()</inline-code> function to go over a string letter-by-letter.</p>\n<python>message = \"Hello\"\n\nfor i in range(len(message)):\n    print(i, message[i])\n</python>\n<output>0 H\n1 e\n2 l\n3 l\n4 o\n</output>\n<p>A more interesting example:</p>\n<python>letters = \"bcmrst\"\n\nfor i in range(len(letters)):\n    print(letters[i] + \"ake\")\n</python>\n<h2>Using slice to get substrings</h2>\n<p>Using slice notation we can get parts of a string.<br>\n<inline-code>string[start:end:step]</inline-code></p>\n<p>Indices must be integers and begin at zero.\n<inline-code>start</inline-code>, <inline-code>end</inline-code>, <inline-code>step</inline-code> values work similar to <inline-code>range()</inline-code> function.</p>\n<python>>>> fruit = \"pineapple\"\n>>> fruit[4:7]  # letters at indices 4, 5, 6 (7 is not included)\n'app'\n>>> fruit[:4]  # start index is 0 if omitted, same as fruit[0:4]\n'pine'\n>>> fruit[4:]  # end index is len(fruit) if omitted, same as fruit[4:len(fruit)]\n'apple'\n>>> fruit[2:7:2]  # select letters at indices 2, 4, 6\n'nap'\n\n>>> fruit[-5:]  # start and index -5 and go to the end of string\n'apple'\n>>> fruit[-5:-2]  # select letters at -5, -4, -3  (-2 is not included)\n'app'\n\n# Here the third number -1 is the step size\n# Negative step size mean go from right to left, i.e. in reverse order\n>>> fruit[-1:-6:-1]  # Select letter at -1, -2, -3, -4, -5  (-6 is not included)\n'elppa'\n\n# Omitting start and end mean select whole string\n# But step size -1 means go from right to left i.e. in reverse order \n>>> fruit[::-1]\n'elppaenip'\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}