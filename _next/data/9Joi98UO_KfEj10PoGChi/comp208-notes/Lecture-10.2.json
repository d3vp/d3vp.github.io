{"pageProps":{"allSlugs":[["Lecture-1",[{"title":"1 — Programming Basics","slug":"Lecture-1"}]],["Lecture-2.1",[{"title":"2.1 — Variables, Arithmetic & String operations","slug":"Lecture-2.1"}]],["Lecture-2.2",[{"title":"2.2 — Defining functions, Errors & Debugging","slug":"Lecture-2.2"}]],["Lecture-3.1",[{"title":"3.1 — Order of Expression Evaluation, Comparing Values, Conditional Execution","slug":"Lecture-3.1"}]],["Lecture-3.2",[{"title":"3.2 — if statement, for loop, Indexing & Slicing Strings","slug":"Lecture-3.2"}]],["Lecture-4.1",[{"title":"4.1 — return vs. print, while statement, Modules","slug":"Lecture-4.1"}]],["Lecture-4.2",[{"title":"4.2 — String methods, break & continue statements","slug":"Lecture-4.2"}]],["Lecture-5.1",[{"title":"5.1 — Controlling print(), Nested Loops, Lists","slug":"Lecture-5.1"}]],["Lecture-5.2",[{"title":"5.2 — Scope of variables, List operations","slug":"Lecture-5.2"}]],["Lecture-6.1",[{"title":"6.1 — Tuples, Immutable objects, Sets","slug":"Lecture-6.1"}]],["Lecture-6.2",[{"title":"6.2 — More list & set operations, Dictionaries","slug":"Lecture-6.2"}]],["Lecture-7.1",[{"title":"7.1 — Iterables, Unpacking, Nested Lists","slug":"Lecture-7.1"}]],["Lecture-7.2",[{"title":"7.2 — Nested data structures, Comprehensions, Modules","slug":"Lecture-7.2"}]],["Lecture-8.1",[{"title":"8.1 — Nested list comprehensions, Reading & Writing Files","slug":"Lecture-8.1"}]],["Lecture-8.2",[{"title":"8.2 — Shallow vs. deep copy, Handling exceptions","slug":"Lecture-8.2"}]],["Lecture-9.1",[{"title":"9.1 — Object Oriented Programming (OOP)","slug":"Lecture-9.1"}]],["Lecture-9.2",[{"title":"9.2 — Keyword arguments, More on OOP","slug":"Lecture-9.2"}]],["Lecture-10.1",[{"title":"10.1 — NumPy","slug":"Lecture-10.1"}]],["Lecture-10.2",[{"title":"10.2 — Plotting using Matplotlib, More Numpy","slug":"Lecture-10.2"}]]],"post":{"slug":"Lecture-10.2","content":"<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"matplotlib\">Matplotlib</h2><ul>\n<li>Matplotlib is an extensive Python library commonly used to generate different types of plots.</li>\n<li>To install Matplotlib: if you use Thonny, go to Tools -> Manage packages. Type <inline-code>matplotlib</inline-code> on the\nsearch bar and click “Search on PyPI”. Then click Install.</li>\n<li>If you do not have Thonny, you can do so by typing the following commands in the terminal:\n<pre><code>python -m pip install -U pip  \npython -m pip install -U matplotlib  \n</code></pre>\n</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"matplotlibpyplot\">matplotlib.pyplot</h2><ul>\n<li><inline-code>matplotlib.pyplot</inline-code> is a module in the package Matplotlib.</li>\n<li>This is the module we’ll be using to create plots.</li>\n<li>To use it, we first need to import it\n<pre><code>import matplotlib.pyplot as plt\n</code></pre>\n</li>\n<li>For more details: <a href=\"https://matplotlib.org/devdocs/api/pyplot_summary.html\">https://matplotlib.org/devdocs/api/pyplot_summary.html</a></li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"example--a-line-plot\">Example – A Line plot</h2><p>We can use the function plot to create a line plot between the points in the input sequence.</p><hgrid><python>import matplotlib.pyplot as plt\n\nsome_numbers = [3, 1, 5, 2, 9, 3] \nplt.plot(some_numbers)\nplt.show() # display figure\n</python><img src=\"week10/line1.png\" style=\"width: 100%;\"></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"\"></h2><p>In the previous example:</p><ul>\n<li>We provided only one input to the function <inline-code>plot</inline-code>.</li>\n<li>If we do that, then the input values are going to be considered as the y-coordinates. Their corresponding x-coordinates are the indices of the list.</li>\n<li>In the example, we plot the following points: <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>3</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>5</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>4</mn><mo separator=\"true\">,</mo><mn>9</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>5</mn><mo separator=\"true\">,</mo><mn>3</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(0, 3), (1, 1), (2, 5), (3, 2), (4, 9), (5, 3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">5</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">9</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">5</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">)</span></span></span></span></span></li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"example---two-inputs\">Example - two inputs</h2><div class=\"flex\"><python>import matplotlib.pyplot as plt\n\nx_coord = range(0, 10, 2)\ny_coord = [0, 0, 9, 8, 2]\nplt.plot(x_coord, y_coord)\nplt.show()\n</python><img src=\"week10/line2.png\" style=\"width: 50%; margin-left: 2em;\"></div></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"example---a-linear-function\">Example - a linear function</h2><p>Using pyplot, we can plot the graph of the linear function <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>=</mo><mi>x</mi><mo>+</mo><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">y = x + 5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">5</span></span></span></span></span>.</p><div class=\"flex\"><python>import matplotlib.pyplot as plt\n\nx_coord = range(15)\ny_coord = [x + 5 for x in x_coord]\n\nplt.plot(x_coord, y_coord)\nplt.show()\n</python><img src=\"week10/linear.png\" style=\"width: 50%; margin-left: 2em;\"></div></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"plot-title-and-axis-labels\">Plot title and axis labels</h2><p><inline-code>plt.title(label)</inline-code>: takes as argument a string and adds the title label to the figure.</p><p><inline-code>plt.xlabel(label)</inline-code>: takes as argument a string and sets the label for the x-axis.</p><p><inline-code>plt.ylabel(label)</inline-code>: takes as argument a string and sets the label for the y-axis.</p><p>We can choose the font size of the labels using the keyword argument: <inline-code>plt.title(\"First plot\", fontsize=22)</inline-code></p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-1\"></h2><div class=\"flex\"><python>import matplotlib.pyplot as plt\n\nx_coord = range(15)\ny_coord = [x + 5 for x in x_coord]\n    \nplt.plot(x_coord, y_coord)\n\nplt.title(\"First plot\", fontsize=20)\nplt.xlabel(\"x\", fontsize=14)\nplt.ylabel(\"y = x + 5\", fontsize=14)\n\nplt.show()\n</python><img src=\"week10/linear2.png\" style=\"width: 50%; margin-left: 1em;\"></div></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"colors-markers-and-line-styles\">Colors, markers and line styles</h2><ul>\n<li>We can chose the style/color of the plots, the style/size of the markers, etc. Here is just a taste:</li>\n</ul><hgrid cols=\"1fr 1fr 1fr\" margin=\"0.5em -2em\" gap=\"0.5em\"><img src=\"week10/colors.png\" style=\"width: 100%;\"><img src=\"week10/linestyles.png\" style=\"width: 100%; \"><img src=\"week10/markers.png\" style=\"width: 100%;\"></hgrid><p><span class=\"ppt-f80\">More info: <a href=\"https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html\">https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html</a></span></p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"using-color-marker-and-line-style\">Using color, marker and line style</h2><ul>\n<li>The function plot can take as arguments one or two lists (for x and y coordinates) and a format string.</li>\n<li>The format string consists of three parts: <inline-code>[marker][line][color]</inline-code>. Each part is optional.</li>\n</ul><div class=\"flex\"><python>import matplotlib.pyplot as plt\n\nsome_numbers = [3, 1, 5, 2, 9, 3]\n\n# circle marker, dashed line, green\nplt.plot(some_numbers, \"o--g\") \nplt.show() # display figure\n</python><img src=\"week10/colorplot.png\" style=\"width: 40%; margin-left: 2em;\"></div></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-2\"></h2><p><b class=\"sans\">Multiple plots in same figure</b></p><div class=\"flex\"><python>import matplotlib.pyplot as plt\nfrom math import sin, cos, radians\n\nx_coord = range(0, 540, 20)\ny_sin = [sin(radians(x)) for x in x_coord]\ny_cos = [cos(radians(x)) for x in x_coord]\n    \n# + marker, blue color and use label for legend\nplt.plot(x_coord, y_sin, '+b', label=\"sin(x)\")\n\n# magenta color and use label for legend\nplt.plot(x_coord, y_cos, 'm', label=\"cos(x)\")\nplt.legend()  # show legend\nplt.show()\n</python></div></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-3\"></h2><img src=\"week10/twoplots.png\" style=\"width: 110%;\"></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"saving-a-figure\">Saving a figure</h2><ul>\n<li><inline-code>plt.savefig(filename)</inline-code>: Save the figure in a file (.jpg, .png, etc.)</li>\n</ul><python>import matplotlib.pyplot as plt\nfrom math import sin, radians\n\nx_coord = range(0, 540, 20)\ny_sin = [sin(radians(x)) for x in x_coord]\n\nplt.plot(x_coord, y_sin, 'm')\n\n# the figure won't be displayed, # but saved in y_sin.png \nplt.savefig(\"myplot.png\")\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"bar-plots\">Bar Plots</h2><p>When working with data that can be broken down into categories, it might be useful for us to use a bar plot instead.</p><python>import matplotlib.pyplot as plt\n\nmtl_pop = [1293992, 1080545, 1015420, 1016376, 1620693, 1704694]\nyears = ['1966', '1976', '1986', '1996', '2006', '2016']\n\nplt.bar(years, mtl_pop)\n\nplt.title(\"Population of Montreal\")\nplt.show()\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-4\"></h2><img src=\"week10/barplot.png\" style=\"width: 110%;\"></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"numpy-and-matplotlib\">NumPy and Matplotlib</h2><p>Matplotlib functions work with NumPy arrays as well.</p><python>import numpy as np\nimport matplotlib.pyplot as plt\n\nx_values = np.linspace(0, 8, 501)\ny_values = np.sin(x_values ** 2)  # computes sin(x^2)\nplt.plot(x_values, y_values)\nplt.show()\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-5\"></h2><p><b class=\"sans\">NumPy continued</b></p><p><inline-code>np.array</inline-code> infers <inline-code>dtype</inline-code> based on types of numbers in the argument.</p><python>import numpy as np\n\nx = np.array([10, 20, 30])\nprint(x) #[10 20 30]\nprint(x.dtype) # int64\n\nx = np.array([1.2, 3.14, 10.15])\nprint(x) #[ 1.2   3.14 10.15]\nprint(x.dtype) # float64\n\nx = np.array([10.0, 20, 30])\nprint(x) #[10. 20. 30.]\nprint(x.dtype) # float64\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-6\"></h2><python>import numpy as np\n\n# we can explicity specify what dtype we want:\nx = np.array([10, 20, 30], dtype=float)\nprint(x) #[10. 20. 30.]\nprint(x.dtype) # float64\n\n# float is truncated to int (not rounded)\nx = np.array([1.2, 3.14, 10.65], dtype=int)\nprint(x) #[ 1  3 10]\nprint(x.dtype) # int64\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"different-shapes-for-different-purposes\">Different shapes for different purposes</h2><hgrid margin=\"0\" gap=\"1em\"><pre><code>[1.0 5.0 3.5 4.0 5.0 1.2]\n</code></pre><p>One point in 6D euclidean space</p></hgrid><hgrid margin=\"0\" gap=\"1em\"><pre><code>[[1.0 5.0 3.5]\n [4.0 5.0 1.2]]\n</code></pre><p>Two points in 3D euclidean space</p></hgrid><hgrid margin=\"0\" gap=\"1em\"><pre><code>[[1.0 5.0]\n [3.5 4.0]\n [5.0 1.2]]\n</code></pre><p>Three points in 2D euclidean space</p></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-7\"></h2><hgrid><python>import numpy as np\n\nx = np.arange(1, 13) # 1D array\nprint(x)\n\n# 2D array, a 3x4 matrix\nmatrix1 = x.reshape((3, 4))\nprint(matrix1)\n\n# 2D array, a 2x6 matrix\nmatrix2 = matrix1.reshape((2, 6))\nprint(matrix2)\n\n # 1D array\ny = matrix2.reshape((12,))\nprint(y)\n</python><output>[ 1  2  3  4  5  6  7  \n  8  9 10 11 12]\n\n[[ 1  2  3  4]\n [ 5  6  7  8]\n [ 9 10 11 12]]\n\n[[ 1  2  3  4  5  6]\n [ 7  8  9 10 11 12]]\n\n[ 1  2  3  4  5  6  7  \n  8  9 10 11 12]\n</output></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"special-values--numpynan-numpyinf\">Special values — <inline-code>numpy.nan</inline-code>, <inline-code>numpy.inf</inline-code></h2><p>Numpy has special values to represent invalid or extreme values that result from numerical computation</p><ul>\n<li><inline-code>numpy.nan</inline-code> (not a number)</li>\n<li><inline-code>numpy.inf</inline-code>  (infinity)</li>\n</ul><python>import numpy as np\n\narr = np.array([-1, 0, 1, 2, 3, 4])\n\nprint(np.log(arr))\n#[  nan   -inf  0.  0.69314718 1.09861229 1.38629436]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-8\"></h2><python># Any operation on np.nan results in np.nan\nprint(np.nan * 10, 0 / np.nan)\n# nan nan\n\n# Some operations are allowed on np.inf\n\nprint(np.inf, -np.inf)\n# inf -inf\n\nprint(0 / np.inf, 1 / np.inf)\n# 0.0 0.0\n\nprint(np.inf * np.inf, 100 + np.inf)\n# inf inf\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"slicing-2d-array\">Slicing 2D array</h2><img src=\"week10/course_array.png\" style=\"width: 90%; margin: 0 auto\"></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-9\"></h2><python>import numpy as np\n\ngrades = np.array([[94, 84, 97, 79],\n                   [81, 88, 93, 85],\n                   [87, 95, 86, 77]])\n\nprint('Grades for student 1, course 2:')\nprint(grades[1, 2])  # 93\n\n\nprint('All grades for student 2:')\nprint(grades[2, :])  # [87 95 86 77]\n\nprint('All grades for course 0:')\nprint(grades[:, 0])  # [94 81 87]\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"assigning-values-using-indices-and-slices\">Assigning values using indices and slices</h2><python>import numpy as np\n\ngrades = np.array([[94, 84, 97, 79],\n                   [81, 88, 93, 85],\n                   [87, 95, 86, 77]])\n\n# Setting same value to all indices in the slice\ngrades[0:2, 1:3] = 100\nprint(grades)\n# [[ 94 100 100  79]\n#  [ 81 100 100  85]\n#  [ 87  95  86  77]]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-10\"></h2><python>import numpy as np\n\ngrades = np.array([[94, 84, 97, 79],\n                   [81, 88, 93, 85],\n                   [87, 95, 86, 77]])\n\n# Setting values from array of same shape\ngrades[0:2, 1:3] = np.array([[10, 20], [30, 40]])\nprint(grades)\n# [[94 10 20 79]\n#  [81 30 40 85]\n#  [87 95 86 77]]\n</python><divider></divider></slide>","title":"10.2 — Plotting using Matplotlib, More Numpy","date":"2023-03-11","published":true,"section":"Lecture-10.2"}},"__N_SSG":true}