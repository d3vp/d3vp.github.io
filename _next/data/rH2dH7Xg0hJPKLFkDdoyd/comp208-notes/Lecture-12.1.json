{"pageProps":{"titles":["2.1 — Programming Basics","2.2 — Variables, Arithmetic & String operations","2.3 — Function Calls, Expressions","3.1 — Defining functions, Errors & Debugging","3.2 — Boolean Expressions, Comparison & Logical Operators","3.3 — Conditional execution using if statement","3.4 — for loop & String indexing, slicing","Python Style Guide","4.1 — Escape Characters & Controlling print()","4.2 — String methods & in operator","4.3 — while statement & Nested loops","4.4 — return statement & Importing modules","5.1 — Scope of Variables","5.2 — Lists & List Operations","5.3 — List Functions & Methods","5.4 — Tuples","6.1 — Object Identity, Immutability, Unpacking","6.2 — Sets","6.3 — Dictionaries","7.1 — Nested data structures & comparisons","7.2 — Iterables & comprehensions","7.3 — Reading and writing files","8.1 — Default arguments & Modules","8.2 — Handling Exceptions","9.1 — Object Oriented Programming (OOP)","9.2 — More on methods & __str__","10.1 — NumPy","10.2 — Plotting using Matplotlib","Week 10 — More on NumPy","11.1 — Root finding","11.2 — Interpolation & Curve fitting","12.1 — More NumPy & Linear algebra","12.2 — Solving a system of linear equations","12.3 — Numerical Integration"],"slugs":["Lecture-2.1","Lecture-2.2","Lecture-2.3.1","Lecture-3.1","Lecture-3.2","Lecture-3.3","Lecture-3.4","style-guide","Lecture-4.1","Lecture-4.2","Lecture-4.3","Lecture-4.4","Lecture-5.1","Lecture-5.2","Lecture-5.3","Lecture-5.4","Lecture-6.1","Lecture-6.2","Lecture-6.3","Lecture-7.1","Lecture-7.2","Lecture-7.3","Lecture-8.1","Lecture-8.2","Lecture-9.1","Lecture-9.2","Lecture-10.1","Lecture-10.2","Lecture-10.3","Lecture-11.1","Lecture-11.2","Lecture-12.1","Lecture-12.2","Lecture-12.3"],"post":{"title":"12.1 — More NumPy & Linear algebra","slug":"Lecture-12.1","content":"<h1>Copies and views of Numpy array</h1>\n<p>When manipulating arrays, their data may or may not be copied into a new array. Let’s look at different cases.</p>\n<python>x = np.arange(12)\n\n# Just a new name, no data is copied\ny = x\n\nprint(x)  # [ 0  1  2  3  4  5  6  7  8  9 10 11]\nprint(y)  # [ 0  1  2  3  4  5  6  7  8  9 10 11]\nprint(x is y) # True, as they are same objects\n</python>\n<p>When we <b>index or slice</b> a numpy array, the resulting array <b>shares same data</b> i.e. the result array is a <sc>view</sc> for the original array.</p>\n<python>x = np.arange(1, 13).reshape((3, 4))\nprint(x)\n# [[ 1  2  3  4]\n#  [ 5  6  7  8]\n#  [ 9 10 11 12]]\n\ny = x[:, 1:3]  # x and y share same data\nprint(y)\n# [[ 2  3]\n#  [ 6  7]\n#  [10 11]]\n\ny[0, 0] = 123  # Changing the shared data\nprint(x)\n# [[  1 123   3   4]\n#  [  5   6   7   8]\n#  [  9  10  11  12]]\n\nprint(y)\n# [[123   3]\n#  [  6   7]\n#  [ 10  11]]\n</python>\n<p><inline-code>copy()</inline-code> method of a numpy array can be used to create a new array which <b>does not share data</b> with the original array.</p>\n<python>x = np.arange(1, 13).reshape((3, 4))\nprint(x)\n# [[ 1  2  3  4]\n#  [ 5  6  7  8]\n#  [ 9 10 11 12]]\n\ny = x[:, 1:3].copy()\nprint(y)\n# [[ 2  3]\n#  [ 6  7]\n#  [10 11]]\n\ny[0, 0] = 123  # Changes the copy only\nprint(y)\n# [[123   3]\n#  [  6   7]\n#  [ 10  11]]\n\nprint(x)\n# [[ 1  2  3  4]\n#  [ 5  6  7  8]\n#  [ 9 10 11 12]]\n</python>\n<h1>Vector and Matrix operations in NumPy</h1>\n<p>Recall that <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></span>D numpy arrays can be seen as vectors and <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span></span>D numpy arrays as matrices</p>\n<python>import numpy as np\nv = np.arange(10, 70, 10)\nprint(v)  #[10 20 30 40 50 60]\n\nM = np.arange(10, 100, 10).reshape((3,3))\nprint(M)\n# [[10 20 30]\n#  [40 50 60]\n#  [70 80 90]]\n\n# ndarray.size attribute — total number of elements in ndarray\nprint(v.size)  # 6\nprint(M.size) # 9\n</python>\n<h2>Stacking new rows/columns into a matrix</h2>\n<python>import numpy as np\nM = np.arange(1, 7).reshape((2, 3))\nprint(M)\n# [[1 2 3]\n#  [4 5 6]]\n\nv = np.array([-1, -2])  # size of v must match number of rows\nM2 = np.column_stack([M, v])\nprint(M2)\n# [[ 1  2  3 -1]\n#  [ 4  5  6 -2]]\n\nw = np.array([5, 7, -1])  # size of w must match number of columns\nM3 = np.row_stack([M, w])\nprint(M3)\n# [[ 1  2  3]\n#  [ 4  5  6]\n#  [ 5  7 -1]]\n</python>\n<h2>Matrix Multiplication</h2>\n<ul>\n<li>\n<p>Interactive explanation for matrix multiplication: <a href=\"https://observablehq.com/@meetamit/matrix-multiplication\">https://observablehq.com/@meetamit/matrix-multiplication</a></p>\n</li>\n<li>\n<p>The <inline-code>@</inline-code> operator performs matrix multiplication with NumPy arrays.</p>\n<ul>\n<li><inline-code>np.dot</inline-code> can also be used to do matrix multiplication.</li>\n</ul>\n</li>\n<li>\n<p>Recall that <inline-code>*</inline-code> operator performs element-wise multiplication.</p>\n</li>\n</ul>\n<python>A = np.arange(10, 70, 10).reshape((3, 2))\nB = np.arange(10, 70, 10).reshape((2, 3))\nprint(A)\n#[[10 20]\n# [30 40]\n# [50 60]]\nprint(B)\n#[[10 20 30]\n# [40 50 60]]\n\nC = A @ B\nprint(C)\n#[[ 900 1200 1500]\n# [1900 2600 3300]\n# [2900 4000 5100]]\n\n\nA = np.array([[83, 10, 39],\n              [29, 67, 81]])\nprint(A @ A)\n# ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0,\n# (size 2 is different from 3)\n</python>\n<h2>Example</h2>\n<p>Let’s compute the following</p>\n<div class=\"math math-display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mstyle mathsize=\"0.9em\"><mn>2</mn><mi>A</mi><mo>+</mo><mi>A</mi><mi>B</mi><mo>−</mo><mn>3</mn><mi>I</mi></mstyle></mrow><annotation encoding=\"application/x-tex\">\\small 2A + AB - 3I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.689994em;vertical-align:-0.07499700000000001em;\"></span><span class=\"mord sizing reset-size6 size5\">2</span><span class=\"mord mathnormal sizing reset-size6 size5\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin sizing reset-size6 size5\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.689994em;vertical-align:-0.07499700000000001em;\"></span><span class=\"mord mathnormal sizing reset-size6 size5\">A</span><span class=\"mord mathnormal sizing reset-size6 size5\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin sizing reset-size6 size5\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.614997em;vertical-align:0em;\"></span><span class=\"mord sizing reset-size6 size5\">3</span><span class=\"mord mathnormal sizing reset-size6 size5\" style=\"margin-right:0.07847em;\">I</span></span></span></span></span></div>\n<p>where given matrices A and B (I is the identity matrix). Shapes of all matrices must match.</p>\n<python>import numpy as np\n\nA = np.array([[1, 5], [-2, 9]])\nB = np.array([[2, 5], [1, -2]])\nI = np.eye(2) # 2x2 identity matrix\n\nresult = 2 * A +  A @ B - 3 * I\nprint(result)\n</python>\n<h2>Powers of a matrix</h2>\n<python>import numpy as np\nfrom numpy.linalg import matrix_power\n\nA = np.array([[1, 5], [-2, 9]])\n\n# Cube of the matrix A\nprint(A @ A @ A)\n#[[-109  405]\n# [-162  539]]\n\n# Another way, using library function:\nprint(matrix_power(A, 3))\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}