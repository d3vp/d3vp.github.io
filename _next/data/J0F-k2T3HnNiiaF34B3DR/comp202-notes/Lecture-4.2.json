{"pageProps":{"titles":["L1.1 — Computer and Programming Basics","L1.2 — Variables & Expressions","L2.1 — Control Flow Statements","Python Style Guide","May 14 — Problem Set","L2.2 — print(), String methods & while loop","May 17 — Problem Set","L3.1 — More loops & Defining functions","May 19 — Problem Set","L3.2 — Lists","May 21 — Problem Set","L4.1 — Tuples, Dictionaries, Sets","May 26 — Problem Set","May 28 — Problem Set","L4.2 — Nested data structures","June 2 — Problem Set"],"slugs":["Lecture-1.1","Lecture-1.2","Lecture-2.1","style-guide","_May14-problem-set","Lecture-2.2","_May17-problem-set","Lecture-3.1","_May19-problem-set","Lecture-3.2","_May21-problem-set","Lecture-4.1","_May26-problem-set","_May28-problem-set","Lecture-4.2","_June2-problem-set"],"post":{"title":"L4.2 — Nested data structures","slug":"Lecture-4.2","content":"<h1>Packing vs Unpacking</h1>\n<p>When we create a string, a list, or a tuple, we are packing several elements into a single object.</p>\n<python>s = \"cat\"\nmy_list = [5, 'a']\nmy_tuple = (0, 3, 7)\n</python>\n<p>Unpacking allows us to assign values in a string/list/tuple to multiple variables.<br>\nWe must know the exact length of the string/list/tuple.</p>\n<python>>>> s = \"cat\"\n>>> a, b, c = s\n# a, b and c are all strings\n>>> print(a)\nc\n>>> print(b)\na\n>>> print(c)\nt\n\n>>> my_list = [5, 'a']\n>>> x, y = my_list\n>>> print(x)  # an int\n5\n>>> print(y)  # a string\na\n\n# Parentheses are optional in this context.\n>>> my_tuple = 0, 3, 7\n>>> x, y, z = my_tuple\n>>> print(x)\n0\n>>> print(y)\n3\n>>> print(z)\n7\n\n# Variables must match number of elements\n>>> tup = 1, 2, 3 \n>>> x, y = tup\nValueError: too many values to unpack (expected 2)\n</python>\n<h2>Multiple assignment using packing/unpacking on same line</h2>\n<python># We are creating a tuple on the right side and \n# unpacking it into 3 variables.\n>>> city, population, area = 'Montreal', 1704694, 431.5\n>>> print(city)\nMontreal\n>>> print(population)\n1704694\n>>> print(area)\n431.5\n</python>\n<h2>Returning a tuple from a function and unpacking</h2>\n<python>def min_max(mylist):\n    # Return a tuple of two elements\n    return min(mylist), max(mylist)\n    \n    \n# Unpack the returned tuple into 2 variables\nx, y = min_max([2, -3, 10, 20])\nprint(x)  # -3\nprint(y)  # 20\n</python>\n<h1>Functions and methods for dictionaries</h1>\n<python># dict(L): creates and returns a dictionary using a list L of tuples, \n#   where each tuple is of length 2 in form of (key, value).\n>>> pairs = [(\"Montreal\", 1.78), (\"Rome\", 2.87), (\"Tokyo\", 9.27)]\n>>> d = dict(pairs)\n>>> print(d)\n{'Montreal': 1.78, 'Rome': 2.87, 'Tokyo': 9.27}\n>>> print(d[\"Rome\"])\n2.87\n\n# dict.keys(): returns a iterable (sequence) of all keys\n>>> keys = list(d.keys())\n>>> print(keys)\n['Montreal', 'Rome', 'Tokyo']\n\n\n# dict.values(): returns a iterable (sequence) of all values\n>>> values = list(d.values())\n>>> print(values)\n[1.78, 2.87, 9.27]\n\n# dict.items(): returns a iterable (sequence) of tuples (key, value) \n#   for all items in the dictionary\n>>> d = {'Montreal': 1.78, 'Rome': 2.87, 'Tokyo': 9.27}\n>>> pairs = list(d.items())\n>>> print(pairs)\n[('Montreal', 1.78), ('Rome', 2.87), ('Tokyo', 9.27)]\n</python>\n<p>For more methods, help <inline-code>help(dict)</inline-code>.</p>\n<p>Using the above methods to iterate over a dictionary:</p>\n<python>d = {'Montreal': 1.78, 'Rome': 2.87, 'Tokyo': 9.27}\ntotal = 0\nfor val in d.values():\n    total += val\n\nprint(total)  # 13.92\n</python>\n<p>Making use of tuple unpacking in the for loop:</p>\n<python>d = {'Montreal': 1.78, 'Rome': 2.87, 'Tokyo': 9.27}\n\n# d.items() returns a sequence of key-value tuples\nfor tup in d.items():\n    key = tup[0]\n    val = tup[1]\n    print(key, \"->\", val)\n\n# Montreal -> 1.78\n# Rome -> 2.87\n# Tokyo -> 9.27\n\n\n# Unpack tuple into two variables: key and val\nfor key, val in d.items():\n    print(key, \"->\", val)\n\n# Montreal -> 1.78\n# Rome -> 2.87\n# Tokyo -> 9.27\n</python>\n<h1>Nested data structures — Examples</h1>\n<h2>Matrix as a list of lists</h2>\n<p>A matrix of numbers can be stored as a list of lists.</p>\n<python>matrix = [[81, 75, 90, 60], \n          [80, 70, 85, 55],\n          [40, 50, 45, 85]]\n\n# By using one index, we can get inner list (a row of matrix)\n>>> print(matrix[1]) \n[80, 70, 85, 55]\n\n# By using two indices, we can get an element inside an inner list\n>>> print(matrix[1][3]) \n55\n</python>\n<h3>Iterating over matrices in <i>row-first</i> order:</h3>\n<div class=\"flex\"><python>matrix = [[81, 75, 90, 60], \n          [80, 70, 85, 55],\n          [40, 50, 45, 85]]\n\nnum_rows = len(matrix)  # no. of inner lists\nnum_cols = len(matrix[0])  # length of an inner list\n\nfor r in range(num_rows):\n    print(\"Row\", r, \":\")\n    for c in range(num_cols):\n        print(matrix[r][c])\n</python><output>Row 0 :\n81\n75\n90\n60\nRow 1 :\n80\n70\n85\n55\nRow 2 :\n40\n50\n45\n85\n</output></div>\n<h2>List of tuples</h2>\n<python>points = [(1, 1, 3), (4, 10.5, 9), (7, 4.4, 9.7)]\n# List element can be modified:\npoints[1] = (4, 12, 10)  # Changing to new points\nprint(points)  # [(1, 1, 3), (4, 12, 10), (7, 4.4, 9.7)]\n\n# Trying to change the second points's z-coordinate\npoints[1][2] = 10  \n# TypeError: 'tuple' object does not support item assignment\n</python>\n<p>Iterating over list of tuples:</p>\n<python>points = [(1, 1, 3), (4, 10.5, 9), (7, 4.4, 9.7)]\n\n# p is a tuple\nfor p in points:\n    dist = (p[0]**2 + p[1]**2 + p[2]**2)**0.5\n    print(p, \":\", dist)\n    \n# (1, 1, 3) : 3.3166247903554\n# (4, 10.5, 9) : 14.396180048887969\n# (7, 4.4, 9.7) : 12.7455874717488\n</python>\n<python>points = [(1, 1, 3), (4, 10.5, 9), (7, 4.4, 9.7)]\n\n# Unpacking tuple into 3 variables x, y, z\nfor x, y, z in points:\n    dist = (x**2 + y**2 + z**2)**0.5\n    print(x, y, z, \":\", dist)\n    \n# 1 1 3 : 3.3166247903554\n# 4 10.5 9 : 14.396180048887969\n# 7 4.4 9.7 : 12.7455874717488\n</python>\n<h1>List of dictionaries</h1>\n<p>A dictionary can be used to represent a data record such as student record in a course in the following example.</p>\n<p>A list of such dictionaries can store multiple data records.</p>\n<python>student_records = [\n    {\"Name\": \"Khalid\", \"ID\": 2601234, \"grades\": [90, 95, 100]},\n    {\"Name\": \"Reza\", \"ID\": 2601000, \"grades\": [95, 95, 97]},\n    {\"Name\": \"Deven\", \"ID\": 2605000, \"grades\": [80, 85, 90]}\n]\n\n# grades is a list with 3 assignment grades\n</python>\n<div class=\"bggreen p2\"><p>What is assignment 1 grades for “Reza” ?</p><solution><python>print(student_records[1][\"grades\"][0])  # 95\n</python></solution><p>Display total grade for each student.</p><solution><python>for record in student_records:\n    print(\"Total grade for\", record[\"Name\"], \"is\", sum(record[\"grades\"]))\n</python></solution></div>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}