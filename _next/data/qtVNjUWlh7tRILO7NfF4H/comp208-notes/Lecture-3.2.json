{"pageProps":{"titles":["2.1 — Programming Basics","2.2 — Variables, Arithmetic & String operations","2.3 — Function Calls, Expressions","3.1 — Defining functions, Errors & Debugging","3.2 — Boolean Expressions, Comparison & Logical Operators","3.3 — Conditional execution using if statement","3.4 — for loop & String indexing, slicing","Python Style Guide","Live Class Discord"],"slugs":["Lecture-2.1","Lecture-2.2","Lecture-2.3.1","Lecture-3.1","Lecture-3.2","Lecture-3.3","Lecture-3.4","style-guide","discord"],"post":{"title":"3.2 — Boolean Expressions, Comparison & Logical Operators","slug":"Lecture-3.2","content":"<h1>Boolean Expressions &#x26; Comparison Operators</h1>\n<p>Python has two values <inline-code>True</inline-code> and <inline-code>False</inline-code> of type <inline-code>bool</inline-code>, which are useful for expressing and storing   yes/no or true/false kind of data.</p>\n<python>>>> True\nTrue\n>>> False\nFalse\n>>> type(True)\n&#x3C;class 'bool'>\n>>> type(False)\n&#x3C;class 'bool'>\n</python>\n<p><sc>comparison operators</sc>, also known as <i>relational operators</i>, are used to compare two values, such as numbers or string.<br>\nThe result of such comparison is always a <inline-code>bool</inline-code> value i.e. <inline-code>True</inline-code> or <inline-code>False</inline-code>.</p>\n<p>Examples:</p>\n<python>>>> 10 == 10  # are numbers equal?\nTrue\n>>> 10 == 20\nFalse\n\n>>> x = 5\n>>> y = 10\n>>> x == y\nFalse\n>>> x != y\nTrue\n>>> x &#x3C; y\nTrue\n>>> x > y\nFalse\n\n# We can use variables to store results of boolean expression \n# (just like we did for arithmetic expressions)\n>>> x = 3\n>>> is_positive = x > 0\n>>> is_positive\nTrue\n\n>>> x = 5\n>>> y = 5\n>>> is_equal = x == y\n>>> is_equal\nTrue\n</python>\n<p>A <sc>boolean expression</sc> is an expression that evaluates to either <inline-code>True</inline-code> or <inline-code>False</inline-code>.\nExamples above show how boolean expressions are created using comparison operators.</p>\n<div class=\"p1 br5 bgred\"><p><b>Important</b></p><ul>\n<li>Common error is using <inline-code>=</inline-code> (single equals sign) instead of <inline-code>==</inline-code> (double equals sign)</li>\n<li><inline-code>=</inline-code> is the assignment operator, used to create variable and assign it a value</li>\n<li><inline-code>==</inline-code> is a comparison operator used to check for equality between two values</li>\n</ul></div>\n<h2>List of comparison operators</h2>\n<ul>\n<li><inline-code>x == y</inline-code> — <inline-code>True</inline-code> if <inline-code>x</inline-code> is equal to <inline-code>y</inline-code>, otherwise <inline-code>False</inline-code></li>\n<li><inline-code>x != y</inline-code> — <inline-code>True</inline-code> if <inline-code>x</inline-code> is not equal to <inline-code>y</inline-code>, otherwise <inline-code>False</inline-code></li>\n<li><inline-code>x &#x3C; y</inline-code> — <inline-code>True</inline-code> if <inline-code>x</inline-code> is less than <inline-code>y</inline-code>, otherwise <inline-code>False</inline-code></li>\n<li><inline-code>x > y</inline-code> — <inline-code>True</inline-code> if <inline-code>x</inline-code> is greater than <inline-code>y</inline-code>, otherwise <inline-code>False</inline-code></li>\n<li><inline-code>x &#x3C;= y</inline-code> — <inline-code>True</inline-code> if <inline-code>x</inline-code> is less than or equal to <inline-code>y</inline-code>, otherwise <inline-code>False</inline-code></li>\n<li><inline-code>x >= y</inline-code> — <inline-code>True</inline-code> if <inline-code>x</inline-code> is greater than or equal to <inline-code>y</inline-code>, otherwise <inline-code>False</inline-code></li>\n</ul>\n<h2>Order of operations</h2>\n<p>All comparison operators (e.g. <inline-code>==</inline-code>, <inline-code>!=</inline-code>, etc.) have same priority and are evaluated from left to right.</p>\n<p>All arithmetic and string operators have higher priority than comparison operators.</p>\n<python>>>> x = 5\n>>> x + 1 == 6\nTrue\n</python>\n<div class=\"p1 br5 bggreen\"><p><b>Try it!</b></p><p>Write a program that take an integer as input from the user and displays on your screen whether it is true or false that such integer is even.</p><p>Program should run as follows:</p><output>Enter a number: 5\n5 is an even number: False\n</output><solution><python>num = int(input(\"Enter a number: \"))\n\n# a number is even if remainder is 0 when it is divided by 2\nis_even = (num % 2 == 0)\n\nprint(num, \"is an even number:\", is_even)\n\n# without using extra variable:\n# print(num, \"is an even number:\", num % 2 == 0)\n</python></solution></div>\n<h1>Comparing strings</h1>\n<p>Comparison operators work for strings as well.<br>\nThe comparison is done alphabetically i.e. following a dictionary order</p>\n<python>>>> \"cat\" == \"cat\"\nTrue\n>>> \"cat\" == \"dog\"\nFalse\n>>> \"cat\" != \"dog\"\nTrue\n\n# letter \"c\" in \"cat\" appears before \"d\" alphabetically\n>>> \"cat\" &#x3C; \"dog\"\nTrue\n\n# uppercase letters A-Z appear before lowercase a-z alphabetically\n>>> \"cat\" &#x3C; \"Dog\"\nFalse\n\n# We can compare different types for equality\n>>> \"cat\" == 123\nFalse\n\n# But inequality is not allowed\n>>> \"cat\" &#x3C; 123\nTypeError: '&#x3C;' not supported between instances of 'str' and 'int'\n\n# All of the above examples work the same when using variables\n>>> s1 = \"cat\"\n>>> s2 = \"dog\"\n>>> s1 == s2\nFalse\n</python>\n<h2>Equality and floating point numbers</h2>\n<p>Consider following example:</p>\n<python>>>> x = 1.1 + 2.2\n>>> x\n3.3000000000000003\n>>> x == 3.3  # what?\nFalse\n</python>\n<ul>\n<li>As we saw earlier, a floating-point number is stored with 64-bit <i>finite precision</i>.</li>\n<li>This means that a number may not be stores as precisely as we would like.</li>\n<li>To account for this, when we want to check if two floating point numbers are equal, we should check if they are “close enough”</li>\n</ul>\n<p>Correct way to check for equality of floating-point numbers:</p>\n<python># First define how close two numbers need to be\nepsilon = 0.000001\n\n>>> x = 1.1 + 2.2\n>>> x\n3.3000000000000003\n\n# Check if x and 3.3 are within epsilon distance\n>>> abs(x - 3.3) &#x3C; epsilon\nTrue\n</python>\n<h1>Logical Operators</h1>\n<p>Logical operators are useful to combine multiple conditions.</p>\n<p>Logical operators take boolean expressions as operands and produce a result of type <inline-code>bool</inline-code>.</p>\n<p>Python has 3 boolean operators:</p>\n<ul>\n<li><inline-code>not</inline-code> — a unary operator</li>\n<li><inline-code>and</inline-code> — binary operator</li>\n<li><inline-code>or</inline-code> — binary operator</li>\n</ul>\n<p>Suppose <inline-code>x</inline-code> is a variable of type <inline-code>bool</inline-code>:</p>\n<div class=\"code p1\" style=\"font-size: 0.75em;\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>x</th><th>not x</th></tr></thead><tbody><tr><td>False</td><td>True</td></tr><tr><td>True</td><td>False</td></tr></tbody></table></div>\n<p><inline-code>not x</inline-code> evaluates to the opposite value of <inline-code>x</inline-code>.</p>\n<p>Suppose <inline-code>x</inline-code> and <inline-code>y</inline-code> are variables of type <inline-code>bool</inline-code>:</p>\n<div class=\"flex\" style=\"width: 110%;\"><div class=\"code px2\" style=\"font-size: 0.75em;\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>x</th><th>y</th><th>x and y</th></tr></thead><tbody><tr><td>True</td><td>True</td><td>True</td></tr><tr><td>True</td><td>False</td><td>False</td></tr><tr><td>False</td><td>True</td><td>False</td></tr><tr><td>False</td><td>False</td><td>False</td></tr></tbody></table></div><div class=\"code px2\" style=\"font-size: 0.75em;\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>x</th><th>y</th><th>x or y</th></tr></thead><tbody><tr><td>True</td><td>True</td><td>True</td></tr><tr><td>True</td><td>False</td><td>True</td></tr><tr><td>False</td><td>True</td><td>True</td></tr><tr><td>False</td><td>False</td><td>False</td></tr></tbody></table></div></div>\n<p><inline-code>x and y</inline-code> evaluates to <inline-code>True</inline-code> if and only if both <inline-code>x</inline-code> and <inline-code>y</inline-code> are <inline-code>True</inline-code>.<br>\n<inline-code>x or y</inline-code> evaluates to <inline-code>False</inline-code> if and only if both <inline-code>x</inline-code> and <inline-code>y</inline-code> are <inline-code>False</inline-code>.</p>\n<h2>Order of operations</h2>\n<p>In order of higher to lower priority:</p>\n<ul>\n<li><inline-code>not</inline-code></li>\n<li><inline-code>and</inline-code></li>\n<li><inline-code>or</inline-code></li>\n</ul>\n<p>As usual, you can use parentheses in order to change the priority.</p>\n<p>Examples:</p>\n<p>What does <inline-code>b and not a or b</inline-code> evaluate to if <inline-code>a = False</inline-code> and <inline-code>b = True</inline-code> ?</p>\n<div class=\"code\"><ul>\n<li>b and not a or b</li>\n<li>True and not False or True</li>\n<li>True and True or True</li>\n<li>True or True</li>\n<li>True</li>\n</ul></div>\n<p>What does <inline-code>a and not (a or b)</inline-code> evaluate to if <inline-code>a = True</inline-code> and <inline-code>b = False</inline-code> ?</p>\n<div class=\"code\"><ul>\n<li>a and not (a or b)</li>\n<li>True and not (True or False)</li>\n<li>True and not True</li>\n<li>True and False</li>\n<li>False</li>\n</ul></div>\n<h2>Order of operations</h2>\n<div class=\"my2\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Operator</th><th>Associativity</th></tr></thead><tbody><tr><td><inline-code>()</inline-code> (parentheses)</td><td>-</td></tr><tr><td><inline-code>**</inline-code></td><td>Right</td></tr><tr><td>Unary <inline-code>-</inline-code></td><td>-</td></tr><tr><td><inline-code>*</inline-code>, <inline-code>/</inline-code>, <inline-code>//</inline-code>, <inline-code>%</inline-code></td><td>Left</td></tr><tr><td>Binary <inline-code>+</inline-code>, <inline-code>-</inline-code></td><td>Left</td></tr><tr><td><inline-code>==</inline-code>, <inline-code>!=</inline-code>, <inline-code>&#x3C;</inline-code>, <inline-code>></inline-code>, <inline-code>&#x3C;=</inline-code>, <inline-code>>=</inline-code></td><td>Left</td></tr><tr><td><inline-code>not</inline-code></td><td>-</td></tr><tr><td><inline-code>and</inline-code></td><td>Left</td></tr><tr><td><inline-code>or</inline-code></td><td>Left</td></tr><tr><td><inline-code>=</inline-code> (assignment)</td><td>Right</td></tr></tbody></table></div>\n<p>You don’t need to memorize all this, use parenthesis when in doubt!</p>\n<h2>Try these examples in Thonny</h2>\n<p>Change the value of x and see results of boolean expressions.</p>\n<python>x = 30\n# Is an even number greater than 20?\nprint(x % 2 == 0 and x > 20)\n\nx = 10\n# Is an even number or a multiple of 5 greater than 20?\nprint(x % 2 == 0 or x % 5 == 0 and x > 20)\n\n# Is a multiple of 2 or 5, greater than 20? \nprint((x % 2 == 0 or x % 5 == 0) and x > 20)\n</python>\n<div class=\"p2 bggreen\"><p><b>Try it!</b></p><p>Write a program that takes 3 integers <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo separator=\"true\">,</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x, y, z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span></span> as inputs and prints out <inline-code>True</inline-code> if <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span> is an even number between <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span></span> and <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span></span>, <inline-code>False</inline-code> otherwise. Assume all 3 numbers will be different.</p><python># Retrieve inputs from the user\nx = int(input(\"Enter the x: \"))\ny = int(input(\"Enter the y: \"))\nz = int(input(\"Enter the z: \"))\n\n# Write code below\n</python><solution><python># Retrieve inputs from the user\nx = int(input(\"Enter the x: \"))\ny = int(input(\"Enter the y: \"))\nz = int(input(\"Enter the z: \"))\n\n# check if y is even\nis_even = y % 2 == 0\n\n# check if y is between x and z\nis_between = (x &#x3C; y and y &#x3C; z) or (z &#x3C; y and y &#x3C; x)\n\nprint(is_even and is_between)\n</python></solution></div>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}