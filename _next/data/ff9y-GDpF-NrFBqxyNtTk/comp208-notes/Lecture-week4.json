{"pageProps":{"titles":["Week 1 — Computer and Programming Basics","Week 2 — Types, Variables, Expressions, Functions","Sep 9-10 Problem Set 2","Week 3 —  Conditionals & Iteration","Sep 16-17 Problem Set","Week 4 —  print(), String methods, while loop","Python Style Guide","Sep 23-24 Problem Set","Week 5 —  Scope of variables, Lists & Tuples","Sep 30-Oct 1 Problem Set","Week 6 —  Immutability, Dictionary & Set","Oct 7-8 Problem Set","Week 7 —  Nested data structures, iterables, comprehensions","Week 8 —  Exceptions & File IO","Oct 21-22 Problem Set","Week 9 — Object oriented programming","Oct 28-29 — Problem Set","Week 10 — NumPy & Matplotlib","Nov 4-5 More on NumPy & Problems","Week 11 — Roots, Interpolation, Curve fitting","Week 12 — System of linear equations, Numerical Integration","Nov 18-19 — NumPy & Problem Set"],"slugs":["Lecture-1.2","Lecture-week2","_Sep09-problem-set","Lecture-week3","_Sep16-17-problem-set","Lecture-week4","style-guide","_Sep23-24-problem-set","Lecture-week5","_Sep30-Oct1-problem-set","Lecture-week6","_Oct7-8-problem-set","Lecture-week7","Lecture-week8","_Oct21-22_problem-set","Lecture-week9","_Oct28-29_problem-set","Lecture-week10","_Nov4-5_problem-set","Lecture-week11","Lecture-week12","_Nov18-19_problem-set"],"post":{"title":"Week 4 —  print(), String methods, while loop","slug":"Lecture-week4","content":"<h1>ASCII code and special characters</h1>\n<p>Recall ASCII table from a previous lecture:</p>\n<img style=\"margin-left: 0em; width: 100%;\" src=\"module-1/ASCII-Table.png\">\n<p>Python has built-in functions to convert ASCII code (decimal) to/from a single character.</p>\n<python>print(ord(\"a\"))  # 97, the ASCII code for letter \"a\"\nprint(ord(\"A\"))  # 65\nprint(ord(\"$\"))  # 36\n\nprint(ord(\"hi\"))  # doesn't work for more than one character\n# TypeError: ord() expected a character, but string of length 2 found\n\nprint(chr(70))  # F, the character for ASCII code 70\n\nprint(chr(103))  # g\n</python>\n<h3>Example</h3>\n<p>Write a program that  shifts each letter in a string to the left by 3 steps according to ASCII table.<br>\ni.e. <code>A → >, B → ?, C → @, D → A, E → B</code>, etc.</p>\n<python>word = \"Python\"\n\nresult = \"\"\nfor i in range(len(word)):\n    code = ord(word[i])  # Get ASCII code for the letter\n    code = code - 3  # Shift code by 3\n    # Get letter for the code and add it to result:\n    result = result + chr(code)  \n    \nprint(result)  # Mvqelk\n\n</python>\n<h2>Escape characters</h2>\n<p>There are special characters such as shown below, which we cannot direct enter in a string:</p>\n<ul>\n<li><i>newline character</i>: This is the character representing “enter” or “return” key.</li>\n<li><i>tab character</i>: This is the character representing “tab” key.</li>\n</ul>\n<p>Such special character can be used in Python using escape characters.</p>\n<python># Trying to enter a newline character directly fails:\nmessage = \"Hello\nworld\"\n</python>\n<output>    message = \"Hello\n                   ^\nSyntaxError: EOL while scanning string literal\n</output>\n<p>To include a newline character in a string we can use the escape character <inline-code>\\n</inline-code> in the string:</p>\n<python>message = \"hello\\nworld\"\nprint(message)\n</python>\n<output>hello\nworld\n</output>\n<p><inline-code>\\n</inline-code> is stored as a single character even though it looks like two.</p>\n<python>print(ord(\"\\n\"))  # 10\n</python>\n<p>Another escape character is <inline-code>\\t</inline-code> which represents the tab character.<br>\nIt is useful as a separator when displaying values:</p>\n<python># print uses space as separator by default\nprint(\"Khalid\", 85)\nprint(\"Reza\", 90)\n\n# Using tab as separator\nprint(\"Khalid\", 85, sep=\"\\t\")\nprint(\"Reza\", 90, sep=\"\\t\")\n</python>\n<output>Khalid 85\nReza 90\nKhalid\t85\nReza\t90\n</output>\n<h1>Controlling print() function</h1>\n<p>In example above, we used a <sc>keyword argument</sc> <inline-code>sep=</inline-code> to tell print which separator to use between values.</p>\n<p>Unlike the usual arguments, keyword arguments are given in the form <inline-code>name=value</inline-code>; in the example <inline-code>sep</inline-code> is the name of argument and <inline-code>\"\\t\"</inline-code> is the value.</p>\n<python># separator can be any string\nprint(\"Alice\", 90, 3.14, sep=\",\")\n# Alice,90,3.14\n\nprint(\"Alice\", 90, 3.14, sep=\"|\")\n# Alice|90|3.14\n\n# even longer than one character\nprint(\"Alice\", 90, 3.14, sep=\"-----\")\n# Alice-----90-----3.14\n\nprint(\"Alice\", 90, 3.14, sep=\"\")  # No separator!\n# Alice903.14\n</python>\n<p>By default, <inline-code>print()</inline-code> function displays a newline  character <inline-code>\\n</inline-code> at end of line.</p>\n<div class=\"flex\"><python>print(\"hello\")  # \"\\n\" is displayed after \"o\"\nprint()  # no arguments, just prints \"\\n\"\nprint(\"world\") # \"\\n\" is displayed after \"d\"\n</python><output>hello\n\nworld\n</output></div>\n<p>We can change the <inline-code>end</inline-code> character using another keyword argument to <inline-code>print()</inline-code> function, <inline-code>end=</inline-code>.</p>\n<div class=\"flex\"><python>print(\"A sequence of numbers:\")\nprint(1, end=\",\")\nprint(4, end=\",\")\nprint(9, end=\",\")\n</python><output>A sequence of numbers:\n1,4,9,\n</output></div>\n<p>This is useful in a loop:</p>\n<python>N = 10\nfor i in range(N):\n    print(i*i, end=\", \")  # comma and a space\n</python>\n<output>0, 1, 4, 9, 16, 25, 36, 49, 64, 81, \n</output>\n<div class=\"p2 bggreen\"><p>Change the above example to not print the last comma. For example,</p><output>0, 1, 4, 9, 16, 25, 36, 49, 64, 81\n</output><solution><python>N = 10\nfor i in range(N):\n    if i == N - 1:\n        print(i * i, end=\"\")\n    else:\n        print(i * i, end=\", \")\n</python></solution></div>\n<h1>Multiline strings</h1>\n<p>Using <inline-code>\\n</inline-code>, we can create a single string that contains all of the following lines:</p>\n<python>shopping_list = \"Shopping list\\n- Milk\\n- Eggs\\n- Apples\\n\"\nprint(shopping_list)\n</python>\n<output>Shopping list\n- Milk\n- Eggs\n- Apples\n</output>\n<p>Python provides a better create multiline strings using <i>triple quotes</i>: <inline-code>'''</inline-code> or <inline-code>\"\"\"</inline-code>.</p>\n<python>shopping_list = '''Shopping list\n- Milk\n- Eggs\n- Apples\n'''\n\n# OR the following, both are same\n\nshopping_list = \"\"\"Shopping list\n- Milk\n- Eggs\n- Apples\n\"\"\"\n\nprint(shopping_list)\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>String methods</h1>\n<p>A <sc>method</sc> is similar to a function except that a method is <i>always</i> called on an object:</p>\n<div class=\"px1 py025 code br5\" style=\"background-color: white; width: auto; white-space: pre;\"><p>object.method_name(argument1, argument2, …)</p></div>\n<p><inline-code>str</inline-code> type has several methods that we can call on a string object:</p>\n<python>print(\"hello\".upper())  # calling method upper() on the string \"hello\"\n# HELLO\n\nmessage = \"hello\"\nprint(message.upper())  # using variable that refers to string\n# HELLO\n\nmessage = 10\nprint(message.upper())  # upper() only available for str objects\n# AttributeError: 'int' object has no attribute 'upper'\n</python>\n<h2>Useful string methods</h2>\n<python>s = \"Luke, I am your father\"\n\n# s.lower() : returns a copy of s, but with all lower case letters.\nprint(s.lower())\n# luke, i am your father\n\n# s.upper() : returns a copy of s, but with all upper case letters.\nprint(s.upper())\n# LUKE, I AM YOUR FATHER\n\n# s.replace(old, new) : returns a copy of s with all occurrences of \n# the substring old replaced by new.\nprint(s.replace(\"am\", \"am not\"))\n# Luke, I am not your father\n\nprint(s.replace(\" \", \"\")) # empty string will delete\n# Luke,Iamyourfather\n</python>\n<python>s = \"banana\"\n# s.count(c) : returns the number of non-overlapping \n# occurrences of substring c in s.\nprint(s.count(\"na\"))\n# 2\n\n# s.find(c) : returns the index where the substring begins in s begins. \n# If c is not a substring of s, then -1 is returned.\nprint(s.find(\"an\"))\n# 1\n\nprint(s.find(\"naa\"))\n# -1\n</python>\n<h3>Example</h3>\n<p>In just one expression, compare if two strings <inline-code>s1</inline-code> and <inline-code>s2</inline-code> are equal in a case-insensitive manner.</p>\n<python>s1 = \"Hello Everyone\"\ns2 = \"hello everyone\"\n\nis_equal = s1.upper() == s2.upper()\n\n# OR\n# is_equal = s1.lower() == s2.lower()\n\nprint(is_equal)  # prints True\n</python>\n<h2><inline-code>in</inline-code> operator (membership operator)</h2>\n<ul>\n<li>In Python <inline-code>in</inline-code> is a keyword.</li>\n<li>The <inline-code>in</inline-code> and <inline-code>not in</inline-code> operators test for membership.</li>\n<li>We can use them with strings to test if one string is a substring of another.</li>\n</ul>\n<python>s = \"More garbage\"\nprint(\"age\" in s)  # True\nprint(\"x\" in s)  # False\nprint(\"w\" not in s)  # True\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1><code>while</code> statement</h1>\n<p><inline-code>while</inline-code> statement is another way to repeatedly execute a block of code.</p>\n<p>General format of a while loop:</p>\n<div class=\"px1 py025 br5\" style=\"background-color: white; width: 90%; white-space: pre;\"><p><code>Initialize variables so that</code> <code class=\"bggreen ibox\">condition</code> <code>is True</code>\n<code class=\"b\">while</code> <code class=\"bggreen ibox\">condition</code> <code class=\"b\">:</code>\n<code>    </code><code class=\"bgblue ibox\">code block</code>\n<code>    </code><code>update variables that affect</code> <code class=\"bggreen ibox\">condition</code></p></div>\n<p>What <inline-code>while</inline-code> loop does:</p>\n<ol>\n<li>Evaluate the <code class=\"bggreen ibox\">condition</code></li>\n<li>If <code class=\"bggreen ibox\">condition</code> evaluates to <inline-code>False</inline-code>, loop body is not executed.</li>\n<li>If <code class=\"bggreen ibox\">condition</code> evaluates to <inline-code>True</inline-code>, run the loop body (all indented lines of code)<br>\na) In loop body we perform some task, <code class=\"bgblue ibox\">code block</code>, and update variables that may change the <code class=\"bggreen ibox\">condition</code> value<br>\nb) Go back to step 1</li>\n</ol>\n<python># a program to compute sum of first N numbers\nN = 10\n\ntotal = 0\n\ni = 1  # Set value so that condition below is True \nwhile i &#x3C;= N:  # Check if condition is True\n    # main task of summing numbers:\n    total = total + i  \n    \n    # update i, affects value of condition i &#x3C;= N \n    i = i + 1\n\n# print result outside the loop   \nprint(total)\n</python>\n<p>It is a common mistake to forget updating the condition inside loop body.<br>\nSee what happens when you remove/comment out the line <inline-code>i = i + 1</inline-code> in above example.<br>\nThe loop will never end — an infinite loop!</p>\n<h2>Augmented assignment statements</h2>\n<p>Augmented assignment is the combination, in a single statement, of a arithmetic operation and an assignment statement:</p>\n<python>x = 3\ny = 5\n\nx += 1  # same as: x = x + 1\n\nx += y  # same as: x = x + y\n\nx += x * y  # same as x = x + x * y\n\nx -= 5  # x = x - 5\n\nx *= 2  # x = x * 2\n</python>\n<p>Similarly, other operators exist: <inline-code>/=</inline-code>, <inline-code>//=</inline-code>, <inline-code>%=</inline-code>, <inline-code>**=</inline-code>.</p>\n<p>These are very useful, especially when updating the condition in while loop.</p>\n<h2>Indefinite loops</h2>\n<p>So far we have seen loops that work with fixed number of steps.</p>\n<p>But while loop can be used for repeating code for unknown number of steps:</p>\n<python># program to keep asking for password until correct password is entered.\n# Assume that correct password is \"1234\"\n\npassword = input(\"Enter password: \")\n\nwhile password != \"1234\":\n    print(\"Incorrect password, try again!\")\n    \n    password = input(\"Enter password: \")\n    \n# If we reach this line it means \"1234\" was entered as password: \nprint(\"Login successful!\")\n</python>\n<div class=\"p2 bggreen\"><p>Change above example to ask for an email and password.<br>\nProgram should continue until both email and password are correct.<br>\nPassword comparison must be case-sensitive, while email comparison should be case-insensitive.<br>\nFor comparison, just choose any email, password that you like.</p><solution><python>email = input(\"Enter email: \")\npassword = input(\"Enter password: \")\n\nwhile email.lower() != \"abcd@gmail.com\" or password != \"1234\":\n    print(\"Incorrect email or password, try again!\")\n    \n    email = input(\"Enter email: \")\n    password = input(\"Enter password: \")\n    \n# If we reach this line it means both email and password were correct\nprint(\"Login successful!\")\n\n</python></solution></div>\n<h3><inline-code>for</inline-code> vs <inline-code>while</inline-code> loops</h3>\n<ul>\n<li><inline-code>for</inline-code> loops are better when we want to go over a fixed sequence such as a a string or a series of numbers</li>\n<li><inline-code>while</inline-code> loop is more flexible an allows arbitrary conditions and number of steps. e.g. do something until user enters correct data</li>\n</ul>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1><code>break</code> and <code>continue</code> statements</h1>\n<p><inline-code>break</inline-code> statement can be used to terminate a loop before it normally ends.</p>\n<p>After a <inline-code>break</inline-code> statement is executed, no other code inside the loop is executed.</p>\n<div class=\"flex\"><python>for i in range(10):\n    if i > 5:\n        break\n    print(i)\n    \nprint(\"Bye!\")\n</python><output>0\n1\n2\n3\n4\n5\nBye!\n</output></div>\n<h3>Example:</h3>\n<p>DNA sequences can be represented in Python using strings made of A, C, G, or T.<br>\nA <i>homopolymer</i> is a sequence made entirely of the same letter, such as <inline-code>AAAAA</inline-code>, <inline-code>GG</inline-code>, <inline-code>TTTTTTTT</inline-code>.<br>\nWrite a program that checks if a sequence is homopolymer, and prints the result.</p>\n<python>seq = \"AAAAAAA\"  # homopolymer\n# seq = \"AAAAGA\"  # not a homopolymer\n\nis_homopolymer = True\nfor i in range(len(seq)):\n    if seq[i] != seq[0]:\n        # Found different letter\n        is_homopolymer = False\n        break  # don't loop further\n\nif is_homopolymer:\n    print(\"homopolymer\")\nelse:\n    print(\"not homopolymer\")\n</python>\n<h3>Example:</h3>\n<p>Write a program that takes an integer as input and prints whether the number is prime or not.\nTo check if a number <inline-code>n</inline-code> is prime:</p>\n<ul>\n<li>Divide <inline-code>n</inline-code> by each number <inline-code>i</inline-code> from <inline-code>2</inline-code> to <inline-code>n-1</inline-code>\n<ul>\n<li>if <inline-code>n</inline-code> is divisible by any <inline-code>i</inline-code> then <inline-code>n</inline-code> cannot be not prime</li>\n<li>In other words, if <inline-code>n</inline-code> is not divisible by all <inline-code>i</inline-code>’s then <inline-code>n</inline-code> is prime</li>\n</ul>\n</li>\n</ul>\n<python>num = int(input(\"Enter number: \"))\n\nis_prime = True\n\nif num &#x3C; 2:\n    is_prime = False\nelse:\n    for i in range(2, num):\n        if num % i == 0:\n            is_prime = False\n            break\n\nprint(is_prime)\n</python>\n<h2>Using <inline-code>break</inline-code> in a <inline-code>while</inline-code> loop.</h2>\n<p>Consider the following example to check if email/password are correct:</p>\n<p></p><div class=\"w120\"></div><p></p>\n<python>email = input(\"Enter email: \")\npassword = input(\"Enter password: \")\n\nwhile email.lower() != \"abcd@gmail.com\" or password != \"1234\":\n    print(\"Incorrect email or password, try again!\")\n    \n    email = input(\"Enter email: \")\n    password = input(\"Enter password: \")\n    \nprint(\"Login successful!\")\n</python>\n<p>We can simplify the code using a <inline-code>break</inline-code> statement:</p>\n<python>while True:\n    email = input(\"Enter email: \")\n    password = input(\"Enter password: \")\n    if email.lower() == \"abcd@gmail.com\" and password == \"1234\":\n        break\n    print(\"Incorrect email or password, try again!\")\n\nprint(\"Login successful!\")\n</python>\n<h2><code>continue</code> statement</h2>\n<p><inline-code>continue</inline-code> statement is useful to skip some steps in a <inline-code>for</inline-code>/<inline-code>while</inline-code> loop.</p>\n<p>After a <inline-code>continue</inline-code> statement is executed, code that follows the statement is skipped and execution continues from the next step of the loop.</p>\n<python>for i in range(1, 50):\n    if i % 2 == 0 or i % 3 == 0:\n        continue\n    print(i, end=\" \")\n</python>\n<output>1 5 7 11 13 17 19 23 25 29 31 35 37 41 43 47 49\n</output>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>Functions and <inline-code>return</inline-code> statement</h1>\n<p>Functions that do not have an explicit <inline-code>return</inline-code> statement, return a special value <inline-code>None</inline-code>.</p>\n<python>print(None, type(None))\n# None &#x3C;class 'NoneType'>\n</python>\n<p>The following 3 functions are equivalent because</p>\n<ul>\n<li>Python implicitly returns <inline-code>None</inline-code> for a function that does not  use a return statement</li>\n<li>if the <inline-code>return</inline-code> statement is used without a value, <inline-code>None</inline-code> is returned.</li>\n</ul>\n<div class=\"flex ml-3 w130\"><python>def display_greeting():\n    print(\"+------------+\")\n    print(\"|  Welcome!  |\")\n    print(\"+------------+\")\n</python><python>def display_greeting():\n    print(\"+------------+\")\n    print(\"|  Welcome!  |\")\n    print(\"+------------+\")\n    return\n</python><python>def display_greeting():\n    print(\"+------------+\")\n    print(\"|  Welcome!  |\")\n    print(\"+------------+\")\n    return None\n</python></div>\n<h2>Controlling the flow of execution with <inline-code>return</inline-code> statement</h2>\n<p>As we have seen, <inline-code>return</inline-code> statement allows us to return a value from a function back to the code that calls the function.</p>\n<p>But at the same time return statement also ends execution of the function.<br>\nWhen return statement is executed, no further code in the function gets executed.</p>\n<div class=\"flex\" style=\"width:100%;\"><python>def display(message):\n    print(\"***** \" + message + \" *****\")\n    return\n    print(\"This will never be displayed\")\n    \n    \ndisplay(\"hello\")\n</python><output>***** hello *****\n</output></div>\n<p>This is very useful when using loops.</p>\n<p>For example, using return statements in a function, we can further simplify the prime number example:</p>\n<div class=\"flex\" style=\"width:80%;\"><python>def is_prime(num):\n    if num &#x3C; 2:\n        return False\n\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n\n    return True\n\n\nprint(is_prime(7))\nprint(is_prime(9))\n</python><output>True\nFalse\n</output></div>\n<p><b>Important</b>: we must make sure that all branches/cases in the function return a value.<br>\nIn above example, if we forget the last return statement in the function, <inline-code>return None</inline-code> will happen implicitly, which would be incorrect.</p>\n<p>We can rewrite the solution for homopolymer problem using a function <inline-code>is_homopolymer</inline-code> that takes a string as an argument and returns <inline-code>True</inline-code> if the string is homopolymer, <inline-code>False</inline-code> otherwise.</p>\n<python>def is_homopolymer(seq):\n    for i in range(len(seq)):\n        if seq[i] != seq[0]:\n            return False\n\n    return True\n\nprint(is_homopolymer(\"GGGGGG\"))\nprint(is_homopolymer(\"GGGGAG\"))\n</python>\n<h1>Nested Loops</h1>\n<p>We can have a for/while loop inside other for/while loops.</p>\n<p>This is useful when we have two sequences and we need all combinations/pairs of items from the sequences.</p>\n<h3>Example 1</h3>\n<p>Write a program that prints all pairs of numbers that sum to <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>7</mn></mrow><annotation encoding=\"application/x-tex\">7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">7</span></span></span></span></span> when two six-sided dice are rolled.</p>\n<div class=\"flex\" style=\"width:80%;\"><python># outer loop for first die d1:\nfor d1 in range(1, 7):  \n    # inner loop for second die d2\n    for d2 in range(1, 7):\n        if d1 + d2 == 7:\n            print(d1, d2)\n</python><output>1 6\n2 5\n3 4\n4 3\n5 2\n6 1\n</output></div>\n<h3>Example 2</h3>\n<p>Write a program that takes two string—one with consonants and other with vowels—and combines each consonant with every vowel to print a syllable.</p>\n<div class=\"flex\" style=\"width:100%;\"><python>consonants = \"bdfghjklmn\"\nvowels = \"aeiou\"\n\nfor i in range(len(consonants)):\n    for j in range(len(vowels)):\n        syllable = consonants[i] + vowels[j]\n        print(syllable, end=\" \")\n    print()  # to start printing from next line\n\n</python><output>ba be bi bo bu \nda de di do du \nfa fe fi fo fu \nga ge gi go gu \nha he hi ho hu \nja je ji jo ju \nka ke ki ko ku \nla le li lo lu \nma me mi mo mu \nna ne ni no nu\n</output></div>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1><inline-code>random</inline-code> module</h1>\n<p>In Python, we can generate (pseudo)-random numbers using the <inline-code>random</inline-code> module.</p>\n<p>The module provides us with a lot of different functions but for the moment we’ll focus on the following:</p>\n<ul>\n<li><inline-code>random()</inline-code> – It returns a random float value between <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0.0</mn></mrow><annotation encoding=\"application/x-tex\">0.0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span></span></span> (inclusive) and <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1.0</mn></mrow><annotation encoding=\"application/x-tex\">1.0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span></span></span> (exclusive)</li>\n<li><inline-code>randint(x, y)</inline-code> – It returns a random int value between x and y, both included.</li>\n</ul>\n<p>Each time your execute these functions, you will get a different value, try it!</p>\n<python>import random\nprint(random.random())  # 0.12826246225939641\n\nprint(random.random())  # 0.33797149195934817\n\nprint(random.randint(1, 10))  # 9\nprint(random.randint(1, 10))  # 1\n</python>\n<h3>The seed</h3>\n<ul>\n<li>The random number generation is not truly random.</li>\n<li>It is determined by an initial value that is called the seed.</li>\n<li>By default, the seed used to generate the numbers is the current system time.\n<ul>\n<li>This means that each time we run the program, the seed will be different, and the numbers generated will also be different.</li>\n</ul>\n</li>\n<li>We can fix the seed using the function <inline-code>random.seed()</inline-code></li>\n</ul>\n<p>Run the following with the seed function call and without it (comment the line):</p>\n<python>import random\nrandom.seed(123) # Try with and without this line\ni = 0\nwhile i &#x3C; 5:\n    print(random.randint(1, 100))\n    i += 1\n</python>\n<h1><inline-code>turtle</inline-code> module</h1>\n<ul>\n<li><inline-code>turtle</inline-code> is a Python module that allows us to draw shapes using simple commands — go left/right, lift pen up, put pen down etc.</li>\n<li><inline-code>turtle</inline-code> module provides a <inline-code>Turtle</inline-code> class. We can create an object of <inline-code>Turtle</inline-code> class and call its methods to draw shapes.</li>\n</ul>\n<python>from turtle import Turtle\n\nt = Turtle()\n\nt.forward(100) # go forward 100 units\nt.right(90) # turn right by 90 degrees\nt.forward(100)\n</python>\n<python># Drawing a square\n\nfrom turtle import Turtle\n\nt = Turtle()\n\nfor i in range(4):\n    t.forward(100) # go forward 100 units\n    t.right(90) # turn right by 90 degrees\n</python>\n<python># Random drawing\n\nfrom turtle import Turtle\nfrom random import randint\n\nt = Turtle()\n\nfor i in range(100):\n    # turn left if random number is even\n    if randint(1, 2) == 1:\n        t.left(90)\n    else:\n        t.right(90)\n\n    t.forward(30)\n</python>\n<python># Drawing using coordinates\n\nfrom turtle import Turtle\n\nt = Turtle()\n\nt.goto(150, 150) \nt.goto(150, 0)\nt.goto(0, 0)\nt.goto(-150, 0)\nt.goto(150, 150)\n</python>\n<python># Drawing a sine curve\n\nfrom turtle import Turtle\nfrom math import sin, pi\n\nt = Turtle()\n\nx = 0\nscale = 50\ndx = 1  # Make this smaller for smoother curve\nwhile x &#x3C; 2 * pi:\n    t.goto(scale * x, scale * sin(x))\n    x = x + dx\n\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}