{"pageProps":{"titles":["Week 1 — Computer and Programming Basics","Week 2 — Types, Variables, Expressions, Functions","Sep 9-10 Problem Set 2","Week 3 —  Conditionals & Iteration","Sep 16-17 Problem Set","Week 4 —  print(), String methods, while loop","Python Style Guide","Sep 23-24 Problem Set","Week 5 —  Scope of variables, Lists & Tuples","Sep 30-Oct 1 Problem Set","Week 6 —  Immutability, Dictionary & Set","Oct 7-8 Problem Set","Week 7 —  Nested data structures, iterables, comprehensions","Week 8 —  Exceptions & File IO","Oct 21-22 Problem Set","Week 9 — Object oriented programming","Oct 28-29 — Problem Set","Week 10 — NumPy & Matplotlib","Nov 4-5 More on NumPy & Problems","Week 11 — Roots, Interpolation, Curve fitting","Week 12 — System of linear equations, Numerical Integration","Nov 18-19 — NumPy & Problem Set"],"slugs":["Lecture-1.2","Lecture-week2","_Sep09-problem-set","Lecture-week3","_Sep16-17-problem-set","Lecture-week4","style-guide","_Sep23-24-problem-set","Lecture-week5","_Sep30-Oct1-problem-set","Lecture-week6","_Oct7-8-problem-set","Lecture-week7","Lecture-week8","_Oct21-22_problem-set","Lecture-week9","_Oct28-29_problem-set","Lecture-week10","_Nov4-5_problem-set","Lecture-week11","Lecture-week12","_Nov18-19_problem-set"],"post":{"title":"Nov 18-19 — NumPy & Problem Set","slug":"_Nov18-19_problem-set","content":"<h1>Copies and views of Numpy array</h1>\n<p>When manipulating arrays, their data may or may not be copied into a new array. Let’s look at different cases.</p>\n<python>x = np.arange(12)\n\n# Just a new name, no data is copied\ny = x\n\nprint(x)  # [ 0  1  2  3  4  5  6  7  8  9 10 11]\nprint(y)  # [ 0  1  2  3  4  5  6  7  8  9 10 11]\nprint(x is y) # True, as they are same objects\n</python>\n<p>When we <b>index or slice</b> a numpy array, the resulting array <b>shares same data</b> i.e. the result array is a <sc>view</sc> for the original array.</p>\n<python>x = np.arange(1, 13).reshape((3, 4))\nprint(x)\n# [[ 1  2  3  4]\n#  [ 5  6  7  8]\n#  [ 9 10 11 12]]\n\ny = x[:, 1:3]  # x and y share same data\nprint(y)\n# [[ 2  3]\n#  [ 6  7]\n#  [10 11]]\n\ny[0, 0] = 123  # Changing the shared data\nprint(x)\n# [[  1 123   3   4]\n#  [  5   6   7   8]\n#  [  9  10  11  12]]\n\nprint(y)\n# [[123   3]\n#  [  6   7]\n#  [ 10  11]]\n</python>\n<p><inline-code>copy()</inline-code> method of a numpy array can be used to create a new array which <b>does not share data</b> with the original array.</p>\n<python>x = np.arange(1, 13).reshape((3, 4))\nprint(x)\n# [[ 1  2  3  4]\n#  [ 5  6  7  8]\n#  [ 9 10 11 12]]\n\ny = x[:, 1:3].copy()\nprint(y)\n# [[ 2  3]\n#  [ 6  7]\n#  [10 11]]\n\ny[0, 0] = 123  # Changes the copy only\nprint(y)\n# [[123   3]\n#  [  6   7]\n#  [ 10  11]]\n\nprint(x)\n# [[ 1  2  3  4]\n#  [ 5  6  7  8]\n#  [ 9 10 11 12]]\n</python>\n<h1>Polynomial Interpolation using SciPy</h1>\n<p>We can use <inline-code>lagrange</inline-code> function from <inline-code>scipy.interpolate</inline-code> module to obtain Lagrange polynomial that interpolates given data points.</p>\n<python>import numpy as np\nfrom scipy.interpolate import lagrange\n\nxdata = np.array([0, 1, 2])\nydata = np.array([0, 1, 8])\n\npoly = lagrange(xdata, ydata)\nprint(poly)  # Display polynomial\n\n# Coefficients of terms x^0, x^1, x^2\nprint(\"Coefficients: \", poly[0], poly[1], poly[2])\n\n# evaluate polynomial at x \nx = 10\nprint(poly[0] + poly[1] * x + poly[2] * x ** 2)\n</python>\n<h2>Questions</h2>\n<p><span style=\"margin-left: -1em;\"><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1.</mn></mrow><annotation encoding=\"application/x-tex\">1.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">.</span></span></span></span></span></span> Find the polynomial interpolation for the data points <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>6</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>8</mn><mo separator=\"true\">,</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(0,6), (3,1), (8,2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">6</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">8</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span></span>. Verify the expected result by plotting the data points and interpolation function.</p>\n<p>Expected plot:</p>\n<img src=\"Nov18-19/q1.png\" style=\"width: 70%;  margin: 1em 0 0 1em;\">\n<python>import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.interpolate import lagrange\n\nxdata = np.array([0, 3, 8])\nydata = np.array([6, 1, 2])\n</python>\n<solution><python>import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.interpolate import lagrange\n\nxdata = np.array([0, 3, 8])\nydata = np.array([6, 1, 2])\npoly = lagrange(xdata, ydata)\n\nx = np.linspace(-1, 9, 50)\ny = poly[0] + poly[1] * x + poly[2] * x ** 2\n\nplt.plot(xdata, ydata, \"ro\")  # red circle\nplt.plot(x, y)\nplt.show()\n</python></solution>\n<p><span style=\"margin-left: -1em;\"><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2.</mn></mrow><annotation encoding=\"application/x-tex\">2.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">.</span></span></span></span></span></span> Find and plot interpolation polynomial for data points with <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>=</mo><mn>0</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><mn>9</mn></mrow><annotation encoding=\"application/x-tex\">x_i = 0, ..., 9</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">9</span></span></span></span></span>, and <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>10</mn></mrow><annotation encoding=\"application/x-tex\">10</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span></span></span></span></span> random integers sampled from <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>10</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">[0,10)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span></span> as y-values.</p>\n<solution><python>import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.interpolate import lagrange\n\nN = 10\nxdata = np.arange(0, N)\nydata = np.random.randint(0, 10, N)\npoly = lagrange(xdata, ydata)\n\nx = np.linspace(0, N - 1, 200)\ny = sum([poly[k] * x ** k for k in range(0, N)])\n\nplt.plot(xdata, ydata, \"ro\")\nplt.plot(x, y)\nplt.show()\n</python></solution>\n<h1>Linear Regression using SciPy</h1>\n<ul>\n<li>\n<p>Real-life data is usually very noisy and interpolation is not the best tool to fit a curve to data.</p>\n</li>\n<li>\n<p>Instead we would want to use a polynomial with smaller degree (e.g. a line) and fit it as best we can without interpolating the points.</p>\n</li>\n<li>\n<p>Let’s do an example with some random data. We build a set of random points based on the model <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>=</mo><msub><mi>a</mi><mn>0</mn></msub><mo>+</mo><msub><mi>a</mi><mn>1</mn></msub><mi>x</mi><mo>+</mo><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">y = a_0 + a_1 x + e</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span></span></span></span></span> for <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mn>0</mn></msub><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">a_0 = 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span></span> and <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo>=</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">a_1 = 3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span></span>.</p>\n<ul>\n<li>Here term <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">e</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span></span></span></span></span> represents some random noise which we model using the <i>normal distribution</i>.</li>\n<li>We can generate random numbers sampled from the standard normal distribution using the NumPy function <inline-code>numpy.random.randn</inline-code>.</li>\n</ul>\n</li>\n</ul>\n<python>import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import linregress\n\na0, a1 = 2, 3\nN = 100  # number of points to sample\n\nxdata = np.random.rand(N)  # N numbers in [0, 1)\nnoise = 0.1 * np.random.randn(N)  # small random noise\nydata = a0 + a1*xdata + noise\n\nline = linregress(xdata, ydata)\nx = np.linspace(0,1,10)\ny = line.slope * x + line.intercept\n\nplt.scatter(xdata, ydata)\nplt.plot(x, y,'r')\nplt.show() \n</python>\n<h2>Questions</h2>\n<p>Let’s work with some real data. A famous Basketball player played from 2006 to 2016.<br>\nWe are given the total games played per year and points per game for these years:</p>\n<python>years = np.array([2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2015, 2016])\ngames_per_year = np.array([80, 77, 82, 82, 73, 82, 58, 78, 35, 66])\npoints_per_game = np.array([35.4, 31.6, 28.3, 26.8, 27, 25.3, 27.9, 27.3, 22.3, 17.6])\n</python>\n<p><span style=\"margin-left: -1em;\"><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1.</mn></mrow><annotation encoding=\"application/x-tex\">1.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">.</span></span></span></span></span></span> Compute the linear model for points_per_game vs years and plot data points as well as the regression lines.</p>\n<solution><python>import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import linregress\n\n\nyears = np.array([2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2015, 2016])\ngames_per_year = np.array([80, 77, 82, 82, 73, 82, 58, 78, 35, 66])\npoints_per_game = np.array([35.4, 31.6, 28.3, 26.8, 27, 25.3, 27.9, 27.3, 22.3, 17.6])\n\nline = linregress(years, points_per_game)\ny = line.slope * years + line.intercept\n\nplt.plot(years, points_per_game, \"ro\")  # data points\nplt.plot(years, y)  # regression line\nplt.show()\n</python></solution>\n<p><span style=\"margin-left: -1em;\"><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2.</mn></mrow><annotation encoding=\"application/x-tex\">2.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">.</span></span></span></span></span></span>  For the years 2006 to 2016 the player had 33643 total points. Which year in future he would have passed the record 38387 points?</p>\n<ul>\n<li>Suppose <inline-code>future_years</inline-code> are: <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2017</mn><mo separator=\"true\">,</mo><mn>2018</mn><mo separator=\"true\">,</mo><mn>2019</mn><mo separator=\"true\">,</mo><mn>2020</mn><mo separator=\"true\">,</mo><mn>2021</mn></mrow><annotation encoding=\"application/x-tex\">2017,2018,2019,2020,2021</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mord\">7</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mord\">8</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mord\">9</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mord\">1</span></span></span></span></span></li>\n<li>Use the regression line computer in question above to compute <inline-code>future_points_per_game</inline-code> using <inline-code>future_years</inline-code>.</li>\n<li>Compute <inline-code>future_points_per_year</inline-code> using average <inline-code>games_per_year</inline-code></li>\n<li>Compute total points (cumulative sum of points) until each future year.</li>\n<li>Find for which year total points > <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>38387</mn></mrow><annotation encoding=\"application/x-tex\">38387</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mord\">8</span><span class=\"mord\">3</span><span class=\"mord\">8</span><span class=\"mord\">7</span></span></span></span></span>.</li>\n</ul>\n<solution><python>import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import linregress\n\n\nyears = np.array([2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2015, 2016])\ngames_per_year = np.array([80, 77, 82, 82, 73, 82, 58, 78, 35, 66])\npoints_per_game = np.array([35.4, 31.6, 28.3, 26.8, 27, 25.3, 27.9, 27.3, 22.3, 17.6])\n\nline = linregress(years, points_per_game)\ny = line.slope * years + line.intercept\n\nfuture_years = np.array([2017,2018,2019,2020,2021])\nfuture_points_per_game = line.slope * future_years + line.intercept\nfuture_points_per_year = future_points_per_game * np.mean(games_per_year)\n\ntotal_points = 33643 + np.cumsum(future_points_per_year)\nprint(future_years[total_points > 38387])  # [2020 2021]\n\n# Answer is 2020\n</python></solution>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}