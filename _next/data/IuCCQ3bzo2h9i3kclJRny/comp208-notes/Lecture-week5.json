{"pageProps":{"titles":["Week 1 — Computer and Programming Basics","Week 2 — Types, Variables, Expressions, Functions","Sep 9-10 Problem Set 2","Week 3 —  Conditionals & Iteration","Sep 16-17 Problem Set","Week 4 —  print(), String methods, while loop","Python Style Guide","Sep 23-24 Problem Set","Week 5 —  Scope of variables, Lists & Tuples","Sep 30-Oct 1 Problem Set","Week 6 —  Immutability, Dictionary & Set","Oct 7-8 Problem Set","Week 7 —  Nested data structures, iterables, comprehensions","Week 8 —  Exceptions & File IO","Oct 21-22 Problem Set","Week 9 — Object oriented programming","Oct 28-29 — Problem Set","Week 10 — NumPy & Matplotlib"],"slugs":["Lecture-1.2","Lecture-week2","_Sep09-problem-set","Lecture-week3","_Sep16-17-problem-set","Lecture-week4","style-guide","_Sep23-24-problem-set","Lecture-week5","_Sep30-Oct1-problem-set","Lecture-week6","_Oct7-8-problem-set","Lecture-week7","Lecture-week8","_Oct21-22_problem-set","Lecture-week9","_Oct28-29_problem-set","Lecture-week10"],"post":{"title":"Week 5 —  Scope of variables, Lists & Tuples","slug":"Lecture-week5","content":"<h1>Scope of variables</h1>\n<ul>\n<li>A variable name only exists inside the body of the function in which it is created.\n<ul>\n<li>It does not exist outside the function or in any other functions.</li>\n</ul>\n</li>\n<li>The <sc>scope</sc> of a variable consists of parts of the program where the variable name exists and can be used.</li>\n</ul>\n<div class=\"flex w120 ml-2\"><python>def f():\n    x = 3\n    print(\"Inside f(), x =\", x)\n    \nf()\nprint(x)\n</python><output>Inside f(), x = 3\nTraceback (most recent call last):\n  File \"myprogram.py\", line 6, in &#x3C;module>\n    print(x)\nNameError: name 'x' is not defined\n</output></div>\n<p>A variable created inside a function is called a <sc>local variable</sc>.</p>\n<p>A variable created outside any function is called a <sc>global variable</sc>.</p>\n<div class=\"flex w120 ml-2\"><python>def f():\n    x = 3  # local variable\n    print(\"Inside f(), x =\", x)  # local x is used!\n\n\nx = 100  # global variable\nf()\nprint(x)\n</python><output>Inside f(), x = 3\n100\n</output></div>\n<ul>\n<li>As we saw above, it is possible to create a local variable with the same name as a global variable.</li>\n<li>These are considered two different variables, and inside the function only the local one will be used.</li>\n</ul>\n<div class=\"flex w120 ml-2\"><python>def f():\n    print(\"Inside f(), x =\", x)  # global x is used!\n\n\nx = 100  # global variable\nf()\nprint(x)\n</python><output>Inside f(), x = 100\n100\n</output></div>\n<h3>How variable name is looked up?</h3>\n<ul>\n<li>Inside a function, when a name is used:\n<ul>\n<li>First, name is searched within the function (local scope) to see if it exists.</li>\n<li>If name is not found in the function, it is searched globally</li>\n</ul>\n</li>\n<li>Outside a function, name is simply searched globally</li>\n</ul>\n<div class=\"p2 bggreen\"><p>What will be printed in each case?</p><div class=\"flex\"><python>def f():\n    y = 5\n    print(x)\n\nx = 10\nf()\n</python><python>def f():\n    x = 5 \n    print(x)\n\nx = 10\nf()\n</python><python>def f():\n    x = 5 \n    print(x)\n\nx = 10\nf()\nprint(x)\n</python></div><solution><div class=\"flex\"><output>10\n</output><output>5\n</output><output>5\n10\n</output></div></solution></div>\n<h3>Function arguments are also local variables inside a function.</h3>\n<div class=\"py2 flex w130 ml-2\"><div class=\"flexc\"><python>def f(x):\n    print(\"In f():\", x)\n\nx = 10\nf(123)\nprint(x)\n</python><output>In f(): 123\n10\n</output></div><div class=\"flexc\"><python>def f(x):\n    x = 3\n    print(\"In f():\", x)\n\nx = 10\nf(123)\nprint(x)\n</python><output>In f(): 3\n10\n</output></div><div class=\"flexc\"><python>def f(x):\n    print(\"In f():\", x, y)\n\ny = 10\nf(123)\nprint(y)\n</python><output>In f(): 123 10\n10\n</output></div></div>\n<h3>Best Practice</h3>\n<ul>\n<li>Avoid using global variables within functions; it makes your program confusing.\n<ul>\n<li>It is okay to use variables that don’t change (e.g. constants such as <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span></span>)</li>\n<li>It is also okay to use modules inside functions</li>\n</ul>\n</li>\n<li>In general, it is bad thing to change the value of a global variable from within a function. (We will not learn how to do this.)</li>\n</ul>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>Lists</h1>\n<ul>\n<li>A list is like a container that holds a sequence of arbitrary objects.</li>\n<li>Objects in a list are called <sc>elements</sc>.</li>\n<li>Lists are ordered! The order in which the elements are stored in the list matters.</li>\n<li>Each element is associated to an index (index <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></span>: first element, index <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></span>: second element, etc.)</li>\n</ul>\n<h2>Creating a list</h2>\n<python># A list is created using square brackets, \n# with each element separated by a comma.\nprime_numbers = [2, 3, 5, 7, 11, 13]\nprint(prime_numbers)\n# [2, 3, 5, 7, 11, 13]\n\nprint(type(prime_numbers))\n# &#x3C;class 'list'>\n</python>\n<p>A list can contain elements of any type. For example we can have a list of strings:</p>\n<python>days = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\n\n# Number of elements in the list\nprint(len(days))  # 7\n\nempty_list = []\nprint(len(empty_list))  # 0\n</python>\n<p>A list can contain any number of elements, from zero to as many as the computer’s memory allows.</p>\n<p>A list can contains objects of different types.</p>\n<python># list with mixed types\nnumbers = [1, 'two', 3.75]\n</python>\n<p>Elements of a list don’t need to be unique.</p>\n<python># list with duplicate values\nnumbers = [5, \"five\", 5]\n</python>\n<h3>Why use a list?</h3>\n<python># Suppose we want to store grades for multiple students\n\ngrades1 = 80\ngrades2 = 100\ngrades3 = 65\n# ...\n# How many variables?!!\n\n# Use just one variable name \"grades\"\ngrades = [80, 100, 65]\n</python>\n<h2>Indexing a list</h2>\n<p>We can access an element inside a list using indexing (square brackets), just as we did for strings.</p>\n<python>days = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\nfirst_day = days[0]\nsecond_day = days[1]\nlast_day = days[6]\nprint(first_day, second_day, last_day)  # Mon Tue Sun\n\n# No element at index 7\nprint(days[7])  \n# IndexError: list index out of range\n\nnumbers = [1, 'two', 3.75]\nprint(numbers[0] + numbers[2])  # 4.75\n\nprint(numbers[0] + numbers[1])\n# TypeError: unsupported operand type(s) for +: 'int' and 'str'\n</python>\n<h2>Slicing a list</h2>\n<p>Similar to strings, we can also get a sub-list — parts of a list — using slice notation.</p>\n<python>days = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\nprint(days[2:5])\n# ['Wed', 'Thu', 'Fri']\n\nprint(days[:6:2])\n# ['Mon', 'Wed', 'Fri']\n\n# Makes a copy of the list\nprint(days[:])\n# ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n\n# Makes a reversed copy of the list\nprint(days[::-1])\n# ['Sun', 'Sat', 'Fri', 'Thu', 'Wed', 'Tue', 'Mon']\n</python>\n<h2>Concatenation (+) and Replication (*)</h2>\n<p>The operators <inline-code>+</inline-code> and <inline-code>*</inline-code> work for lists as they worked for a string:</p>\n<python># lists a and b are joined to produce a third list c:\na = [1, 2]\nb = [10, 11, 12]\nc = a + b\nprint(c)\n# [1, 2, 10, 11, 12]\n\na = [1, 2]\n# resulting list consists of repeated elements of list a:\nc = a * 3 \nprint(c)\n# [1, 2, 1, 2, 1, 2]\n</python>\n<h2>membership operators: <inline-code>in</inline-code> and <inline-code>not in</inline-code></h2>\n<p>The <inline-code>in</inline-code> and <inline-code>not in</inline-code> operators test for membership.</p>\n<p>We can use them to test if an object is an element of a list.</p>\n<python>a = [1, 2]\nb = [10, 11, 12]\nprint(1 in a)  # True\nprint(11 in a) # False\nprint(5 not in b) # True\n\nx = 3.14\nprint(x in a or x in b)  # False\n</python>\n<p>These operators very useful in simplifying code:</p>\n<div class=\"flex\"><python># Instead of long conditions like this:\nif x == 5 or x == 7 or x == 10:\n    # do something\n</python><python># Now we can do:\nif x in [5, 7, 10]:\n    # do something\n</python></div>\n<div class=\"p2 my2 bggreen\"><p><sc>Example</sc></p><p>We can use a list to store assignment grades:</p><python>grades = [85, 78.5, 98, 75, 100]\n\n# print average grade\n</python><p>Write code to print the average grade.</p><solution><python>grades = [85, 78.5, 98, 75, 100]\ntotal = grades[0] + grades[1] + grades[2] + grades[3] + grades[4] \navg = total / 5\nprint(avg)  # prints 87.3\n</python></solution></div>\n<h2>Lists and Loops</h2>\n<p>For loops are very useful for looping through all the elements in an list.\nFor instance we could use a for loop to compute the sum of all the elements in the list grades:</p>\n<python>grades = [85, 78.5, 98, 75, 100]\n\ntotal = 0\nfor i in range(5):\n   total += grades[i]\n\navg = total / 5\nprint(avg) # prints 87.3\n</python>\n<p>Above code can be generalized!</p>\n<python>grades = [85, 78.5, 98, 75, 100]\n\ntotal = 0\nN = len(grades)  # Number of elements in grades list\nfor i in range(N):\n   total += grades[i]\n\navg = total / N\nprint(avg) # prints 87.3\n</python>\n<p>Alternatively, we can avoid using an index if we don’t need to use an index in our loop:</p>\n<python>grades = [85, 78.5, 98, 75, 100]\n\ntotal = 0\nN = len(grades)  # Number of elements in grades list\nfor g in grades:\n   total += g\n\navg = total / N\nprint(avg) # # prints 87.3\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>Modifying the content of a list</h1>\n<p>We can modify the content of a list after it has been created.</p>\n<p>We can change a single element using its index and the assignment operator.</p>\n<python>days = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\ndays[0] = \"Sun\"\nprint(days)\n# ['Sun', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n\ndays[7] = \"No such day\"\n# IndexError: list assignment index out of range\n</python>\n<h2>Updating contiguous elements</h2>\n<p>We can modify several contiguous elements using slice assignment.\nThe syntax of the slice assignment is as follow:</p>\n<pre><code>list_object[start:stop:step] = iterable\n</code></pre>\n<p>For now, think of <inline-code>iterable</inline-code> to be a sequence such as a list or a string.</p>\n<p>Examples:</p>\n<python>days = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\nprint(days[1:3])\n# ['Tue', 'Wed']\n\ndays[1:3] = [5, 8]\nprint(days)\n# ['Mon', 5, 8, 'Thu', 'Fri', 'Sat', 'Sun']\n\nprint(days[1::2])\n# [5, 'Thu', 'Sat']\n\ndays[1::2] = [\"\", \"\", \"\"]\nprint(days)\n# ['Mon', '', 8, '', 'Fri', '', 'Sun']\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>List functions and methods</h1>\n<h2>Built-in functions that work with list objects</h2>\n<python>grades = [85, 78.5, 98, 75, 100]\n\n# len(x): \n#   Returns the number of elements in the list x.\nprint(len(grades))  # 5\n\n# sum(x): \n#   Returns the sum of all the numbers in list x.\n#   A TypeError occurs when some element is not a number.\nprint(sum(grades))  # 436.5\n\n# min(x) / max(x) : \n#   Returns the smallest/largest element in the list x.\n#   A TypeError occurs if the elements cannot be compared.\nprint(min(grades))  # 75\n\nprint(max(grades))  # 100\n\nprint(min([\"apple\", 3, 1234]))\n# TypeError: '&#x3C;' not supported between instances of 'int' and 'str'\n\n# sorted(x): \n#   Creates and returns a new list which is a sorted version of the list x. \n#   The sorting is done in ascending order.\n#   If any elements cannnot be compared to each other, TypeError occurs.\nnumbers = [10, 5, 20, 3]\nsorted_list = sorted(numbers)\nprint(sorted_list)\n# [3, 5, 10, 20]\nprint(numbers)\n# [10, 5, 20, 3]\n\n\nfruits = [\"banana\", \"orange\", \"apple\"]\nsorted_list = sorted(fruits)\nprint(sorted_list)\n# ['apple', 'banana', 'orange']\nprint(fruits)\n# ['banana', 'orange', 'apple']\n\nmy_list = [10, 5, 20, 3, \"apple\"]\nsorted_list = sorted(my_list)\n# TypeError: '&#x3C;' not supported between instances of 'str' and 'int'\n</python>\n<h2>List methods</h2>\n<p>Python has several methods that we can call on a list object:</p>\n<python># list.append(x): \n#   Adds the element x to the end of the list.\ngrades = [60, 85, 90.5]\ngrades.append(100)\nprint(grades)\n# [60, 85, 90.5, 100]\n\ngrades.append(\"apple\")\nprint(grades)\n# [60, 85, 90.5, 100, 'apple']\n\ngrades.append(False)\nprint(grades)\n# [60, 85, 90.5, 100, 'apple', False]\n\n\n# list.insert(i, x): \n#   Adds the element x to the list at index i\ngrades = [60, 85, 90.5]\ngrades.insert(0, 100)\nprint(grades)\n# [100, 60, 85, 90.5]\n\n# insert works even when index is greater than length of list\ngrades = [60, 85, 90.5]\ngrades.insert(3, \"apple\")\nprint(grades)\n# [60, 85, 90.5, 'apple']\n\n# Same here, inserts at the end\ngrades = [60, 85, 90.5]\ngrades.insert(4, 100)\nprint(grades)\n# [60, 85, 90.5, 100]\n\n\n# list.remove(x): \n#   Removes the first occurrence of the element x in the list. \n#   A ValueError occurs if there is no such element.\nmy_list = [5, \"hello\", 5, 3.14]\nmy_list.remove(5)\nprint(my_list)\n# ['hello', 5, 3.14]\n\nmy_list.remove(5)\nprint(my_list)\n# ['hello', 3.14]\n\nmy_list.remove(\"hello\")\nprint(my_list)\n# [3.14]\n\nmy_list.remove(5)\n# ValueError: list.remove(x): x not in list\n\n\n# list.pop(i): \n#   Removes and returns element at index i \n# list.pop(): \n#   Removes and returns the last element from the list\nmy_list = [5, \"hello\", 5, 3.14]\nlast_item = my_list.pop()\nprint(last_item) \n# 3.14\n\nprint(my_list)\n# [5, 'hello', 5]\n\nsecond_item = my_list.pop(1)\nprint(second_item)\n# hello\nprint(my_list)\n# [5, 5]\n\n\n# list.count(x) : \n#   Returns the number of occurrences of the element x. \nletter_grades = [\"A\", \"B+\", \"A-\", \"B\", \"A\", \"A\"]\nprint(letter_grades.count(\"A\"))  # 3\nprint(letter_grades.count(\"C\"))  # 0\n\n# list.index(x) : \n#   Returns the index of the first occurrence of \n#   the element x in the list. \n#   A ValueError occurs if the element x is not found in the list.\nnames = [\"Khalid\", \"Reza\", \"Deven\"]\nprint(names.index(\"Reza\"))  # 1\n\nprint(names.index(\"apple\"))\n# ValueError: 'apple' is not in list\n\n# list.sort() : \n#   Sorts the list in-place — this means that the list will be modified.\n#   Returns None.\n#   The list is sorted in ascending order.\ngrades = [100, 85, 90.5]\ngrades.sort()\nprint(grades)\n# [85, 90.5, 100]\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>Nested Lists</h1>\n<p>An element of a list can be another list!<br>\nSuch lists are called <sc>nested</sc> lists.</p>\n<python>nested_list = [[1], [1, 2, 3], [1, 2]]\nprint(type(nested_list))\n# &#x3C;class 'list'>\n\nprint(nested_list[0])\n# [1]\nprint(nested_list[1])\n# [1, 2, 3]\nprint(nested_list[2])\n# [1, 2]\n\nprint(type(nested_list[0]), type(nested_list[1]), type(nested_list[2]))\n# &#x3C;class 'list'> &#x3C;class 'list'> &#x3C;class 'list'>\n</python>\n<p>Nested lists are useful to store data which come in form of a table or spreadsheet.</p>\n<python>#                   Name,   A1,  A2, A3\nstudent_grades = [[\"Khalid\", 90, 95, 100], # Student 1\n                  [\"Reza\", 85, 90, 98], # Student 2\n                  [\"Deven\", 70, 75, 80]] # Student 3\n</python>\n<p>We can perform same operations on nested lists as we saw earlier: indexing, slicing, etc.</p>\n<python>student_grades = [[\"Khalid\", 90, 95, 100],\n                  [\"Reza\", 85, 90, 98],\n                  [\"Deven\", 70, 75, 80]]\n\n# Print name of 2nd student\nprint(student_grades[1][0]) \n# Reza\n\n# Change A2 grade for Reza\nstudent_grades[1][2] = 100\nprint(student_grades)\n# [['Khalid', 90, 95, 100], ['Reza', 85, 100, 98], ['Deven', 70, 75, 80]]\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>Lists and Strings</h1>\n<p>There are built-in functions and string methods that allows us to transform strings to/from lists.</p>\n<python># list(seq): built-in function which converts a sequence (such as\n#   a string or a list) into a list\nfruits = \"apple\"\nletters = list(fruits)\nprint(letters)\n# ['a', 'p', 'p', 'l', 'e']\n\n\n# s.split(sep): Breaks the string s using the separator string sep\n#   and returns a list of strings containing the separated parts\n# s.split(): same as above but using whitespace \n#   (spaces, tab character and newline ) as separator\n# s.splitlines(): Breaks a multi-lines strings into separate lines\n#   and returns a list containing those lines.\ndata = \"Khalid Reza Deven\"\nnames = data.split()\nprint(names)\n# ['Khalid', 'Reza', 'Deven']\n\n# Multiple spaces are also removed\ndata = \"Khalid    Reza     Deven\"\nnames = data.split()\nprint(names)\n# ['Khalid', 'Reza', 'Deven']\n\ndata = \"Khalid\\tReza\\tDeven\" # separated by tab\nnames = data.split()\nprint(names)\n# ['Khalid', 'Reza', 'Deven']\n\ndata = \"\"\"Khalid\nReza\nDeven Parekh\"\"\"\nnames = data.split()\nprint(names)\n# ['Khalid', 'Reza', 'Deven', 'Parekh']\n\n# Split by line (newline character)\ndata = \"\"\"Khalid\nReza\nDeven Parekh\"\"\"\nnames = data.splitlines()\nprint(names)\n# ['Khalid', 'Reza', 'Deven Parekh']\n\ndata = \"Khalid,Reza,Deven\"\nnames = data.split(\",\")\nprint(names)\n# ['Khalid', 'Reza', 'Deven']\n\ndata = \"Khalid,  Reza,  Deven\"\nnames = data.split(\",\")\nprint(names)\n# ['Khalid', '  Reza', '  Deven']  # notice space in strings\n\n\n# sep.join(L): joins all the strings in the list L using the string sep\n#   Returns the joined string.\nnames = ['Khalid', 'Reza', 'Deven']\njoined = \" \".join(names)\nprint(joined)\n# Khalid Reza Deven\n\n# a comma\njoined = \",\".join(names)\nprint(joined)\n# Khalid,Reza,Deven\n\n# a comma and a space\njoined = \", \".join(names)\nprint(joined)\n# Khalid, Reza, Deven\n\n# empty string, no separator\nletters = [\"a\", \"p\", \"p\", \"l\", \"e\"]\njoined = \"\".join(letters)\nprint(joined)\n# apple\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>Tuples</h1>\n<ul>\n<li>A tuple is an ordered collection of objects, like lists.</li>\n<li>A tuple is <i>immutable</i>. A tuple object cannot change after it is created.</li>\n<li>We create a tuple using parentheses <inline-code>()</inline-code> instead of square brackets <inline-code>[]</inline-code>.</li>\n</ul>\n<python>tup = (1, 2, 3)\nprint(type(tup))\n# &#x3C;class 'tuple'>\n\n# tuple with only one element\ntup = (10,)  # comma is required!\nprint(tup, type(tup))\n# (10,) &#x3C;class 'tuple'>\n</python>\n<p>We can use <inline-code>tuple</inline-code> function to convert other sequences such as lists and strings into a tuple.</p>\n<python>word = \"apple\"\ntup = tuple(word)\nprint(tup)\n# ('a', 'p', 'p', 'l', 'e')\n\nprimes = [2, 3, 5, 7]\nprimes = tuple(primes)\nprint(primes)\n# (2, 3, 5, 7)\n</python>\n<h2>Tuples are immutable</h2>\n<p>Elements cannot be added, removed or changed in a tuple.</p>\n<p>Therefore, unlike lists, none of the operations that modify a tuple are allowed.</p>\n<python>x = (1, 1, 2, 3, 5, 8)\nx[3] = 100\n# TypeError: 'tuple' object does not support item assignment\n\nx[:2] = (11, 12)\n# TypeError: 'tuple' object does not support item assignment\n</python>\n<p>In general, operations that do not modify a tuple are available.</p>\n<python>tup = (45, 23, 'abc') \n\n# Indexing and slicing work the same way as lists.\nprint(tup[1])\n# 23\nprint(tup[1:])\n# (23, 'abc')\n\nprint(len(tup))  # number of elements in a tuple\n# 3\n\n# Similary min(), max(), and sum() functions work with tuples\n\n# Following methods are available for tuples\nprint(tup.index(\"abc\"))\n# 2\nprint(tup.count(23))\n# 1\n</python>\n<p>Since a tuple is a sequence, we can use it in a for loop just like a list:</p>\n<python>numbers = (1, 2, 3)\n\nfor n in numbers:\n    print(n)\n\n# prints:\n# 1\n# 2\n# 3\n</python>\n<h2>Why use tuples?</h2>\n<p>If lists are more flexible than tuples, why should we use tuples?</p>\n<ul>\n<li>Immutability is useful to avoid changing data by mistake.</li>\n<li>We can use tuples as keys in a dictionary!</li>\n<li>Programs are a bit faster when working with tuples.</li>\n</ul>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}