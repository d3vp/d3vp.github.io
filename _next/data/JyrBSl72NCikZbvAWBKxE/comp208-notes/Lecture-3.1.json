{"pageProps":{"titles":["2.1 — Programming Basics","2.2 — Variables, Arithmetic & String operations","2.3 — Function Calls, Expressions","3.1 — Defining functions, Errors & Debugging","3.2 — Boolean Expressions, Comparison & Logical Operators","3.3 — Conditional execution using if statement","3.4 — for loop & String indexing, slicing","Python Style Guide","4.1 — Escape Characters & Controlling print()","4.2 — String methods & in operator","4.3 — while statement & Nested loops","4.4 — return statement & Importing modules","5.1 — Scope of Variables","5.2 — Lists & List Operations","5.3 — Lists: Functions & Methods","5.4 — Tuples"],"slugs":["Lecture-2.1","Lecture-2.2","Lecture-2.3.1","Lecture-3.1","Lecture-3.2","Lecture-3.3","Lecture-3.4","style-guide","Lecture-4.1","Lecture-4.2","Lecture-4.3","Lecture-4.4","Lecture-5.1","Lecture-5.2","Lecture-5.3","Lecture-5.4"],"post":{"title":"3.1 — Defining functions, Errors & Debugging","slug":"Lecture-3.1","content":"<h1>Types of Errors</h1>\n<p><b>Syntax Errors</b>: When syntax is incorrect such as wrong punctuations, invalid characters, missing quotes or parentheses etc.<br>\nProgram does not run at all in the case of syntax errors.</p>\n<python># The following code has Syntax error due to missing double-quotes:\nx = 5\nprint(\"Square of x is)\nprint(x ** 2)\n</python>\n<p><b>Runtime Errors</b>, also called <sc>Exceptions</sc>, occur when there is a problem in the program during execution.<br>\nAll code executes until an exception occurs.</p>\n<python># The following code produces NameError because \n# variable y was not created before it is used.\nx = 5\nprint(\"Value of x is\", x)\nprint(\"Square of x is\", y ** 2)\n</python>\n<p><b>Semantic</b> or Logic errors are said to occur when a program executes without a problem but does not produce correct output as expected.</p>\n<p><sc>Debugging</sc> is the process of finding and removing errors in a program.</p>\n<h1>Using debugging in Thonny for better understanding order of evaluation</h1>\n<p>In Thonny, we can use debugging features to understand how expressions are evaluated:</p>\n<ul>\n<li>To show variables and their values, go to menu “View -> Variables”</li>\n<li>First, run program in <i>debug mode</i> by clicking the “Debug current script” button (located next to the “Run current script” button and looks like a bug)</li>\n<li>Then, we have two options:\n<ul>\n<li>Run the program line-by-line using “Step over” button next to the “Debug” button</li>\n<li>Run program going inside each expression using “Step into” button (located next to “Step over” button)</li>\n</ul>\n</li>\n</ul>\n<p>Try the following code in Thonny and use debug:</p>\n<python>x = 7\n\n# Increment value of variable x by 1\nx = x + 1\n\n#\ny = x * x + 2 * (x + 1) + max(x + 1, 5)\n\n# Calling print() with 4 arguments\nprint(\"x =\", x, \"y =\", y)\n\n\nmessage = \"Hello\"\n\n# Calling print() with 1 argument\nprint(\"+\" + \"-\" * (len(message) + 6) + \"+\")\n\n# Calling print() with 3 arguments\nprint(\"+\", \"-\" * (len(message) + 6), \"+\")\n</python>\n<h1>Defining a function</h1>\n<p>A function is a <i>named</i> block of code that performs a task.</p>\n<p>So far we have been using (calling) functions to do specific tasks — <inline-code>print()</inline-code>, <inline-code>input()</inline-code>, etc.</p>\n<p>We can also define/create our own function:</p>\n<python>\ndef function_name(argument1, argument2, ..., argumentN):  # function header\n    # function body\n    statement1\n    statement2\n    .\n    .\n    statementN\n</python>\n<ul>\n<li>\n<p><inline-code>def</inline-code> is a Python keyword used to define functions</p>\n</li>\n<li>\n<p>Notice how statements are indented by spaces, typically 4 spaces. In Thonny, we can just use tab key once to indent by 4 spaces.</p>\n</li>\n<li>\n<p>When we define a function using <inline-code>def</inline-code> keyword:</p>\n<ul>\n<li>it is not executed.</li>\n<li>Only the function name is created, which refers to the code block inside the function.</li>\n</ul>\n</li>\n<li>\n<p>When we call a function, the code block inside the function is <i>actually</i> executed.</p>\n</li>\n</ul>\n<h2>Function with no arguments</h2>\n<p>Such functions always do the same thing each time they are executed.</p>\n<div class=\"flex\"><python># Function definition\ndef display_greeting():\n    print(\"+------------+\")\n    print(\"|  Welcome!  |\")\n    print(\"+------------+\")\n\n# Function call\ndisplay_greeting()\n\n# Call it again\ndisplay_greeting()\n</python><output>+------------+\n|  Welcome!  |\n+------------+\n+------------+\n|  Welcome!  |\n+------------+\n</output></div>\n<h2>Functions with arguments and return value</h2>\n<p>A function can return a value using <inline-code>return</inline-code> statement.</p>\n<python># Function that evaluates a polynomial\ndef f(x):\n    return x * x - x - 1\n\n# Equivalently,\n# def f(x):\n#     result = x * x - x - 1\n#     return result\n\n# Call the function f\ny = f(5)\nprint(y)  # 19\n\n# Call again with different argument\ny = f(10)\nprint(y)  # 89\n\n\n# we can have more than one argument\ndef mean(x, y):\n    return (x + y) / 2\n\n\nprint(mean(3, 4))  # 3.5\n\nprint(mean(f(5), f(10)))  # 54.0\n</python>\n<div class=\"bgred px2 py025 br5\"><p>Parentheses <inline-code>()</inline-code> are required to call a function. Omitting them is a common mistake.</p><p>When a function is called, correct number of arguments must be passed. It is an error to pass too many or too few arguments than what a function definition expects.</p></div>\n<h2>Why create our own functions?</h2>\n<ul>\n<li>Functions allow code re-use; duplication of code can be avoided.</li>\n<li>They help organize code into sections, which makes programs easier to read and understand.</li>\n<li>They make programs easier to fix.</li>\n</ul>\n<h1>Docstrings</h1>\n<p>A <sc>docstring</sc> (documentation string) is a multiline (triple-quoted) string that we write after the header of a function to explain how the function works.</p>\n<p>It is an important part of programming to write such documentation.<br>\nYou will be expected do so in your assignments.</p>\n<python>def euclidean_distance(x1, y1, x2, y2):\n    \"\"\"\n    Computes Euclidean distance between two 2D points.\n\n    Args:\n        x1: x-coordinate of first point (float) \n        y1: y-coordinate of first point (float) \n        x2: x-coordinate of second point (float) \n        y2: y-coordinate of second point (float) \n\n    Returns: the euclidean distance as a float\n    \"\"\"\n    d = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    return d ** 0.5\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}