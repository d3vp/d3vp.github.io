{"pageProps":{"titles":["2.1 — Programming Basics","2.2 — Variables, Arithmetic & String operations","2.3 — Function Calls, Expressions","3.1 — Defining functions, Errors & Debugging","3.2 — Boolean Expressions, Comparison & Logical Operators","3.3 — Conditional execution using if statement","3.4 — for loop & String indexing, slicing","Python Style Guide","4.1 — Escape Characters & Controlling print()","4.2 — String methods & in operator","4.3 — while statement & Nested loops","4.4 — return statement & Importing modules","5.1 — Scope of Variables","5.2 — Lists & List Operations","5.3 — Lists: Functions & Methods","5.4 — Tuples"],"slugs":["Lecture-2.1","Lecture-2.2","Lecture-2.3.1","Lecture-3.1","Lecture-3.2","Lecture-3.3","Lecture-3.4","style-guide","Lecture-4.1","Lecture-4.2","Lecture-4.3","Lecture-4.4","Lecture-5.1","Lecture-5.2","Lecture-5.3","Lecture-5.4"],"post":{"title":"5.3 — Lists: Functions & Methods","slug":"Lecture-5.3","content":"<h2>Built-in functions that work with lists</h2>\n<python>grades = [85, 78.5, 98, 75, 100]\n\n# len(x): \n#   Returns the number of items in the list x.\nprint(len(grades))  # 5\n\n# sum(x): \n#   Returns the sum of all the numbers in list x.\n#   A TypeError occurs when some item is not a number.\nprint(sum(grades))  # 436.5\n\n# min(x) / max(x) : \n#   Returns the smallest/largest item in the list x.\n#   A TypeError occurs if the items cannot be compared.\nprint(min(grades))  # 75\n\nprint(max(grades))  # 100\n\nprint(min([\"apple\", 3, 1234]))\n# TypeError: '&#x3C;' not supported between instances of 'int' and 'str'\n</python>\n<python># sorted(x): \n#   Creates and returns a new list which is a sorted version of the list x. \n#   The sorting is done in ascending order.\n#   If any items cannnot be compared to each other, TypeError occurs.\nnumbers = [10, 5, 20, 3]\nsorted_list = sorted(numbers)\nprint(sorted_list)\n# [3, 5, 10, 20]\nprint(numbers)\n# [10, 5, 20, 3]\n\n\nfruits = [\"banana\", \"orange\", \"apple\"]\nsorted_list = sorted(fruits)\nprint(sorted_list)\n# ['apple', 'banana', 'orange']\nprint(fruits)\n# ['banana', 'orange', 'apple']\n\nmy_list = [10, 5, 20, 3, \"apple\"]\nsorted_list = sorted(my_list)\n# TypeError: '&#x3C;' not supported between instances of 'str' and 'int'\n</python>\n<h2>List methods</h2>\n<p>Python has several methods that we can call on a list object:</p>\n<python># list.append(x): \n#   Adds the item x to the end of the list.\ngrades = [60, 85, 90.5]\ngrades.append(100)\nprint(grades)  # [60, 85, 90.5, 100]\n\ngrades.append(\"apple\")\nprint(grades)  # [60, 85, 90.5, 100, 'apple']\n\ngrades.append(False)\nprint(grades)  # [60, 85, 90.5, 100, 'apple', False]\n\n\n# list.insert(i, x): \n#   Adds the item x to the list at index i\ngrades = [60, 85, 90.5]\ngrades.insert(0, 100)\nprint(grades)  # [100, 60, 85, 90.5]\n\n# insert works even when index is greater than length of list\ngrades = [60, 85, 90.5]\ngrades.insert(3, \"apple\")\nprint(grades)  # [60, 85, 90.5, 'apple']\n</python>\n<python># list.remove(x): \n#   Removes the first occurrence of the item x in the list. \n#   A ValueError occurs if there is no such item.\nmy_list = [5, \"hello\", 5, 3.14]\nmy_list.remove(5)\nprint(my_list)  # ['hello', 5, 3.14]\n\nmy_list.remove(5)\nprint(my_list)  # ['hello', 3.14]\n\nmy_list.remove(\"hello\")\nprint(my_list)  # [3.14]\n\nmy_list.remove(5)\n# ValueError: list.remove(x): x not in list\n\n\n# list.pop(i): \n#   Removes and returns item at index i \n# list.pop(): \n#   Removes and returns the last item from the list\nmy_list = [5, \"hello\", 5, 3.14]\nlast_item = my_list.pop()\nprint(last_item)  # 3.14\nprint(my_list)  # [5, 'hello', 5]\n\nsecond_item = my_list.pop(1)\nprint(second_item)  # hello\nprint(my_list)  # [5, 5]\n</python>\n<python># list.count(x) : \n#   Returns the number of occurrences of the item x. \nletter_grades = [\"A\", \"B+\", \"A-\", \"B\", \"A\", \"A\"]\nprint(letter_grades.count(\"A\"))  # 3\nprint(letter_grades.count(\"C\"))  # 0\n\n# list.index(x) : \n#   Returns the index of the first occurrence of item x in list. \n#   A ValueError occurs if item x is not found in list.\nnames = [\"Khalid\", \"Reza\", \"Deven\"]\nprint(names.index(\"Reza\"))  # 1\nprint(names.index(\"apple\")) # ValueError: 'apple' is not in list\n\n# list.sort() : \n#   Sorts the list \"in place\" — this means that the list will be modified.\n#   Returns None.\n#   The list is sorted in ascending order.\ngrades = [100, 85, 90.5]\ngrades.sort()\nprint(grades)\n# [85, 90.5, 100]\n\n# list.reverse() : Reverse the list \"in place\"\nmylist = [10, 3, 3.14, \"apple\"]\nmylist.reverse()\nprint(mylist)  # ['apple', 3.14, 3, 10]\n\n# list.clear() : Remove all items from list.\nmylist = [10, 3, 3.14, \"apple\"]\nmylist.clear()\nprint(mylist)  # []\n\n# list.extend(sequence) : Extend list by appending items from the sequence.\nmylist = [10, 20]\nmylist.extend([1.61, -50])\nprint(mylist)  # [10, 20, 1.61, -50]\n\nmylist.extend(\"hello\")\nprint(mylist)  # [10, 20, 1.61, -50, 'h', 'e', 'l', 'l', 'o']\n</python>\n<h2>Lists and Strings</h2>\n<p>There are built-in functions and string methods that allows us to transform strings to/from lists.</p>\n<python># list(seq): built-in function which converts a sequence (such as\n#   a string or a list) into a list\nfruits = \"apple\"\nletters = list(fruits)\nprint(letters)  # ['a', 'p', 'p', 'l', 'e']\n\n\n# s.split(sep): Breaks the string s using the separator string sep\n#   and returns a list of strings containing the separated parts\n# s.split(): same as above but using whitespace \n#   (spaces, tab character and newline ) as separator\ndata = \"Khalid Reza Deven\"\nnames = data.split()\nprint(names)  # ['Khalid', 'Reza', 'Deven']\n\n# Multiple spaces are also removed\ndata = \"Khalid    Reza     Deven\"\nnames = data.split()\nprint(names)  # ['Khalid', 'Reza', 'Deven']\n\ndata = \"Khalid\\tReza\\tDeven\" # separated by tab\nnames = data.split()\nprint(names)  # ['Khalid', 'Reza', 'Deven']\n\ndata = \"\"\"Khalid\nReza\nDeven Parekh\"\"\"\nnames = data.split()\nprint(names)  # ['Khalid', 'Reza', 'Deven', 'Parekh']\n</python>\n<python># s.splitlines(): Breaks a multi-lines strings into separate lines\n#   and returns a list containing those lines.\ndata = \"\"\"Khalid\nReza\nDeven Parekh\"\"\"\nnames = data.splitlines()\nprint(names)  # ['Khalid', 'Reza', 'Deven Parekh']\n\ndata = \"Khalid,Reza,Deven\"\nnames = data.split(\",\")\nprint(names)  # ['Khalid', 'Reza', 'Deven']\n\ndata = \"Khalid,  Reza,  Deven\"\nnames = data.split(\",\")\nprint(names)  # ['Khalid', '  Reza', '  Deven']  \n# notice space in strings above\n\n\n# sep.join(L): joins all the strings in the list L using the string sep\n#   Returns the joined string.\nnames = ['Khalid', 'Reza', 'Deven']\njoined = \" \".join(names)\nprint(joined)  # Khalid Reza Deven\n\n# a comma\njoined = \",\".join(names)\nprint(joined)  # Khalid,Reza,Deven\n\n# a comma and a space\njoined = \", \".join(names)\nprint(joined)  # Khalid, Reza, Deven\n\n# empty string, no separator\nletters = [\"a\", \"p\", \"p\", \"l\", \"e\"]\njoined = \"\".join(letters)\nprint(joined)  # apple\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}