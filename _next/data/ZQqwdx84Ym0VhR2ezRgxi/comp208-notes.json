{"pageProps":{"allPosts":[{"slug":"Lecture-1.md","content":"\n:::blockquote{.notes-only}\nIn the beginning was the Tao. The Tao gave birth to Space and Time.\nTherefore Space and Time are the Yin and Yang of programming.\n:cite[— [Tao of Programming](https://www.mit.edu/~xela/tao.html)]\n:::\n\n##  Binary Numbers \n\nIn decimal system, a number is expressed as a sequence of digits $0$ to $9$.\n\nFor example, `Two thousand twenty one ⇔ 2021`\n\n##\n\nIn binary number system the set of digits, is called binary digits or :sc[bits]: $\\{0, 1\\}$.  \n\nA binary number is expressed as a sequence of bits.  \n\nFor example, $183$ in binary is $10110111$.\n\n## Converting from decimal to binary\n\n::decimal-binary\n\n## Converting from binary to decimal\n\n::binary-decimal\n\n## Groups of bits\n\nA group of $8$ bits is called a :i[byte]  e.g. $11010111$\n- $1$ kilobyte (kB) = $1000$ bytes\n- $1$ megabyte (MB) = $10^6$  (million) bytes\n- $1$ gigabyte (GB) = $10^9$ (billion) bytes\n- $1$ terabyte (TB) = $10^{12}$ bytes (1000 billion)\n\n## What is programming? \n\n:::div{.gap1}\nProgramming is the process of creating a set of instructions — a program — to tell a computer how to perform a task.\n\nPrograms take input data, perform some computation — numerical or symbolic (text) — and produce output data.\n:::\n\n##\n\n:::div{.gap1}\nComputers can perform only basic binary operations (such as add or multiply two numbers)\n\nHow do we communicate complex instructions to computers? — Use a programming language!\n:::\n\n## Levels of programming languages\n\n:::div{.my2}\n| Low-level languages                                    | High-level languages                              |\n|--------------------------------------------------------|---------------------------------------------------|\n| Closer to machine, difficult for humans                | Closer to humans,  easier for humans to work with |\n|                                                        |                                                   |\n| Less portable, provide  less abstraction over hardware | More portable, more abstraction over hardware     |\n| Examples: Assembly Language                            | Examples: Java, Python                            |\n:::\n\n\n## How do computers understand high-level languages?\n\n:::div{.gap1}\nHigh-level languages are translated into machine code (for CPU). \n\nProgramming languages come in two main flavors — :i[compiled] languages or :i[interpreted] languages.\n\nCompilers and interpreters are software tools responsible to translate source code into machine code.\n:::\n\n##\n\n:::div{style=\"margin-bottom: 1em;\"}\n:sc[Compiled] languages (e.g. C/C++, Java)  \n\n- High-level program (source code)  ➞  :sc[Compiler] ➞ Binary executable (e.g. .exe or .dmg)\n- Once compiled, the binary program can be executed without compiler.\n:::\n\n:::div\n:sc[Interpreted] (e.g. Python, Ruby)\n\n- High-level program (source code) ➞ Executed directly by an :sc[Interpreter]\n- The interpreter is required on the machine where the program is executed.\n:::\n\n::divider\n\n## Data in binary\n\nComputers can understand only binary numbers  \n\nHow can we encode data in the real world into binary numbers?\n\n::img{src=\"module-1/data-in-binary.svg\" style=\"margin: 2rem auto; width:100%;\" }\n\n## Integers in binary\n\nWe already saw how to represent positive integers in binary e.g.  \n:div[$109 = 1101101_2$]{style=\"text-align: center;\"}\n\nFor signed integers (to differentiate negative and positive), an extra leftmost bit is used for sign only, e.g.  \n    :div[$-109 = \\colorbox{lightblue}{1}1101101_2$]{style=\"text-align: center;\"} \n    :div[$+109 = \\colorbox{lightblue}{0}1101101_2$]{style=\"text-align: center;\"}\n\n::div[(For more info: https://en.wikipedia.org/wiki/Signed_number_representations)]{.smaller}\n\n## Real numbers in binary\n\n64-bit :sc[Floating point] format is used to represent numbers with decimal point, e.g.  \n:div[$\\colorbox{lightblue}{0}\\colorbox{lightpink}{10000000000}\\colorbox{lightgreen}{1001001000011111101101010100010001000010110100011000} = 3.141592653589793$]{style=\"text-align: center;\"}\n\n::div[(For more info: https://en.wikipedia.org/wiki/Double-precision_floating-point_format)]{.smaller}\n\n##\n\nFloating point format has a :i[finite precision], but digits of $\\pi$ run forever: :div[$3.1415926535897932384626433832795028841...$]{style=\"text-align: center;\"}\n\nWith only 64-bits, we can only have precision up to a fixed digits after decimal point: $3.141592653589793$\n\n\n\n## Text in binary\n\n::p[Letters and punctuations in human languages are encoded in binary using a :i[Character Encoding] such as ASCII or UTF-8 (Unicode).]{.ppt-m-3}\n\n::image{style=\"margin: 0 auto; width: 80%;\" src=\"module-1/ASCII-Table.png\" .ppt-img50}  \n::div[(source: https://simple.wikipedia.org/wiki/ASCII)]{style=\"font-size: 0.6em; margin: 0 auto;\"}\n\n## Images, audio & video in binary\n\nBinary data is stored in a file using a specific format.\n\nPrograms know what to do (play music, show image, etc) based on the format.  \n\nWe already know some of these formats:\n- Images: jpeg, png\n- Audio: mp3, m4a, wma\n- Video: mp4, avi, wmv\n\n\n::divider\n\n## Thonny Demo — Editor vs Shell\n\nPython interpreter works in two modes:\n- An interactive :sc[Shell] mode (with the prompt `>>>`)\n    - Line(s) of code is executed immediately as soon entered and output is visible immediately\n- :sc[Script] mode\n    - Executes a Python file (`.py`) as a program.\n\nThonny allows us to use both modes in one graphical interface.\n\n## Comments\n\nComments are annotations we add to our program and are ignored by the Python interpreter.\n\nIn Python, we start a comment using `#`.\n\n```python\n# Author: Deven\n# My first program\n\n# This is a comment on its own line & it will be ignored\nprint(\"Hello, world!\")  # str\nprint(123)  # int\nprint(1.614)  # float \n```\n\n##    \nWe use comments to:\n- Make the code easier to read and understand by explaining how it works.\n- Indicate authorship and license.\n- Disable some code (prevent it from executing) but still keeping it in the file.\n\n\nIn Thonny, we can use `Edit menu -> Toggle comment` to comment/uncomment the selected lines.\n\n\n## Objects and Data Types\n\nAll data in a Python program is represented by :sc[objects]. \n\nAn object always has a :sc[type] (or :sc[class]) associated with it.\n\nWe can use `type()` function to know the type of an object.\n\n:::hgrid{gap=\"7em\"}\n```python lineno=false\n>>> type(5)\n<class 'int'>\n```\n\n::image{style=\"margin: 0 auto; width: 40%;\" src=\"module-1/int.svg\" .ppt-img100}  \n:::\n\n##\n\n::::div{style=\"display: grid; gap: 3em;\"}\n:::hgrid{gap=\"7em\"}\n```python lineno=false\n>>> type(3.1415)\n<class 'float'>\n```\n\n::image{style=\"margin: 0 auto; width: 40%;\" src=\"module-1/float.svg\" .ppt-img100}  \n:::\n\n:::hgrid{gap=\"7em\"}\n```python lineno=false\n>>> type(\"Hello\")\n<class 'str'>\n```\n\n::image{style=\"margin: 0 auto; width: 40%;\" src=\"module-1/str.svg\" .ppt-img100}  \n:::\n::::\n\n##\n\nAn object's type determines the operations that the object supports:\n\n```python\n#  objects of int type can be added using +\n>>> 10 + 5\n15\n\n# But an object of type str cannot be added to an int using +\n>>> \"Hello\" + 5\nTraceback (most recent call last):\n  File \"<pyshell>\", line 1, in <module>\nTypeError: can only concatenate str (not \"int\") to str\n```\n\n## Summary\n \nWe saw the three basic data types in Python:\n- `int`: Integers such as $..., -1, 0, 1, 2, ...$\n- `float`: Floating-point numbers such as $-1.2, 3.14,$ etc.\n- `str`: Text data (a sequence of characters) such as \"hello world\", \"Python\", etc.\n\nThe terms :sc[Object] and :sc[Value] are used interchangeably.  \nSo are the terms :sc[Class] and :sc[Type].\n\n\n::divider","title":"1 — Programming Basics","date":"2024-01-03","published":true},{"slug":"Lecture-2.1.md","content":"\n## Review of last week\n\nAll data in a Python program is represented by :sc[objects]. \n\nAn object always has a :sc[type] (or :sc[class]) associated with it.\n\n- `int`: Integers such as $..., -1, 0, 1, 2, ...$\n- `float`: Floating-point numbers such as $-1.2, 3.14,$ etc.\n- `str`: Text data (a sequence of characters) such as \"hello world\", \"Python\", etc.\n\nIn Thonny, we can use `Edit menu -> Toggle comment` to comment/uncomment the selected lines.\n\n## Variables\n\nIn Python, a :sc[Variable] is a name that refers to an object in computer memory.  \nA variable can be created using :sc[Assignment Statement]:  \n\n:::div{.center .code .my3}\n:span[variable_name = value]{.bgblue .p1 .br5}\n:::\n\n`=` is known as the :sc[assignment operator].\n\n##\n\n```python\n# create a variable and assign it value 20\ntemperature = 20  \n\n# variable temperature refers to 20 which is displayed\nprint(\"Today's temperature is\", temperature)\n\n# show type of the variable\nprint(\"Type of temperature variable is\", type(temperature))\n```\n\n```output\nToday's temperature is 20\nType of temperature variable is <class 'int'>\n```\n\n## Arithmetic with numbers\nCalculations with numbers can be done using :i[arithmetic operators].\n\n::::div{.hgrid}\n:::div\n```python\n# Addition\nprint(1.5 + 1.5) # 3.0\n\n# Subtraction\nprint(10 - 20)  # -10\n```\n:::\n:::div\n```python\n# Multiplication\nprint(42 * 42)  # 1764\n\n# Division\nprint(1 / 5)  # 0.2\n\n# Exponentiation (x to the power of y)\nprint(2 ** 16)  # 65536\n```\n:::\n::::\n\n##\n\n```python\ntemperature = 20\n# Unary minus operator\nprint(-temperature)  # -20\n\n\n# Computing rest mass energy of an electron\nrest_mass = 9.109e-31  # Using scientific notation\nspeed_of_light = 3e8\n\nrest_mass_energy = rest_mass * (speed_of_light ** 2)  # E = mc^2\nprint(rest_mass_energy)  # 8.198099999999999e-14\n```\n\n## Floor division and remainder\n\n::img{src=\"module-2/divmod.svg\" style=\"margin:2em;\"}\n\n\n```python\n# floor division\nprint(20 // 3)  # 6\n\n# remainder\nprint(20 % 3)  # 2\n```\n\n## \n\n```python\n# Converting seconds to minutes\n\nduration = 320\nprint(duration, \"seconds equal\", duration / 60, \"minutes.\")\n# 320 seconds equal 5.333333333333333 minutes.\n\n\n# Alternative approach:\nminutes = duration // 60\nseconds = duration % 60\nprint(duration, \"seconds equal\", minutes, \"minutes and\", \n      seconds, \"seconds.\")\n# 320 seconds equal 5 minutes and 20 seconds.\n```\n\n## Result type of arithmetic operations\n\n::image{style=\"margin: 0 auto; width: 65%;\" src=\"module-2/result_type.png\" .ppt-img80} \n\n##\n```python\nx = 2 + 1\nprint(x, type(x))  # 3 <class 'int'>\n\nx = 2 + 1.0\nprint(x, type(x))  # 3.0 <class 'float'>\n\n# Classic division always results in float\nx = 1 / 2  \nprint(x, type(x))  # 0.5 <class 'float'>\n```\n\n:::div{.px2 .py1 .my2 style=\"border: solid 1px lightgray; border-radius:5px; background-color: #d6efd6;\"}\n:b[Try the above examples with other operators!]{.p0}\n:::\n\n##\n\nTry the problem \"Distance between two points\" on Ed.\n\n## Basic string operations\n\nStrings are sequences of zero or more characters.\n\nIn Python, strings are enclosed by either single or double quotes.\n \n```python\n\"Hello\"\n'everyone!'\n\"I'm Batman.\"  # single quote allowed inside double quotes,\n'You can call me \"Bruce\".'  # and vice versa.\n'123' # this is a string, not a number!\n\"\" # this is an empty string\n\" \" # this is a string with just one space\n```\n\n##\n```python\n# a multi-line string using triple quotes\nlines = \"\"\"The woods are lovely, dark and deep,   \nBut I have promises to keep,   \nAnd miles to go before I sleep,   \nAnd miles to go before I sleep.\n\"\"\"\nprint(lines)\n\n# We can also use single quotes for multi-line strings\nprint(\n'''I hold it true, whate'er befall;\nI feel it when I sorrow most;\n'Tis better to have loved and lost\nThan never to have loved at all.\n''')\n```\n\n## String concatenation (joining) using `+` operator\n\n```python\nmessage = \"Hello\" + \"everyone\"\nprint(message)  # Helloeveryone\n\nname = \"Alice\"\nmessage = \"Hello \" + name\nprint(message)  # Hello Alice\n\nstring = \"1\" + \"2\" + \"3\"\nprint(string)  # 123 and not the number 6\n\nprice = 100\nprint(price + \" USD\")\n# TypeError: unsupported operand type(s) for +: 'int' and 'str'\n```\n\n## String repetition\nString can be repeated multiple times using `*` operator.\n\n```python\nprint(\"Welcome! \" * 3)  # 'Welcome! Welcome! Welcome! '\n\nprint(4 * \"ha\")  # 'hahahaha'\n\n```\n\n## String length\nThe function `len()` returns length of its argument string.\n\n```python\npassword = \"xyz1234\"\nprint(\"Password length:\", len(password))\n# Password length: 7\n\nprint(len(1234))\n# TypeError: object of type 'int' has no len()\n\n```\n\n## Order of Expression Evaluation\n\nWhen we have multiple operators in the same expression, which operator should apply first?  \n\nAll Python operators have a :sc[precedence] and :sc[associativity]:\n- Precedence — for two different kinds of operators, which should be applied first?\n- Associativity — for two operators with the same precedence, which should be applied first?\n\n##\nTable below show operators from higher precedence to lower.\n\n:::div{.my2 .hgrid}\n| Operator            | Associativity |\n|---------------------|---------------|\n| `()` (parentheses)  | -             |\n| `**`                | Right         |\n| Unary `-`           | -             |\n| `*`, `/`, `//`, `%` | Left          |\n| Binary `+`, `-`     | Left          |\n| `=` (assignment)    | Right         |\n:::\n\n\n##\n```python\nx = 3\ny = 5\n# Multiplication has higher precedence than addition\nz = x + 2 * y + 1  \nprint(z)  # 14\n\n# Need to use parentheses to enforce the order we want\nz = (x + 2) * (y + 1)\nprint(z)  # 30\n\n# Same precedence so left to right\nz = x * y / 100  \nprint(z)  # 0.15\n```\n\n## \n```python\n# Same as 2 ** (3 ** 2) because \"**\" goes right to left\nz = 2 ** 3 ** 2\nprint(z)  # 512\n\n# Using parentheses to enforce the order we want\nz = (2 ** 3) ** 2  \nprint(z)  # 64\n\nx = 5\nx = x + 1  # addition happens first and then assignment\nprint(x)  # 6\n\n```\n\n## More on Variables\n\nLet us write code that implements the following formula to convert fahrenheit to celsius:\n\n$$c = \\frac{5(f-32)}{9}$$\n\n\n```python\nprint(\"10 F in C is\", 5 * (10 - 32) / 9)\n```\n\n## :span[Variables allow \"saving\" intermediate results of a computation]{style=\"font-size: 0.83em;\"}\n\nWe can use variable to store the result so that we can reuse it in the program later.  \n\n```python\nfahrenheit = 10\n\n# Store the result of the expression\ncelsius = 5 * (fahrenheit - 32) / 9\n\nprint(fahrenheit, \"F in C is\", celsius)\n\n# Use variable celsius for more calculations\nprint(\"Adding 10 degrees today:\", celsius + 10)\n```\n\n## :span[Variables can be reassigned new values]{style=\"font-size: 0.85em;\"}\n```python\n# Create variable name \"number\" and assign a value to it\nnumber = 123  \nprint(number)  # displays 123\n\n# Assign new value to existing variable \"number\"\nnumber = -50\n\nprint(number)  # displays -50\n\n# add 10 and assign the result value to existing variable \"number\"\nnumber = number + 10\n\nprint(number)  # displays -40\n```\n\n##\n\nNew values can be of different type.  \n\n<div style=\"margin-top: 2em; margin-bottom: 2em; width: 800;\">\n<iframe  width=\"800\" height=\"500\" frameborder=\"0\" src=\"https://pythontutor.com/iframe-embed.html#code=number%20%3D%20123%20%20%23%20an%20int%20value%0Amessage%20%3D%20%22hello%22%20%20%23%20a%20string%0A%0Aprint%28number,%20type%28number%29%29%0Aprint%28message,%20type%28message%29%29%0A%0A%23%20Now%20variable%20number%20refers%20to%20the%20string%20%22hello%22%0Anumber%20%3D%20message%0A%0Aprint%28number,%20type%28number%29%29%0Aprint%28message,%20type%28message%29%29%0A&codeDivHeight=400&codeDivWidth=350&cumulative=false&curInstr=0&heapPrimitives=true&origin=opt-frontend.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false\"> </iframe>\n</div>\n\n## \nHowever, variables should be changed with caution as it can produce errors or strange results.\n```python\nnumber = 123  # an int value\nmessage = \"hello\"  # a string\n\n# Now variable number refers to the string \"hello\"\nnumber = message\nprint(number * 2) # String repetition!\nprint(number - 10) # minus won't work with string.\n```\n\n```output\nhellohello\nTraceback (most recent call last):\n    print(number - 10)\nTypeError: unsupported operand type(s) for -: 'str' and 'int'\n```\n\n## Example: Swapping values\nSometimes we need to swap (interchange) values of two variables.\n\n::::div{.hgrid style=\"width: 110%;\"}\n:::div\nA naive attempt (does not work):\n```python\nx = 137\ny = 42\n\n# Try swapping\nx = y\ny = x\n\nprint(x, y)  # 42 42\n```\n:::\n\n:::div\nThe following will work:\n```python\nx = 137\ny = 42\n\n# Correct way to swap\ntemp = x\nx = y\ny = temp\n\nprint(x, y)  # 42 137\n```\n:::\n::::\n\n##\n\nTry the problem \"Textbox\" on Ed.\n\n\n## Rules for variable names\n\n- A variable name can only contain alpha-numeric characters and underscores `A-Z, a-z, 0-9, _`\n- A variable name cannot start with a number\n- Variable names are case-sensitive\n    - (`cat`, `Cat`, and `CAT` are three different variables)\n- They cannot be keywords.\n    - Python has 33 reserved keywords, you can see a list of them by typing `help(\"keywords\")` in the Python shell.\n\n:::div{.px2 .my2 style=\"border: solid 1px lightgray; border-radius:5px; background-color: #d6dcef;\"}\nPython filenames must follow the same rules as above.\n:::\n\n## Good practice for naming variables\n\n- Name your variable something descriptive of its purpose or content.\n- If the variable is one word, all letters should be lowercase. Eg: `hour`, `day`.\n- If the variable contains more than one word, then they should all be lowercase and each separated by an underscore. This is called :i[snake case].  \n    e.g. `is_sunny`, `cat_name`\n- Good variable names: `hour`, `is_open`,  `number_of_books`, `course_code`\n- Bad variable names: `asfdstow`, `nounderscoreever`, `ur_stupid`, `CaPiTAlsANyWHErE`\n\n\n\n\n::divider\n","title":"2.1 — Variables, Arithmetic & String operations","date":"2024-01-06","published":true}]},"__N_SSG":true}