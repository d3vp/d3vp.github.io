{"pageProps":{"titles":["Week 1 — Computer and Programming Basics","Week 2 — Types, Variables, Expressions, Functions","Sep 9-10 Problem Set 2","Week 3 —  Conditionals & Iteration","Sep 16-17 Problem Set","Week 4 —  print(), String methods, while loop","Python Style Guide","Sep 23-24 Problem Set","Week 5 —  Scope of variables, Lists & Tuples","Sep 30-Oct 1 Problem Set","Week 6 —  Immutability, Dictionary & Set","Oct 7-8 Problem Set","Week 7 —  Nested data structures, iterables, comprehensions","Week 8 —  Exceptions & File IO","Oct 21-22 Problem Set"],"slugs":["Lecture-1.2","Lecture-week2","_Sep09-problem-set","Lecture-week3","_Sep16-17-problem-set","Lecture-week4","style-guide","_Sep23-24-problem-set","Lecture-week5","_Sep30-Oct1-problem-set","Lecture-week6","_Oct7-8-problem-set","Lecture-week7","Lecture-week8","_Oct21-22_problem-set"],"post":{"title":"Oct 21-22 Problem Set","slug":"_Oct21-22_problem-set","content":"<p>Solutions are available on this page. Click “Show answer” button after each question.</p>\n<p><span style=\"margin-left: -1em;\"><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1.</mn></mrow><annotation encoding=\"application/x-tex\">1.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">.</span></span></span></span></span></span> Rewrite the following two functions by using a list comprehension.</p>\n<python>def flatten(lst):\n    \"\"\" Flattens the list of lists into a list.\n    \"\"\"\n    result = []\n    for inner_list in lst:\n        for x in inner_list:\n            result.append(x)\n            \n    return result\n\n\nnested_list = [[1, 2, 3], [100, 245, 300]]\nflat_list = flatten(nested_list)\nprint(flat_list)\n# prints:\n# [1, 2, 3, 100, 245, 300]\n</python>\n<solution><python>def flatten(lst):\n    \"\"\" Flattens the list of lists into a list.\n    \"\"\"\n    return [x for inner_list in lst for x in inner_list]\n    \n\nnested_list = [[1, 2, 3], [100, 245, 300]]\nflat_list = flatten(nested_list)\nprint(flat_list)\n# [1, 2, 3, 100, 245, 300]\n</python></solution>\n<python>def max_in_columns(matrix):\n    \"\"\" Return a list containing maximum for each column in matrix.\n    \"\"\"\n    result = []\n    num_rows = len(matrix) \n    num_cols = len(matrix[0])\n\n    for c in range(num_cols):\n        current_col = []\n        for r in range(num_rows):\n            current_col.append(matrix[r][c])\n        result.append(max(current_col))\n    \n    return result\n\n\nmatrix = [[81, 75, 90, 60], \n          [80, 70, 85, 55],\n          [40, 50, 45, 85]]\n\nprint(max_in_columns(matrix))\n# [81, 75, 90, 85]\n</python>\n<solution><python>def max_in_columns(matrix):\n    \"\"\" Return a list containing maximum for each column in matrix.\n    \"\"\"\n    num_rows = len(matrix) \n    num_cols = len(matrix[0])\n\n    return [max([matrix[r][c] for r in range(num_rows)])\n              for c in range(num_cols)]\n\n\nmatrix = [[81, 75, 90, 60], \n          [80, 70, 85, 55],\n          [40, 50, 45, 85]]\n\nprint(max_in_columns(matrix))\n# [81, 75, 90, 85]\n</python></solution>\n<hr style=\"margin: 2em auto; border-top: 1px solid #b0b0b0;\">\n<p><span style=\"margin-left: -1em;\"><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2.</mn></mrow><annotation encoding=\"application/x-tex\">2.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">.</span></span></span></span></span></span> Consider the following data with student ID and assignment grades. Write a function <inline-code>get_top_student</inline-code> that takes the dictionary <inline-code>student_grades</inline-code> as argument and returns a tuple of form <inline-code>(top_student_id, top_student_grade)</inline-code> where <inline-code>top_student_grade</inline-code> is total assignment grade for the top student <inline-code>top_student_id</inline-code> is the corresponding ID of that student.</p>\n<python>all_grades = {\n    # student_ID : 3 assignment grades\n    2601000: [90, 95, 100],\n    2602000: [95, 85, 80],\n    2603000: [80, 88, 98],\n    2604000: [100, 98, 100]\n}\n\nprint(get_top_student(all_grades))\n# (2604000, 298)\n</python>\n<solution><python>def get_top_student(student_grades):\n    top_grade = None\n    top_id = None\n    \n    for student_id, grades in student_grades.items():\n        # First time, top_grade should be None so just assign it\n        if top_grade is None:  # top_grade == None also works\n            top_grade = sum(grades)\n            top_id = student_id\n        else:\n            # Compare total grade with top_grade so far\n            total = sum(grades)\n            if total > top_grade:\n                top_grade = total\n                top_id = student_id\n                \n    return (top_id, top_grade)\n            \n\nstudent_grades = {\n    # student_ID : 3 assignment grades\n    2601000: [90, 95, 100],\n    2602000: [95, 85, 80],\n    2603000: [80, 88, 98],\n    2604000: [100, 98, 100]\n}\n\nprint(get_top_student(student_grades))\n</python></solution>\n<hr style=\"margin: 2em auto; border-top: 1px solid #b0b0b0;\">\n<p><span style=\"margin-left: -1em;\"><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3.</mn></mrow><annotation encoding=\"application/x-tex\">3.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mord\">.</span></span></span></span></span></span> We can use <inline-code>time</inline-code> function from <inline-code>time</inline-code> module to check how long some code takes to execute.</p>\n<python>import time\n\n# time.time() function returns number of seconds since 00:00:00 UTC on 1 January 1970\nstart = time.time()\n\n# write code here\n\nend = time.time()\n\nprint(\"Time taken: \", end - start)\n</python>\n<p>Using this idea, let us check how fast sets and dictionaries are compared to lists.</p>\n<ul>\n<li>Create a large list of 10 million numbers using range()</li>\n<li>Use <inline-code>in</inline-code> operator to search for a large number in the list. Check how long it takes for the <inline-code>in</inline-code> operator.</li>\n<li>Now use a set to store the numbers and check how long it takes for <inline-code>in</inline-code> operator.</li>\n<li>Finally, use a dictionary and do the same. Store numbers as keys and use <inline-code>None</inline-code> for all values.</li>\n</ul>\n<solution><python>import time\n\n# List\nnumbers = list(range(10000000))\n\nstart = time.time()\nprint(9000000 in numbers)\nend = time.time()\n\nprint(\"[list] Time taken: \", end - start)\n\n\n# Set\nnumbers = set(range(10000000))\n\nstart = time.time()\nprint(9000000 in numbers)  # faster than list\nend = time.time()\n\nprint(\"[set] Time taken: \", end - start)\n\n\n# Dictionary\nnumbers = {i: None for i in range(10000000)}\n\nstart = time.time()\nprint(9000000 in numbers)  # faster than list\n\n# Searching values in dictionary is slower\n# print(9000000 in numbers.values())\nend = time.time()\n\nprint(\"[dict] Time taken: \", end - start)\n\n</python></solution>\n<hr style=\"margin: 2em auto; border-top: 1px solid #b0b0b0;\">\n<p><span style=\"margin-left: -1em;\"><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4.</mn></mrow><annotation encoding=\"application/x-tex\">4.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mord\">.</span></span></span></span></span></span> Suppose we have a thesaurus with data of following kind:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Word</th><th>Synonyms</th></tr></thead><tbody><tr><td>brave</td><td>bold, courageous, dauntless, fearless, gallant</td></tr><tr><td>happy</td><td>blissful, delighted, glad, gratified, joyful</td></tr><tr><td>absurd</td><td>bizarre, crazy, fanciful, foolish, insane, nonsensical</td></tr></tbody></table>\n<p>How will you store this data so that it is easy and efficient to ask the following kinds of questions?</p>\n<ul>\n<li>Does the thesaurus contain the word “sad” ? (Need not search the synonyms, only search the first column above)</li>\n<li>Are words “brave” and “courageous” synonyms?</li>\n</ul>\n<p>Create the appropriate data structure in Python and write code that answer the questions above.</p>\n<solution><python>thesaurus = {\n    \"brave\": {\"bold\", \"courageous\", \"dauntless\", \"fearless\", \"gallant\"},\n    \"happy\": {\"blissful\", \"delighted\", \"glad\", \"gratified\", \"joyful\"},\n    \"absurd\": {\"bizarre\", \"crazy\", \"fanciful\", \"foolish\", \"insane\", \"nonsensical\"},\n}\n\n# Does the thesaurus contain the word \"sad\" ?\nword = \"sad\"\nprint(word in thesaurus)  # False\n\n# Are words \"brave\" and \"courageous\" synonyms?\ndef is_synonym(w1, w2):\n    return w1 in thesaurus and w2 in thesaurus[w1]\n\n\nprint(is_synonym(\"brave\", \"courageous\") or\n      is_synonym(\"courageous\", \"brave\"))  # True\n\n</python></solution>\n<p><span style=\"margin-left: -1em;\"><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5.</mn></mrow><annotation encoding=\"application/x-tex\">5.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span><span class=\"mord\">.</span></span></span></span></span></span> Write a function <inline-code>is_number</inline-code> that takes a string <inline-code>x</inline-code> and returns <inline-code>True</inline-code> if <inline-code>x</inline-code> can be convert to a number (float), otherwise <inline-code>False</inline-code>. Use try/except statement.</p>\n<python>print(is_number(\"a\"))  # False\nprint(is_number(\"-1.5\"))  # True\n</python>\n<solution><python>def is_number(x):    \n    try:\n        y = float(x)\n    except ValueError:\n        return False\n        \n    return True\n\n\nprint(is_number(\"a\"))  # False\nprint(is_number(\"-1.5\"))  # True\n</python></solution>\n<hr style=\"margin: 2em auto; border-top: 1px solid #b0b0b0;\">\n<p><span style=\"margin-left: -1em;\"><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>6.</mn></mrow><annotation encoding=\"application/x-tex\">6.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mord\">.</span></span></span></span></span></span> Download the file <a href=\"week8/enrollment_data.txt\">enrollment_data.txt</a>. The first line contains header of the table (i.e. names of the columns). Second line onwards is enrollment data: first column is course name and rest of the columns are enrollment numbers for each semester. Compute the average enrollment per course and create a new file called <inline-code>enrollment_data_with_stats.txt</inline-code> that contains all the data from before with an additional column indicating the average student per semester.</p>\n<p>Check the <inline-code>expected_enrollment_data.txt</inline-code> below to see how the new file should look like after you ran your program.\nNote that columns of data in the files are separated by a character <inline-code>\"\\t\"</inline-code>.\nYou can use a list of lists or dictionaries as you see fit.</p>\n<p>Expected data in file <inline-code>enrollment_data_with_stats.txt</inline-code>:</p>\n<output>Course\tF17\tW18\tF18\tW19\tF19\tAVG\nCOMP202\t816\t613\t709\t590\t744\t694.4\nCOMP208\t420\t450\t550\t632\t680\t546.4\n</output>\n<solution><python>fobj = open(\"enrollment_data.txt\")  # open for reading\n\ndata = []\n\nfor line in fobj:\n    # Remove trailing spaces, then split by tab character\n    data.append(line.rstrip().split(\"\\t\"))\n    \nfobj.close()\n\n# Add name of last column to the first line\ndata[0].append(\"AVG\")\n\n# for all lines excect the first line, compute average\nfor i in range(1, len(data)):\n    enrollment = data[i][1:] # first column is course, so ignore it\n    total = 0\n    \n    # convert string to numbers and add them\n    for x in enrollment:\n        total += int(x)\n    avg = total / len(enrollment)\n    \n    # convert float to str\n    data[i].append(str(avg))  # add avg as last column\n    \n\n# finally write data to file\n\nfobj = open(\"enrollment_data_with_stats.txt\", \"w\")  # open for writing\n\nfor row in data:\n    fobj.write(\"\\t\".join(row) + \"\\n\")\n    \nfobj.close()\n</python></solution>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>Extra practice for midterm</h1>\n<p><span style=\"margin-left: -1em;\"><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1.</mn></mrow><annotation encoding=\"application/x-tex\">1.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">.</span></span></span></span></span></span> Write a function <inline-code>get_longest_list</inline-code> that takes a list of lists and returns the longest inner list. For example:</p>\n<python>animals = [['owl', 'bat', 'cow'], ['goat', 'duck', 'lion', 'bear'], ['panda', 'zebra']]\nprint(get_longest_list(animals))\n# ['goat', 'duck', 'lion', 'bear']\n</python>\n<solution><python>def get_longest_list(lists):\n    longest_list = []\n    \n    for l in lists:\n        if len(l) > len(longest_list):\n            longest_list = l  # does not copy the list l\n            \n    return longest_list\n\n\nanimals = [['owl', 'bat', 'cow'],\n        ['goat', 'duck', 'lion', 'bear'],\n        ['panda', 'zebra']]\nresult = get_longest_list(animals)\nprint(result)\n</python></solution>\n<hr style=\"margin: 2em auto; border-top: 1px solid #b0b0b0;\">\n<p><span style=\"margin-left: -1em;\"><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2.</mn></mrow><annotation encoding=\"application/x-tex\">2.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">.</span></span></span></span></span></span> Write a function <inline-code>is_square_matrix</inline-code> that takes a 2D list of integers as input and returns a boolean value. The function should return true if the 2D list is a square matrix, that is, each inner list has the same length as the number of inner lists. The function returns false otherwise.</p>\n<python>list1 = [[1, 2, 3], [5, 6], [8, 9, 0]]\nlist2 = [[2, 2, 5], [0, 6, 7], [8, 9, 0]]\nprint(is_square_matrix(list1))  # False\nprint(is_square_matrix(list2))  # True\n</python>\n<solution><python>def is_square_matrix(lst):\n    num_rows = len(lst)\n    \n    for l in lst:\n        if len(l) != num_rows:\n            return False\n        \n    return True\n\n\nlist1 = [[1, 2, 3], [5, 6], [8, 9, 0]]\nlist2 = [[2, 2, 5], [0, 6, 7], [8, 9, 0]]\nprint(is_square_matrix(list1))  # False\nprint(is_square_matrix(list2))  # True\n</python></solution>\n<hr style=\"margin: 2em auto; border-top: 1px solid #b0b0b0;\">\n<p><span style=\"margin-left: -1em;\"><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3.</mn></mrow><annotation encoding=\"application/x-tex\">3.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mord\">.</span></span></span></span></span></span> Write a function called <inline-code>reverse_lookup</inline-code> that takes a dictionary <inline-code>d</inline-code> and a value <inline-code>target</inline-code> as arguments. The function returns the list of keys in <inline-code>d</inline-code> that map to <inline-code>target</inline-code>. For example:</p>\n<python>letter_count = {'a': 3, 'b': 2, 'c': 3, 'd': 5, 'e': 0, 'f': 3}\nprint(reverse_lookup(letter_count, 3))\n# ['a', 'c', 'f']\n\nprint(reverse_lookup(letter_count, 1))\n# []\n</python>\n<solution><python>def reverse_lookup(d, target):\n    result = []\n    for key, val in d.items():\n        if val == target:\n            result.append(key)\n            \n    return result\n    \n    \nletter_count = {'a': 3, 'b': 2, 'c': 3, 'd': 5, 'e': 0, 'f': 3}\nprint(reverse_lookup(letter_count, 3))\n\nprint(reverse_lookup(letter_count, 1))\n</python></solution>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}