{"pageProps":{"titles":["L1.1 — Computer and Programming Basics","L1.2 — Variables & Expressions","L2.1 — Control Flow Statements","Python Style Guide","May 14 — Problem Set","L2.2 — print(), String methods & while loop","May 17 — Problem Set","L3.1 — More loops & Defining functions","May 19 — Problem Set","L3.2 — Lists","May 21 — Problem Set","L4.1 — Tuples, Dictionaries, Sets","May 26 — Problem Set","May 28 — Problem Set","L4.2 — Nested data structures","June 2 — Problem Set","June 4 — Problem Set","L5.1 — Handling Exceptions, File IO","L5.1 — Comparing data structures, Writing modules, Matplotlib"],"slugs":["Lecture-1.1","Lecture-1.2","Lecture-2.1","style-guide","_May14-problem-set","Lecture-2.2","_May17-problem-set","Lecture-3.1","_May19-problem-set","Lecture-3.2","_May21-problem-set","Lecture-4.1","_May26-problem-set","_May28-problem-set","Lecture-4.2","_June2-problem-set","_June4-problem-set","Lecture-5.1","Lecture-5.2"],"post":{"title":"L1.2 — Variables & Expressions","slug":"Lecture-1.2","content":"<h1>Recall</h1>\n<p>We saw the three basic data types in Python:</p>\n<ul>\n<li><inline-code>int</inline-code>: Integers such as <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">..., -1, 0, 1, 2, ...</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span></span></span></span></span></li>\n<li><inline-code>float</inline-code>: Floating-point numbers such as <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>1.2</mn><mo separator=\"true\">,</mo><mn>3.14</mn><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">-1.2, 3.14,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">4</span><span class=\"mpunct\">,</span></span></span></span></span> etc.</li>\n<li><inline-code>str</inline-code>: Text data (a sequence of characters) such as “hello world”, “Python”, etc.</li>\n</ul>\n<p>The terms <sc>Object</sc> and <sc>Value</sc> are used interchangeably.<br>\nSo are the terms <sc>Class</sc> and <sc>Type</sc>.</p>\n<h1>Comments</h1>\n<p>Comments are annotations we add to our program and are ignored by the Python interpreter.</p>\n<p>In Python, we start a comment using <inline-code>#</inline-code>.</p>\n<p>A comment can appear on a line by itself or at the end of a line.</p>\n<p>We use comments to:</p>\n<ul>\n<li>Make the code easier to read and understand by explaining how it works.</li>\n<li>Indicate authorship and license.</li>\n<li>Disable some code (prevent it from executing) but still keeping it in the file.</li>\n</ul>\n<python># Author: Deven\n# My first program\n\n# This is a comment on its own line &#x26; it will be ignored\nprint(\"Just displaying some values:\")\nprint(123)  # int\nprint(1.614)  # float \nprint(\"Bye!\")  # str\n</python>\n<h1>Function calls</h1>\n<p>Function take zero or more input values, perform an action or computation, and return the result value.</p>\n<p>Input values passed to a function are called <sc>arguments</sc>.</p>\n<p>A <sc>Function Call</sc> is an expression that looks like below:</p>\n<div class=\"center code my3\"><p><span class=\"bgblue p1 br5\">function_name(argument1, argument2, …, argumentN)</span></p></div>\n<p>How we say it? — function “takes” argument(s) and “returns” a result.<br>\nThe result is also called the <sc>return value</sc>.</p>\n<p>The number of arguments required by a function depends on how that function is defined.</p>\n<python># print() function takes zero or more arguments and prints values separated by single space\n>>> print(\"Hello\", 123, 1.61)\nHello 123 1.61\n\n# min() function takes 2 or more numbers and returns minimum of those\n>>> min(1, -4, 6)\n-4\n\n# abs() function takes one number and returns absolute value of the number\n>>> abs(-6)\n6\n\n# Gives an error if we do not give exactly one number\n>>> abs(-1, 4)\nTypeError: abs() takes exactly one argument (2 given)\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>Variables</h1>\n<p>In Python, a <sc>Variable</sc> is a name that refers to an object in computer memory.<br>\nA variable can be created using <sc>Assignment Statement</sc>:</p>\n<div class=\"center code my3\"><p><span class=\"bgblue p1 br5\">variable_name = value</span></p></div>\n<p><inline-code>=</inline-code> is known as the <sc>assignment operator</sc>.</p>\n<python># create a variable and assign it value 20\ntemperature = 20  \n\n# variable temperature refers to 20 which is displayed\nprint(\"Today's temperature is\", temperature)\n\n# show type of the variable\nprint(\"Type of temperature variable is\", type(temperature))\n</python>\n<output>Today's temperature is 20\nType of temperature variable is &#x3C;class 'int'>\n</output>\n<h1>Arithmetic with numbers</h1>\n<p>Calculations with numbers can be done using <i>arithmetic operators</i>.</p>\n<python>>>> 1.5 + 1.5\n3.0\n\n>>> 10 - 20\n-10\n\n>>> 42 * 42\n1764\n\n>>> 1 / 5\n0.2\n\n>>> 2 ** 16  ## Exponentiation (x to the power of y)\n65536\n\n>>> temperature = 20\n>>> -temperature  # Unary minus operator\n-20\n\n# Using scientific notation for floating point numbers\n>>> rest_mass_electron = 9.109e-31\n>>> speed_of_light = 3e8\n>>> rest_mass_electron * (speed_of_light ** 2)  # E = mc^2\n8.198099999999999e-14\n</python>\n<h3>Floor division and remainder</h3>\n<img src=\"module-2/divmod.svg\" style=\"margin:2em;\">\n<python>>>> 20 // 3  # floor division\n6\n\n>>> 20 % 3  # remainder\n2\n\n>>> seconds = 320\n>>> seconds / 60   # classic division\n5.333333333333333  \n# 320 seconds equal 5.333 minutes \n\n>>> seconds // 60  # no. of minutes\n5\n>>> seconds % 60 \n20\n# 320 seconds equal 5 min 20 sec\n</python>\n<h2>Result type of arithmetic operations</h2>\n<p>For all operators (except division <inline-code>/</inline-code>), if one or more of the operands are of type <inline-code>float</inline-code>, result value will have type <inline-code>float</inline-code>.</p>\n<python>>>> x = 2 + 1\n>>> print(x, type(x))\n3 &#x3C;class 'int'>\n\n>>> x = 2 + 1.0\n>>> print(x, type(x))\n3.0 &#x3C;class 'float'>\n\n>>> x = 1 / 2  # Classic division always results in float\n>>> print(x, type(x))\n0.5 &#x3C;class 'float'>\n</python>\n<div class=\"px2 py1 my2\" style=\"border: solid 1px lightgray; border-radius:5px; background-color: #d6efd6;\"><p><b class=\"p0\">Try the above examples with other operators!</b></p></div>\n<h2>Converting types explicitly</h2>\n<p>Sometimes we need to convert <inline-code>int</inline-code> to/from <inline-code>float</inline-code> or round a number to desired precision.</p>\n<python>>>> price = 100.6\n>>> int(price)  # truncate fractional part\n100\n\n>>> price = 100.679\n>>> round(price)  # round to nearest int (price to nearest dollar)\n101\n\n>>> round(price, 2)  # round to two digits after decimal (price to nearest cent)\n100.68\n\n>>> price = 100\n>>> float(price)  # convert to float (e.g. to show zero cents)\n100.0\n</python>\n<div class=\"px2 py1 my2\" style=\"border: solid 1px lightgray; border-radius:5px; background-color: #d6efd6;\"><p><b>Question</b></p><p>Write a program that converts 85 degrees Fahrenheit to Celsius and displays the results.</p><p><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mo>=</mo><mfrac><mrow><mn>5</mn><mo stretchy=\"false\">(</mo><mi>f</mi><mo>−</mo><mn>32</mn><mo stretchy=\"false\">)</mo></mrow><mn>9</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">c = \\frac{5(f-32)}{9}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.355em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">9</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">5</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">3</span><span class=\"mord mtight\">2</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p></div>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>Basic string operations</h1>\n<p>Strings are sequences of zero or more characters.</p>\n<p>In Python, strings are enclosed by either single or double quotes.</p>\n<python>\"Hello\"\n'everyone!'\n\"I'm Batman.\"  # single quote allowed inside double quotes,\n'You can call me \"Bruce\".'  # and vice versa.\n'123' # this is a string, not a number!\n\"\" # this is an empty string\n\" \" # this is a string with just one space\n</python>\n<h2>String concatenation</h2>\n<p>Strings can be joined with <inline-code>+</inline-code> operator.</p>\n<python>>>> \"hello\" + \"everyone\"\n'helloeveryone'\n\n>>> name = \"Alice\"\n>>> \"hello \" + name\n'hello everyone'\n\n>>> \"1\" + \"2\" + \"3\"\n'123'\n\n>>> price = 100\n>>> price + \" USD\"\nTypeError: unsupported operand type(s) for +: 'int' and 'str'\n</python>\n<h2>String repetition</h2>\n<p>String can be repeated multiple times using <inline-code>*</inline-code> operator.</p>\n<python>>>> \"Welcome! \" * 3\n'Welcome! Welcome! Welcome! '\n>>> 4 * \"ha\"\n'hahahaha'\n</python>\n<h2>String length</h2>\n<p>The function <inline-code>len()</inline-code> returns length of its argument string.</p>\n<python>>>> password = \"xyz1234\"\n>>> len(password)\n7\n\n>>> len(1234)\nTypeError: object of type 'int' has no len()\n</python>\n<h2>Converting string to/from numbers</h2>\n<p>This is useful for</p>\n<ul>\n<li>Reading/writing text files because numbers will also be stored as text.</li>\n<li>Reading user input from keyboard, which will also be in text form.</li>\n</ul>\n<python>>>> str(1.718)  # float to str\n'1.718'\n\n>>> str(-42)  # int to str\n'-42'\n\n>>> price = 100\n>>> str(price) + \" USD\"  # int to str, then join strings\n'100 USD'\n\n>>> int(\"3370\")  # str to int\n3370\n\n>>> int(\"-3\") * 3  # str to int, then multiply by 3\n-9\n\n>>> int(\"1.35\")  # error because int cannot have decimal point\nValueError: invalid literal for int() with base 10: '1.35'\n\n>>> int(\"123x\")  # contains letter other than digits\nValueError: invalid literal for int() with base 10: '123x'\n\n>>> float(\"1.35\")  # str to float\n1.35\n\n>>> float(\"1.35x\")  # contains letter other than digits\nValueError: could not convert string to float: '1.35x'\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>Getting user input</h1>\n<p>We use <inline-code>input()</inline-code> function to ask for  input data from keyboard.</p>\n<python>number = input(\"Please enter your favorite number: \")\n\nprint(\"You entered:\", number)\n\nprint(\"Your number squared is\", number ** 2)\n</python>\n<output>>>> %Run myprogram.py\nPlease enter your favorite number: 7\nYou entered: 7\nTypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'\n</output>\n<p>How to fix the error in the above program? — Convert string to number!</p>\n<python>input_string = input(\"Please enter your favorite number: \")\nnumber = int(input_string)\n</python>\n<p>Or in a single line:</p>\n<python>number = int(input(\"Please enter your favorite number: \"))\n</python>\n<div class=\"px2 py1 my2\" style=\"border: solid 1px lightgray; border-radius:5px; background-color: #d6efd6;\"><p>What if you enter a number of decimal point? How will you fix the error?</p></div>\n<h1>More on Variables</h1>\n<h2>Variables allow “saving” intermediate results of a computation</h2>\n<p>Consider the question from above:</p>\n<python># convert fahrenheit to celsius\nprint(\"10 F in C is\", 5 * (10 - 32) / 9)\n</python>\n<p>We can use variable to store the result so that we can reuse it in the program later.</p>\n<python>\n# Using variable fahrenheit, now we just change value here\n# instead of changing it in the formula below\nfahrenheit = 10\n\n# Store the result of the expression\ncelsius = 5 * (fahrenheit - 32) / 9\n\nprint(fahrenheit, \"F in C is\", celsius)\n\n# Use variable celsius for more calculations\nprint(\"Adding 10 degrees today:\", celsius + 10)\n</python>\n<h2>Variables can be reassigned new values</h2>\n<python># Create variable name \"number\" and assign a value to it\nnumber = 123  \nprint(number)  # displays 123\n\n# Assign new value to existing variable \"number\"\nnumber = -50\n\nprint(number)  # displays -50\n\n# add 10 and assign the result value to existing variable \"number\"\nnumber = number + 10\n\nprint(number)  # displays -40\n</python>\n<p>New values can be of different type.</p>\n<div style=\"margin-top: 2em; margin-bottom: 2em; width: 1000;\">\n<iframe width=\"1000\" height=\"500\" frameborder=\"0\" src=\"https://pythontutor.com/iframe-embed.html#code=number%20%3D%20123%20%20%23%20an%20int%20value%0Amessage%20%3D%20%22hello%22%20%20%23%20a%20string%0A%0Aprint%28number,%20type%28number%29%29%0Aprint%28message,%20type%28message%29%29%0A%0A%23%20Now%20variable%20number%20refers%20to%20the%20string%20%22hello%22%0Anumber%20%3D%20message%0A%0Aprint%28number,%20type%28number%29%29%0Aprint%28message,%20type%28message%29%29%0A&#x26;codeDivHeight=400&#x26;codeDivWidth=350&#x26;cumulative=false&#x26;curInstr=0&#x26;heapPrimitives=true&#x26;origin=opt-frontend.js&#x26;py=3&#x26;rawInputLstJSON=%5B%5D&#x26;textReferences=false\"> </iframe>\n</div>\n<p>However, variables should be changed with caution as it can produce errors or strange results.</p>\n<python>number = 123  # an int value\nmessage = \"hello\"  # a string\n\n\n# Now variable number refers to the string \"hello\"\nnumber = message\n\nprint(number * 2) # String repetition!\n\nprint(number - 10) # minus won't work with string.\n</python>\n<output>hellohello\nTraceback (most recent call last):\n    print(number - 10)\nTypeError: unsupported operand type(s) for -: 'str' and 'int'\n</output>\n<h2>Rules for variable names</h2>\n<ul>\n<li>A variable name can only contain alpha-numeric characters and underscores <inline-code>A-Z, a-z, 0-9, _</inline-code></li>\n<li>A variable name cannot start with a number</li>\n<li>Variable names are case-sensitive\n<ul>\n<li>(<inline-code>cat</inline-code>, <inline-code>Cat</inline-code>, and <inline-code>CAT</inline-code> are three different variables)</li>\n</ul>\n</li>\n<li>They cannot be keywords.\n<ul>\n<li>Python has 33 reserved keywords, you can see a list of them by typing <inline-code>help(\"keywords\")</inline-code> in the Python shell.</li>\n</ul>\n</li>\n</ul>\n<h2>Good practice for naming variables</h2>\n<ul>\n<li>Name your variable something descriptive of its purpose or content.</li>\n<li>If the variable is one word, all letters should be lowercase. Eg: <inline-code>hour</inline-code>, <inline-code>day</inline-code>.</li>\n<li>If the variable contains more than one word, then they should all be lowercase and each separated by an underscore. This is called <i>snake case</i>.<br>\ne.g. <inline-code>is_sunny</inline-code>, <inline-code>cat_name</inline-code></li>\n<li>Good variable names: <inline-code>hour</inline-code>, <inline-code>is_open</inline-code>,  <inline-code>number_of_books</inline-code>, <inline-code>course_code</inline-code></li>\n<li>Bad variable names: <inline-code>asfdstow</inline-code>, <inline-code>nounderscoreever</inline-code>, <inline-code>ur_stupid</inline-code>, <inline-code>CaPiTAlsANyWHErE</inline-code></li>\n</ul>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>Expressions vs Statements</h1>\n<p>An Expression is any valid combination of values, variables, operators, function calls.<br>\nWhen executed, it always evaluates to a single object.</p>\n<p>In Python Shell, the result value of an expression is show immediately after it is entered.</p>\n<python>>>> x = 3\n>>> y = 4\n>>> x ** 2 + y ** 2  # this expression evaluates to int value\n25\n\n>>> s = \"hello\"\n>>> s * len(s) # this expression evaluates to str value\n'hellohellohellohellohello'\n</python>\n<p>A statement is one or more lines of code that performs an action but does not evaluate to any value.<br>\nSo, statements cannot be used as a part of an expression.</p>\n<python>>>> x = 123  # Assignment statement does not evaluate to anything so nothing shows below\n>>> x  # This is an trivially an expression\n123\n>>> 10 + (x = 123)  # Trying to use assignment statement in an expression\n    10 + (x = 123)\n            ^\nSyntaxError: invalid syntax\n</python>\n<h2>Order of Expression Evaluation</h2>\n<p>When we have different operators the same expression, which operator should apply first?.</p>\n<p>All Python operators have a <sc>precedence</sc> and <sc>associativity</sc>:</p>\n<ul>\n<li>Precedence — for two different kinds of operators, which should be applied first?</li>\n<li>Associativity — for two operators with the same precedence, which should be applied first?</li>\n</ul>\n<p>Table below show operators from higher precedence to lower.</p>\n<div class=\"my2\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Operator</th><th>Associativity</th></tr></thead><tbody><tr><td><inline-code>()</inline-code> (parentheses)</td><td>-</td></tr><tr><td><inline-code>**</inline-code></td><td>Right</td></tr><tr><td>Unary <inline-code>-</inline-code></td><td>-</td></tr><tr><td><inline-code>*</inline-code>, <inline-code>/</inline-code>, <inline-code>//</inline-code>, <inline-code>%</inline-code></td><td>Left</td></tr><tr><td>Binary <inline-code>+</inline-code>, <inline-code>-</inline-code></td><td>Left</td></tr><tr><td><inline-code>=</inline-code> (assignment)</td><td>Right</td></tr></tbody></table></div>\n<python>>>> 3 + 1 * 5 + 1  # Multiplication has higher precedence than addition\n9\n\n>>> (3 + 1) * (5 + 1)  # Need to use parentheses to enforce the order we want\n24\n\n>>> 5 * 7 / 100  # Same precedence so left to right\n0.35\n\n>>> 2 ** 3 ** 2  # Same as 2 ** (3 ** 2) because \"**\" goes right to left\n512\n\n>>> (2 ** 3) ** 2  # Need to use parentheses to enforce the order we want\n64\n\n>>> x = 5\n>>> x = x + 1  # addition happens first and then assignment\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}