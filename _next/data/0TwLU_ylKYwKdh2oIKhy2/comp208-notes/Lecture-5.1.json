{"pageProps":{"allSlugs":[["Lecture-1",[{"title":"1 — Programming Basics","slug":"Lecture-1"}]],["Lecture-2.1",[{"title":"2.1 — Variables, Arithmetic & String operations","slug":"Lecture-2.1"}]],["Lecture-2.2",[{"title":"2.2 — Function calls, Defining functions, Types of Errors","slug":"Lecture-2.2"}]],["Lecture-3.1",[{"title":"3.1 — Order of Expression Evaluation, Comparing Values, Conditional Execution","slug":"Lecture-3.1"}]],["Lecture-3.2",[{"title":"3.2 — if statement, for loop, Indexing & Slicing Strings","slug":"Lecture-3.2"}]],["Lecture-4.1",[{"title":"4.1 — return vs. print, while statement, Modules","slug":"Lecture-4.1"}]],["Lecture-4.2",[{"title":"4.2 — String methods, break & continue statements","slug":"Lecture-4.2"}]],["Lecture-5.1",[{"title":"5.1 — Controlling print(), Nested Loops, Lists","slug":"Lecture-5.1"}]],["Lecture-5.2",[{"title":"5.2 — Scope of variables, List operations","slug":"Lecture-5.2"}]],["Lecture-6.1",[{"title":"6.1 — Tuples, Immutable objects, Sets","slug":"Lecture-6.1"}]],["Lecture-6.2",[{"title":"6.2 — More list & set operations, Dictionaries","slug":"Lecture-6.2"}]],["Lecture-7.1",[{"title":"7.1 — Iterables, Unpacking, Nested Lists","slug":"Lecture-7.1"}]],["Lecture-7.2",[{"title":"7.2 — Nested data structures, Comprehensions, Modules","slug":"Lecture-7.2"}]],["Lecture-8.1",[{"title":"8.1 — Nested list comprehensions, Reading & Writing Files","slug":"Lecture-8.1"}]]],"post":{"slug":"Lecture-5.1","content":"<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"controlling-the-flow-of-execution-with-return-statement\">Controlling the flow of execution with <inline-code>return</inline-code> statement</h2><p>As we have seen, <inline-code>return</inline-code> statement allows us to return a value from a function back to the code that calls the function.</p><p>But at the same time return statement also ends execution of the function.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"\"></h2><p>When return statement is executed, no further code in the function gets executed.</p><hgrid><python>def display(message):\n    print(\"*** \" + message + \" ***\")\n    return\n    print(\"This will never be displayed\")\n    \n    \ndisplay(\"hello\")\n</python><output>*** hello ***\n</output></hgrid><p><inline-code>return</inline-code> can be very useful when placed inside an <inline-code>if</inline-code> statement if we want to exit from the function under certain conditions.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-1\"></h2><p>Using return statement, we can simplify the prime number example:</p><hgrid><python># We saw this before\ndef is_prime(num):\n    prime = True\n\n    if num &#x3C; 2:\n        prime = False\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                prime = False\n                break\n\n    return prime\n</python><python># Simplified version\ndef is_prime(num):\n    if num &#x3C; 2:\n        return False\n\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n\n    return True\n</python></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-2\"></h2><redbox><p><b>Important</b>: we must make sure that all branches/cases in the function return the correct values.</p><p>In previous example, if we forget the last return statement in the simplified <inline-code>is_prime</inline-code> function, <inline-code>return None</inline-code> will happen implicitly, which would be incorrect.</p></redbox></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"be-careful--incorrect-indentation-changes-logic-1\">Be careful — incorrect indentation changes logic (1)</h2><hgrid class=\"ppt-f90\" margin=\"0 0\"><python>def remove_spaces(s):\n    result = \"\" \n    for i in range(len(s)):\n        letter = s[i]\n        if letter != \" \":\n            result = result + letter\n\n    return result\n</python><python>def remove_spaces(s):\n    result = \"\" \n    for i in range(len(s)):\n        letter = s[i]\n    if letter != \" \":\n        result = result + letter\n\n    return result\n</python></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"be-careful--incorrect-indentation-changes-logic-2\">Be careful — incorrect indentation changes logic (2)</h2><hgrid class=\"ppt-f90\" margin=\"0 0\"><python>def remove_spaces(s):\n    result = \"\" \n    for i in range(len(s)):\n        letter = s[i]\n        if letter != \" \":\n            result = result + letter\n\n    return result\n</python><python>def remove_spaces(s):\n    result = \"\" \n    for i in range(len(s)):\n        letter = s[i]\n        if letter != \" \":\n            result = result + letter\n\n        return result  # what will this do?\n</python></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"ascii-code-and-special-characters\">ASCII code and special characters</h2><div style=\"margin: 0 auto;\" class=\"ppt-f80\">Recall ASCII table from a previous lecture:</div><img style=\"margin: 0 auto; width: 70%;\" src=\"module-1/ASCII-Table.png\"></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-3\"></h2><p>Python has built-in functions to convert ASCII code (decimal) to/from a single character.</p><python>print(ord(\"a\"))  # 97, the ASCII code for letter \"a\"\nprint(ord(\"A\"))  # 65\nprint(ord(\"$\"))  # 36\n\nprint(ord(\"hi\"))  # doesn't work for more than one character\n# TypeError: ord() expected a character, but string of length 2 found\n\nprint(chr(70))  # F, the character for ASCII code 70\n\nprint(chr(103))  # g\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-4\"></h2><greenbox><p>Write a program that  shifts each letter in a string to the left by 3 steps according to ASCII table.<br>\ni.e. <code>A → >, B → ?, C → @, D → A, E → B</code>, etc.</p></greenbox><python>word = \"Python\"\n\nresult = \"\"\nfor i in range(len(word)):\n    code = ord(word[i])  # Get ASCII code for the letter\n    code = code - 3  # Shift code by 3\n    # Get letter for the code and add it to result:\n    result = result + chr(code)  \n    \nprint(result)  # Mvqelk\n\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-5\"></h2><p>Text is stored in a file as a sequence of character codes.</p><hgrid margin=\"1em 0\" gap=\"1em\"><python lineno=\"false\">cat dog\n</python><seqbox text=\"99,97,116,32,100,111,103\" margin=\"0\" w=\"2.5\" h=\"2\"></seqbox></hgrid><p>Multiple lines in text:</p><hgrid margin=\"1em 0\" gap=\"1em\"><python lineno=\"false\">cat\ndog\n</python><seqbox text=\"99,97,116,10,100,111,103\" margin=\"0\" w=\"2.5\" h=\"2\"></seqbox></hgrid><p>The <em>newline character</em>, which represents “enter” or “return” key, is also stored when text contains multiple lines.</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"escape-characters\">Escape characters</h2><p>There are special characters, which we may not directly include in a string, e.g.:</p><ul>\n<li><i>newline character</i>: This is the character representing “enter” or “return” key.</li>\n<li><i>tab character</i>: This is the character representing “tab” key.</li>\n</ul><p>Such special characters can be used in a string using escape characters.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-6\"></h2><python># Trying to enter a newline character directly fails:\nmessage = \"Hello\nworld\"\n</python><output>    message = \"Hello\n                   ^\nSyntaxError: EOL while scanning string literal\n</output></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-7\"></h2><p>To include a newline character in a string we can use the escape character <inline-code>\\n</inline-code> in the string:</p><hgrid><python>message = \"hello\\nworld\"\nprint(message)\n</python><output>hello\nworld\n</output></hgrid><p><inline-code>\\n</inline-code> is stored as a single character even though it looks like two.</p><python lineno=\"false\">print(ord(\"\\n\"))  # 10\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-8\"></h2><p>Another escape character is <inline-code>\\t</inline-code> which represents the tab character.<br>\nIt is useful as a separator when displaying values:</p><hgrid><python># print uses space as separator by default\nprint(\"Khalid\", 85)\nprint(\"Reza\", 90)\n\n# Using tab as separator\nprint(\"Khalid\", 85, sep=\"\\t\")\nprint(\"Reza\", 90, sep=\"\\t\")\n</python><output>Khalid 85\nReza 90\nKhalid\t85\nReza\t90\n</output></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"controlling-print-function\">Controlling print() function</h2><p>In previous example, we used a <sc>keyword argument</sc> <inline-code>sep=</inline-code> to tell print which separator to use between values.</p><p>Unlike the usual arguments, keyword arguments are given in the form <inline-code>name=value</inline-code>; in the example <inline-code>sep</inline-code> is the name of argument and <inline-code>\"\\t\"</inline-code> is the value.</p><python># separator can be any string\nprint(\"Alice\", 90, 3.14, sep=\",\")\n# Alice,90,3.14\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-9\"></h2><python>print(\"Alice\", 90, 3.14, sep=\"|\")\n# Alice|90|3.14\n\n# even longer than one character\nprint(\"Alice\", 90, 3.14, sep=\"-----\")\n# Alice-----90-----3.14\n\nprint(\"Alice\", 90, 3.14, sep=\"\")  # No separator!\n# Alice903.14\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-10\"></h2><p>By default, <inline-code>print()</inline-code> function displays a newline  character <inline-code>\\n</inline-code> at end of line.</p><hgrid><python>print(\"Good\", \"morning\")\nprint()  # no arguments, just prints \"\\n\"\nprint(123, 3.14)\n</python><output margin=\"-1em 0 0 0\">Good morning\n\n123 3.14\n</output></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-11\"></h2><p>We can change the <inline-code>end</inline-code> character using another keyword argument to <inline-code>print()</inline-code> function, <inline-code>end=</inline-code>.</p><hgrid><python>print(\"A sequence of numbers:\")\nprint(1, end=\",\")\nprint(4, end=\",\")\nprint(9, end=\",\")\n</python><output>A sequence of numbers:\n1,4,9,\n</output></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-12\"></h2><p><inline-code>end=</inline-code> is useful in a loop:</p><python>N = 10\nfor i in range(N):\n    print(i*i, end=\", \")  # comma and a space\n</python><output>0, 1, 4, 9, 16, 25, 36, 49, 64, 81, \n</output><greenbox><p>Change the above example to not print the last comma. E.g.,</p><output>0, 1, 4, 9, 16, 25, 36, 49, 64, 81\n</output></greenbox></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-13\"></h2><solution><python>N = 10\nfor i in range(N):\n    if i == N - 1:\n        print(i * i)\n    else:\n        print(i * i, end=\", \")\n</python></solution></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"multiline-strings\">Multiline strings</h2><p>Using <inline-code>\\n</inline-code>, we can create a single string that contains all of the following lines:</p><python>shopping_list = \"Shopping list\\n- Milk\\n- Eggs\\n- Apples\\n\"\nprint(shopping_list)\n</python><output>Shopping list\n- Milk\n- Eggs\n- Apples\n</output></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-14\"></h2><p>Python provides a better create multiline strings using <i>triple quotes</i>: <inline-code>'''</inline-code> or <inline-code>\"\"\"</inline-code>.</p><python>>>> shopping_list = \"\"\"Shopping list\n- Milk\n- Eggs\n- Apples\n\"\"\"\n>>> shopping_list\n'Shopping list\\n- Milk\\n- Eggs\\n- Apples\\n'\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"nested-loops\">Nested Loops</h2><p>We can have a for/while loop inside other for/while loops.</p><p>This is useful when we have two sequences and we need all combinations/pairs of items from the sequences.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-15\"></h2><greenbox><p>Write a program that prints all pairs of numbers that sum to <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>7</mn></mrow><annotation encoding=\"application/x-tex\">7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">7</span></span></span></span></span> when two six-sided dice are rolled.</p></greenbox><hgrid><python># outer loop for first die d1:\nfor d1 in range(1, 7):  \n    # inner loop for second die d2\n    for d2 in range(1, 7):\n        if d1 + d2 == 7:\n            print(d1, d2)\n</python><output>1 6\n2 5\n3 4\n4 3\n5 2\n6 1\n</output></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-16\"></h2><greenbox><p>Write a program that takes two string—one with consonants and other with vowels—and combines each consonant with every vowel to print a syllable.</p></greenbox><hgrid margin=\"0\"><python>consonants = \"bdfghjklmn\"\nvowels = \"aeiou\"\n</python><output>ba be bi bo bu \nda de di do du \nfa fe fi fo fu \nga ge gi go gu \nha he hi ho hu \nja je ji jo ju \nka ke ki ko ku \nla le li lo lu \nma me mi mo mu \nna ne ni no nu\n</output></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-17\"></h2><solution><python>consonants = \"bdfghjklmn\"\nvowels = \"aeiou\"\n\nfor i in range(len(consonants)):\n    for j in range(len(vowels)):\n        syllable = consonants[i] + vowels[j]\n        print(syllable, end=\" \")\n    print()  # to start printing from next line\n\n</python></solution></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"lists\">Lists</h2><ul>\n<li>A list is like a container that holds a sequence of objects.</li>\n<li>Objects contained in a list are called <sc>elements</sc> or <sc>items</sc>.</li>\n<li>Lists are ordered! The order in which the items are stored in the list matters.</li>\n<li>Each item is associated with an index (index <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span></span>: first item, index <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></span>: second item, etc.)</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"creating-a-list\">Creating a list</h2><p>A list is created using square brackets, with each item separated by a comma.</p><python>prime_numbers = [2, 3, 5, 7, 11, 13]\nprint(prime_numbers)\n# [2, 3, 5, 7, 11, 13]\n\nprint(type(prime_numbers))\n# &#x3C;class 'list'>\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-18\"></h2><p>A list can contain items of any type. For example we can have a list of strings:</p><python>days = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\n\n# Number of items in the list\nprint(len(days))  # 7\n\nempty_list = []\nprint(len(empty_list))  # 0\n</python><p>A list can contain any number of items, from zero to as many as the computer’s memory allows.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-19\"></h2><p>A list can contains objects of different types.</p><python># list with mixed types\nnumbers = [1, 'two', 3.75]\n</python><p>Items of a list don’t need to be unique.</p><python># list with duplicate values\nnumbers = [5, \"five\", 5]\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"why-use-a-list\">Why use a list?</h2><python># Suppose we want to store grades for multiple students\n\ngrades1 = 80\ngrades2 = 100\ngrades3 = 65\n# ...\n# How many variables?!!\n\n# Use just one variable name \"grades\"\ngrades = [80, 100, 65]\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"indexing-a-list\">Indexing a list</h2><p>We can access an item inside a list using indexing (square brackets), just as we did for strings.</p><python>days = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\nfirst_day = days[0]\nsecond_day = days[1]\nlast_day = days[6]\nprint(first_day, second_day, last_day)  # Mon Tue Sun\n\n# No item at index 7\nprint(days[7])  \n# IndexError: list index out of range\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-20\"></h2><python>days = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\n\n# Negative indexing can be used as well\nprint(days[-1], days[-2])  # Sun Sat\n\nnumbers = [1, 'two', 3.75]\nprint(numbers[0] + numbers[2])  # 4.75\n\nprint(numbers[0] + numbers[1])\n# TypeError: unsupported operand type(s) for +: 'int' and 'str'\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"modifying-the-content-of-a-list\">Modifying the content of a list</h2><p>We can modify the content of a list after it has been created.</p><p>We can change a single item using its index and the assignment operator.</p><python>days = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\ndays[0] = \"Sun\"\nprint(days)\n# ['Sun', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n\ndays[7] = \"No such day\"\n# IndexError: list assignment index out of range\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-21\"></h2><p><inline-code>for</inline-code> loops are very useful for looping through all the items in a list.</p><python># compute an average of grades\ngrades = [85, 78.5, 98, 75, 100]\ntotal = grades[0] + grades[1] + grades[2] + grades[3] + grades[4] \navg = total / 5\nprint(avg)  # prints 87.3\n</python><hgrid margin=\"0.5rem 0\"><p>For instance, we could use a for loop to compute the average of grades.</p><python>grades = [85, 78.5, 98, 75, 100]\n\ntotal = 0\nfor i in range(5):\n   total += grades[i]\n\navg = total / 5\nprint(avg)  # 87.3\n</python></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-22\"></h2><p>Generalized version:</p><python>grades = [85, 78.5, 98, 75, 100]\n\ntotal = 0\nN = len(grades) \nfor i in range(N):\n   total += grades[i]\n\navg = total / N\nprint(avg)  # 87.3\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-23\"></h2><greenbox><p>Try the problem “Dot product” on Ed Lessons.</p></greenbox></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-24\"></h2><greenbox><p>Try the problem “DNA Cut-site” on Ed Lessons.</p></greenbox></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-25\"></h2><greenbox><p>Try the problem “Palindrome” on Ed Lessons (from last week).</p></greenbox><hgrid margin=\"1em 0\" gap=\"4em\"><seqbox text=\"a,b,b,a\" margin=\"1em 0\"></seqbox><seqbox text=\"a,b,c,b,a\" margin=\"2em 0\"></seqbox></hgrid><hgrid margin=\"0\" gap=\"4em\"><seqbox text=\"a,b,a,a\" margin=\"1em 0\"></seqbox><seqbox text=\"a,b,c,c,a\" margin=\"2em 0\"></seqbox></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-26\"></h2><greenbox><p>Try the problem “Smallest and largest divisors” on Ed Lessons (from last week)..</p></greenbox><divider></divider></slide>","title":"5.1 — Controlling print(), Nested Loops, Lists","date":"2024-01-28","published":true,"section":"Lecture-5.1"}},"__N_SSG":true}