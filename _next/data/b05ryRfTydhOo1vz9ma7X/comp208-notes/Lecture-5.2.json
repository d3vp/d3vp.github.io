{"pageProps":{"allSlugs":[["Lecture-1",[{"title":"1 — Programming Basics","slug":"Lecture-1"}]],["Lecture-2.1",[{"title":"2.1 — Variables, Arithmetic & String operations","slug":"Lecture-2.1"}]],["Lecture-2.2",[{"title":"2.2 — Function calls, Defining functions, Types of Errors","slug":"Lecture-2.2"}]],["Lecture-3.1",[{"title":"3.1 — Order of Expression Evaluation, Comparing Values, Conditional Execution","slug":"Lecture-3.1"}]],["Lecture-3.2",[{"title":"3.2 — if statement, for loop, Indexing & Slicing Strings","slug":"Lecture-3.2"}]],["Lecture-4.1",[{"title":"4.1 — return vs. print, while statement, Modules","slug":"Lecture-4.1"}]],["Lecture-4.2",[{"title":"4.2 — String methods, break & continue statements","slug":"Lecture-4.2"}]],["Lecture-5.1",[{"title":"5.1 — Controlling print(), Nested Loops, Lists","slug":"Lecture-5.1"}]],["Lecture-5.2",[{"title":"5.2 — Scope of variables, List operations","slug":"Lecture-5.2"}]],["Lecture-6.1",[{"title":"6.1 — Tuples, Immutable objects, Sets","slug":"Lecture-6.1"}]],["Lecture-6.2",[{"title":"6.2 — More list & set operations, Dictionaries","slug":"Lecture-6.2"}]],["Lecture-7.1",[{"title":"7.1 — Iterables, Unpacking, Nested Lists","slug":"Lecture-7.1"}]],["Lecture-7.2",[{"title":"7.2 — Nested data structures, Comprehensions, Modules","slug":"Lecture-7.2"}]],["Lecture-8.1",[{"title":"8.1 — Nested list comprehensions, Reading & Writing Files","slug":"Lecture-8.1"}]],["Lecture-8.2",[{"title":"8.2 — Shallow vs. deep copy, Handling exceptions","slug":"Lecture-8.2"}]],["Lecture-9.1",[{"title":"9.1 — Object Oriented Programming (OOP)","slug":"Lecture-9.1"}]],["Lecture-9.2",[{"title":"9.2 — Keyword arguments, More on OOP","slug":"Lecture-9.2"}]],["Lecture-10.1",[{"title":"10.1 — NumPy","slug":"Lecture-10.1"}]]],"post":{"slug":"Lecture-5.2","content":"<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"scope-of-variables\">Scope of variables</h2><ul>\n<li>A variable name only exists inside the body of the function in which it is created.\n<ul>\n<li>It does not exist outside the function or in any other functions.</li>\n</ul>\n</li>\n</ul><hgrid><python>def f():\n    x = 3\n    print(\"In f(), x =\", x)\n    \nf()\nprint(x)\n</python><output>In f(), x = 3\nNameError: name 'x' is not defined\n</output></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"\"></h2><ul>\n<li>The <sc>scope</sc> of a variable consists of parts of the program where the variable name exists and can be used.</li>\n<li>Each function has its own <sc>local scope</sc>, which other functions cannot access.</li>\n<li><sc>global scope</sc> consists of names  accessible by the entire module (Python file).</li>\n</ul><p>A variable created inside a function is called a <sc>local variable</sc>.</p><p>A variable created outside any function is called a <sc>global variable</sc>.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-1\"></h2><hgrid><python>def f():\n    x = 3  # local variable\n    # local x is used below!\n    print(\"In f(), x =\", x)  \n\n\nx = 100  # global variable\nf()\nprint(x)  # global x is used\n</python><output>In f(), x = 3\n100\n</output></hgrid><ul>\n<li>As we saw above, it is possible to create a local variable with the same name as a global variable.</li>\n<li>These are considered two different variables, and inside the function only the local one will be used.</li>\n</ul></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-2\"></h2><hgrid><python>def f():\n    # global x is used below!\n    print(\"Inside f(), x =\", x)\n\n\nx = 100  # global variable\nf()\nprint(x)\n</python><output>Inside f(), x = 100\n100\n</output></hgrid><p>What will happen if the global variable <inline-code>x</inline-code> is created after the function call <inline-code>f()</inline-code>?</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"how-variable-name-is-looked-up\">How variable name is looked up?</h2><ul>\n<li>Inside a function, when a name is used:\n<ul>\n<li>First, name is searched within the function (local scope) to see if it exists.</li>\n<li>If name is not found in the function, it is searched globally</li>\n</ul>\n</li>\n<li>Outside a function, name is simply searched globally</li>\n<li>If a name cannot be found anywhere (local or global scope), we get <inline-code>NameError</inline-code> complaining that the name is not defined.</li>\n</ul></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-3\"></h2><p>What will be printed in each case?</p><hgrid margin=\"0\" gap=\"5em\"><python>def f():\n    y = 5\n    print(x)\n\nx = 10\nf()\n</python><python>def f():\n    x = 5 \n    print(x)\n\nx = 10\nf()\nprint(x)\n</python></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-4\"></h2><solution><hgrid gap=\"5em\"><output>10\n</output><output>5\n10\n</output></hgrid></solution></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-5\"></h2><div class=\"ppt-scale-1_25\"><p><b class=\"ppt-f80\">Function parameters are also local to the function.</b></p><iframe width=\"800\" height=\"380\" scrolling=\"no\" style=\"overflow: hidden;\" frameborder=\"0\" src=\"https://pythontutor.com/iframe-embed.html#code=def%20f%28x%29%3A%0A%20%20%20%20print%28%22In%20f%28%29,%20x%20%3D%22,%20x%29%0A%20%20%20%20return%20x%20*%20x%0A%0Ax%20%3D%2010%0Ay%20%3D%20f%28x%29%0Aprint%28f%22Global,%20x%20%3D%20%7Bx%7D,%20y%20%3D%20%7By%7D%22%29&#x26;codeDivHeight=400&#x26;codeDivWidth=360&#x26;cumulative=false&#x26;curInstr=0&#x26;heapPrimitives=true&#x26;origin=opt-frontend.js&#x26;py=3&#x26;rawInputLstJSON=%5B%5D&#x26;textReferences=false\"> </iframe></div></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-6\"></h2><div class=\"ppt-scale-1_25\"><iframe width=\"840\" height=\"420\" scrolling=\"no\" style=\"overflow: hidden;\" frameborder=\"0\" src=\"https://pythontutor.com/iframe-embed.html#code=def%20f%28x%29%3A%0A%20%20%20%20x%20%3D%203%0A%20%20%20%20print%28f%22In%20f%28%29,%20x%20%3D%20%7Bx%7D,%20y%20%3D%20%7By%7D%22%29%0A%20%20%20%20return%20x%20*%20y%0A%0Ax%20%3D%2010%0Ay%20%3D%205%0Az%20%3D%20f%28x%29%0Aprint%28f%22Global,%20x%20%3D%20%7Bx%7D,%20y%20%3D%20%7By%7D,%20z%20%3D%20%7Bz%7D%22%29&#x26;codeDivHeight=400&#x26;codeDivWidth=440&#x26;cumulative=false&#x26;curInstr=0&#x26;heapPrimitives=true&#x26;origin=opt-frontend.js&#x26;py=3&#x26;rawInputLstJSON=%5B%5D&#x26;textReferences=false\"> </iframe></div></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"best-practice\">Best Practice</h2><ul>\n<li>Try to avoid using global variables within functions when possible.\n<ul>\n<li>It is okay to use variables that don’t change (e.g. constants such as <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span></span>)</li>\n<li>It is also okay to use modules inside functions</li>\n</ul>\n</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"lists--concatenation--and-replication-\">Lists — Concatenation <inline-code>+</inline-code> and Replication <inline-code>*</inline-code></h2><python># lists a and b are joined to produce a third list c:\na = [1, 2]\nb = [10, 11, 12]\nc = a + b\nprint(c)\n# [1, 2, 10, 11, 12]\n\na = [1, 2]\n# resulting list consists of repeated items of list a:\nc = a * 3 \nprint(c)\n# [1, 2, 1, 2, 1, 2]\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"membership-operators-in-and-not-in\">membership operators: <inline-code>in</inline-code> and <inline-code>not in</inline-code></h2><p>We can use them to test if an object is present in a list.</p><python>a = [1, 2]\nb = [10, 11, 12]\n\nprint(1 in a)  # True\nprint(11 in a) # False\nprint(5 not in b) # True\n\nx = 3.14\nprint(x in a or x in b)  # False\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-7\"></h2><p><inline-code>in</inline-code>/<inline-code>not in</inline-code> operators are very useful in simplifying code:</p><hgrid><python># Instead of long conditions like this:\nif x == 5 or x == 7 or x == 10:\n    # do something\n</python><python># Now we can do:\nif x in [5, 7, 10]:\n    # do something\n</python></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"slicing-a-list\">Slicing a list</h2><p>Similar to strings, we can also get a sub-list — parts of a list — using slice notation. Slicing creates a new list.</p><python>days = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\n\nprint(days[2:5])\n# ['Wed', 'Thu', 'Fri']\n\nprint(days[:6:2])\n# ['Mon', 'Wed', 'Fri']\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-8\"></h2><python>days = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\n\n# Make a copy of the whole list\nprint(days[:])\n# ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n\n# Makes a reversed copy of the list\nprint(days[::-1])\n# ['Sun', 'Sat', 'Fri', 'Thu', 'Wed', 'Tue', 'Mon']\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"iterating-through-a-list\">Iterating through a list</h2><p>We can either use an index or loop directly over items in a list:</p><hgrid margin=\"0\"><python>def average(nums):\n    total = 0\n\n    for i in range(len(nums)):\n       total += nums[i]\n\n    return total / len(nums)\n\ngrades = [85, 100, 98, 75]\nprint(average(grades))\n</python><python>def average(nums):\n    total = 0\n\n    for x in nums:\n       total += x\n\n    return total / len(nums)\n\ngrades = [85, 100, 98, 75]\nprint(average(grades))\n</python></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-9\"></h2><p>But when we need to modify a list inside a loop we have to use an index:</p><python>def add_bonus(grades, bonus):\n    \"\"\" Add bonus to each grade in grades list\n        (grade should not exceed 100)    \n        Returns: None\n    \"\"\"\n    for i in range(len(grades)):\n        grades[i] = min(grades[i] + bonus, 100)\n        \n        \nassignment_grades = [55, 60, 67, 97]\nadd_bonus(assignment_grades, 5)\nprint(assignment_grades)  # [60, 65, 72, 100]\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"built-in-functions-that-work-with-lists\">Built-in functions that work with lists</h2><python>grades = [90, 70, 60.5, 70, 80]\n\n# len(x): \n#   Returns the number of items in the list x.\nprint(len(grades))  # 5\n\n# sum(x): \n#   Returns the sum of all the numbers in list x.\n#   A TypeError occurs when some item is not a number.\nprint(sum(grades))  # 370.5\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-10\"></h2><python>grades = [90, 70, 60.5, 70, 80]\n\n# min(x) / max(x) : \n#   Returns the smallest/largest item in the list x.\n#   A TypeError occurs if the items cannot be compared.\n\nprint(min(grades))  # 60.5\n\nprint(max(grades))  # 90\n\nprint(min([\"90\", 70, 60.5, 70, 80]))\n# TypeError: '&#x3C;' not supported between instances of 'int' and 'str'\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"list-methods\">List methods</h2><p>Python has several methods that we can call on a list object:</p><python># list.append(x): Adds the item x to the end of the list\n\ngrades = [90, 70, 60.5, 70, 80]\ngrades.append(100)\nprint(grades)  # [90, 70, 60.5, 70, 80, 100]\n\ngrades.append(\"30\")\nprint(grades)  # [90, 70, 60.5, 70, 80, 100, '30']\n\ngrades.append(False)\nprint(grades)  # [90, 70, 60.5, 70, 80, 100, '30', False]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-11\"></h2><p><b>Example:</b></p><python>def filter_values(nums, threshold):\n    ''' Return a new list to include numbers from \n        the list nums that are above threshold\n    '''\n    new_list = []\n    \n    for n in nums:\n        if n > threshold:\n            new_list.append(n)\n\n    return new_list\n\nprint(filter_values([3, 1, 2, 5, 4], 3))  # [5, 4]\nprint(filter_values([3, 1, 2, 5, 4], 5))  # []\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-12\"></h2><python># list.insert(i, x): Adds the item x to the list at index i\n\ngrades = [90, 70, 60.5, 70, 80]\ngrades.insert(0, 100)\nprint(grades)  # [100, 90, 70, 60.5, 70, 80]\n\n# insert() works even when index is greater than length of list\ngrades = [90, 70, 60.5, 70, 80]\ngrades.insert(10, \"B+\")\nprint(grades)  # [90, 70, 60.5, 70, 80, 'B+']\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-13\"></h2><python># list.remove(x): \n#   Removes the first occurrence of the item x in the list. \n#   A ValueError occurs if there is no such item.\n\ngrades = [90, 70, 60.5, 70, 80, 'B+']\ngrades.remove(70)\nprint(grades)  # [90, 60.5, 70, 80, 'B+']\n\ngrades.remove(\"B+\")\nprint(grades)  # [90, 60.5, 70, 80]\n\ngrades.remove(60)\n# ValueError: list.remove(x): x not in list\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-14\"></h2><python># list.pop(i): \n#   Removes and returns item at index i \n# list.pop(): \n#   Removes and returns the last item from the list\n\ngrades = [90, 70, 60.5, 70, 80, 'B+']\nlast_item = grades.pop()\nprint(last_item)  # B+\nprint(grades)  # [90, 70, 60.5, 70, 80]\n\nsecond_item = grades.pop(1)\nprint(second_item)  # 70\nprint(grades)  # [90, 60.5, 70, 80]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-15\"></h2><python># list.count(x) : \n#   Returns the number of occurrences of the item x. \n\ngrades = [90, 70, 60.5, 70, 80, 'B+']\nprint(grades.count(70))  # 2\nprint(grades.count(\"B+\"))  # 1\nprint(grades.count(60))  # 0\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-16\"></h2><python># list.index(x) : \n#   Returns the index of the first occurrence of item x in list. \n#   A ValueError occurs if item x is not found in list.\n\ngrades = [90, 70, 60.5, 70, 80, 'B+']\n\nprint(grades.index(70))  # 1\nprint(grades.index(60)) # ValueError: 60 is not in list\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-17\"></h2><python># list.extend(sequence) : \n#   Extend list by appending items from the sequence.\n\ngrades = [90, 70, 60.5, 70, 80]\n\ngrades.extend([100, 95])\nprint(grades)  # [90, 70, 60.5, 70, 80, 100, 95]\n\ngrades.extend(\"cat\")\nprint(grades)\n# [90, 70, 60.5, 70, 80, 100, 95, 'c', 'a', 't']\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"lists-and-strings\">Lists and Strings</h2><p>There are built-in functions and string methods that allows us to transform strings to/from lists.</p><python># list(seq): built-in function which converts a sequence (such as\n#   a string or a list) into a list\n\nfruit = \"apple\"\nletters = list(fruit)\nprint(letters)  # ['a', 'p', 'p', 'l', 'e']\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-18\"></h2><python># s.split(): Breaks the string s using whitespace\n#   (spaces, tab character and newline) as the separator and\n#   returns a list of strings containing the separated parts\n\ndata = \"Red Green Blue\"\nnames = data.split()\nprint(names)  # ['Red', 'Green', 'Blue']\n\n# Multiple spaces are also removed\ndata = \"  Red    Green     Blue  \"\nnames = data.split()\nprint(names)  # ['Red', 'Green', 'Blue']\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-19\"></h2><python>data = \"Red\\tGreen\\tBlue\" # separated by tab\nnames = data.split()\nprint(names)  # ['Red', 'Green', 'Blue']\n\ndata = \"\"\"Red\nGreen\nNavy Blue\"\"\"\nnames = data.split()\nprint(names)  # ['Red', 'Green', 'Navy', 'Blue']\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-20\"></h2><python># s.splitlines(): Breaks a multi-lines strings into separate lines\n#   and returns a list containing those lines.\n\ndata = \"\"\"Red\n    Green\nNavy Blue\n\"\"\"\nnames = data.splitlines()\nprint(names)  # ['Red', '    Green', 'Navy Blue']\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-21\"></h2><hgrid margin=\"0 0 0 -1em\"><python># s.strip():  Return a copy of the string with \n#     leading and trailing whitespace removed.\n# s.lstrip(): removes leading whitespace only \n# s.rstrip(): removes trailing whitespace only \n\nname = \"    Green    \"\nprint(\"|\" + name + \"|\") \nprint(\"|\" + name.strip() + \"|\")\nprint(\"|\" + name.lstrip() + \"|\")\nprint(\"|\" + name.rstrip() + \"|\")\n</python><output>|    Green    |\n|Green|\n|Green    |\n|    Green|\n</output></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-22\"></h2><hgrid margin=\"0 0 0 -2em\" class=\"ppt-f95\"><python># s.strip(chars):  Return a copy of the string \n# with leading and trailing chars removed.\n# s.lstrip(chars): removes leading chars only \n# s.rstrip(chars): removes trailing chars only \n\ntext = \"...#some . text   #...\"\n\nprint(text.strip(\".\"))\nprint(text.lstrip(\".\"))\nprint(text.rstrip(\".\"))\n\n# multiple chars to remove\nprint(text.strip(\". #\"))\n</python><output>#some . text   #\n#some . text   #...\n...#some . text   #\nsome . text\n</output></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-23\"></h2><python># s.split(sep): Breaks the string s using the separator string sep\n#   and returns a list of strings containing the separated parts\n\ndata = \"Red,Green,Blue\"\nnames = data.split(\",\")\nprint(names)  # ['Red', 'Green', 'Blue']\n\ndata = \"Red,   Green,   Blue\"\nnames = data.split(\",\")\nprint(names)  # ['Red', '   Green', '   Blue'] \n# notice space in strings above\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-24\"></h2><python># sep.join(L): joins all the strings in the list L using \n#   the string sep and returns the joined string.\n\nnames = ['Red', 'Green', 'Blue']\njoined = \" \".join(names)\nprint(joined)  # Red Green Blue\n\n# a comma\njoined = \",\".join(names)\nprint(joined)  # Red,Green,Blue\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-25\"></h2><python># a comma and a space\nnames = ['Red', 'Green', 'Blue']\njoined = \", \".join(names)\nprint(joined)  # Red, Green, Blue\n\n# empty string, no separator\nletters = [\"a\", \"p\", \"p\", \"l\", \"e\"]\njoined = \"\".join(letters)\nprint(joined)  # apple\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-26\"></h2><greenbox><p>Try the problem “Parsing a string” on Ed Lessons.</p></greenbox></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-27\"></h2><greenbox><p>Try the problem “Puzzle: Switching 100 light bulbs” on Ed Lessons.</p></greenbox><divider></divider></slide>","title":"5.2 — Scope of variables, List operations","date":"2024-01-30","published":true,"section":"Lecture-5.2"}},"__N_SSG":true}