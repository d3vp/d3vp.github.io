{"pageProps":{"allSlugs":[["Lecture-1",[{"title":"1 — Programming Basics","slug":"Lecture-1"}]],["Lecture-2.1",[{"title":"2.1 — Variables, Arithmetic & String operations","slug":"Lecture-2.1"}]],["Lecture-2.2",[{"title":"2.2 — Function calls, Defining functions, Types of Errors","slug":"Lecture-2.2"}]],["Lecture-3.1",[{"title":"3.1 — Order of Expression Evaluation, Comparing Values, Conditional Execution","slug":"Lecture-3.1"}]],["Lecture-3.2",[{"title":"3.2 — if statement, for loop, Indexing & Slicing Strings","slug":"Lecture-3.2"}]],["Lecture-4.1",[{"title":"4.1 — return vs. print, while statement, Modules","slug":"Lecture-4.1"}]],["Lecture-4.2",[{"title":"4.2 — String methods, break & continue statements","slug":"Lecture-4.2"}]],["Lecture-5.1",[{"title":"5.1 — Controlling print(), Nested Loops, Lists","slug":"Lecture-5.1"}]],["Lecture-5.2",[{"title":"5.2 — Scope of variables, List operations","slug":"Lecture-5.2"}]],["Lecture-6.1",[{"title":"6.1 — Tuples, Immutable objects, Sets","slug":"Lecture-6.1"}]],["Lecture-6.2",[{"title":"6.2 — More list & set operations, Dictionaries","slug":"Lecture-6.2"}]],["Lecture-7.1",[{"title":"7.1 — Iterables, Unpacking, Nested Lists","slug":"Lecture-7.1"}]],["Lecture-7.2",[{"title":"7.2 — Nested data structures, Comprehensions, Modules","slug":"Lecture-7.2"}]],["Lecture-8.1",[{"title":"8.1 — Nested list comprehensions, Reading & Writing Files","slug":"Lecture-8.1"}]],["Lecture-8.2",[{"title":"8.2 — Shallow vs. deep copy, Handling exceptions","slug":"Lecture-8.2"}]],["Lecture-9.1",[{"title":"9.1 — Object Oriented Programming (OOP)","slug":"Lecture-9.1"}]],["Lecture-9.2",[{"title":"9.2 — Keyword arguments, More on OOP","slug":"Lecture-9.2"}]],["Lecture-10.1",[{"title":"10.1 — NumPy","slug":"Lecture-10.1"}]]],"post":{"slug":"Lecture-3.1","content":"<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"debugging-in-thonny-to-understand-expression-evaluation\"><span class=\"ppt-f80\">Debugging in Thonny to understand expression evaluation</span></h2><div class=\"ppt-f87\"><p>In Thonny, we can use debugging features to understand how expressions are evaluated:</p><ul>\n<li>To show variables and their values, go to menu “View -> Variables”</li>\n<li>First, run program in <i>debug mode</i> by clicking the “Debug current script” button (located next to the “Run current script” button and looks like a bug)</li>\n<li>Then, we have two options:\n<ul>\n<li>Run the program line-by-line using “Step over” button next to the “Debug” button</li>\n<li>Run program going inside each expression using “Step into” button (located next to “Step over” button)</li>\n</ul>\n</li>\n</ul></div></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"\"></h2><p>Try the following examples in Thonny and use debug:</p><python>x = 7\n\n# Increment value of variable x by 1\nx = x + 1\n\n#\ny = x * x + 2 * (x + 1) + max(x + 1, 5)\n\n# Calling print() with 4 arguments\nprint(\"x =\", x, \"y =\", y)\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-1\"></h2><python>x1 = 1.5\ny1 = 2\n\nprint(\"Given points:\", \"(\", x1, \",\", y1, \")\")\n\npoint1 = \"(\" + str(x1) + \", \" + str(y1) + \")\" \nprint(\"Given points:\", point1)\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"boolean-values\">Boolean Values</h2><p>Python has two values <inline-code>True</inline-code> and <inline-code>False</inline-code> of type <inline-code>bool</inline-code>, which are useful for expressing and storing   yes/no or true/false kind of data.</p><python>>>> True\nTrue\n>>> False\nFalse\n>>> type(True)\n&#x3C;class 'bool'>\n>>> type(False)\n&#x3C;class 'bool'>\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"comparison-operators\">Comparison Operators</h2><p><sc>comparison operators</sc>, also known as <i>relational operators</i>, are used to compare two values, such as numbers or string.<br>\nThe result of such comparison is always a <inline-code>bool</inline-code> value i.e. <inline-code>True</inline-code> or <inline-code>False</inline-code>.</p><div class=\"hgrid\"><python># are these numbers equal?\n>>> 10 == 10  \nTrue\n>>> 10 == 20\nFalse\n</python><python>>>> x = 5\n>>> y = 10\n>>> x == y\nFalse\n>>> x &#x3C; y\nTrue\n>>> x > y\nFalse\n</python></div></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-2\"></h2><python># A variable can store the result of a boolean expression \n# (just like we did for arithmetic expressions)\n>>> x = 3\n>>> is_positive = (x > 0)\n>>> is_positive\nTrue\n\n>>> x = 5\n>>> y = 5\n>>> is_equal = (x == y)\n>>> is_equal\nTrue\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"boolean-expressions\">Boolean Expressions</h2><p>A <sc>boolean expression</sc> is an expression that evaluates to either <inline-code>True</inline-code> or <inline-code>False</inline-code>.\nExamples above show how boolean expressions are created using comparison operators.</p><div class=\"p1 br5 bgred\"><ul>\n<li>Common error is using <inline-code>=</inline-code> (single equals sign) instead of <inline-code>==</inline-code> (double equals sign)</li>\n<li><inline-code>=</inline-code> is the assignment operator, used to create variable and assign it a value</li>\n<li><inline-code>==</inline-code> is a comparison operator used to check for equality between two values</li>\n</ul></div></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"list-of-comparison-operators\">List of comparison operators</h2><ul>\n<li><inline-code>x == y</inline-code> — <inline-code>True</inline-code> if <inline-code>x</inline-code> is equal to <inline-code>y</inline-code>, otherwise <inline-code>False</inline-code></li>\n<li><inline-code>x != y</inline-code> — <inline-code>True</inline-code> if <inline-code>x</inline-code> is not equal to <inline-code>y</inline-code>, otherwise <inline-code>False</inline-code></li>\n<li><inline-code>x &#x3C; y</inline-code> — <inline-code>True</inline-code> if <inline-code>x</inline-code> is less than <inline-code>y</inline-code>, otherwise <inline-code>False</inline-code></li>\n<li><inline-code>x > y</inline-code> — <inline-code>True</inline-code> if <inline-code>x</inline-code> is greater than <inline-code>y</inline-code>, otherwise <inline-code>False</inline-code></li>\n<li><inline-code>x &#x3C;= y</inline-code> — <inline-code>True</inline-code> if <inline-code>x</inline-code> is less than or equal to <inline-code>y</inline-code>, otherwise <inline-code>False</inline-code></li>\n<li><inline-code>x >= y</inline-code> — <inline-code>True</inline-code> if <inline-code>x</inline-code> is greater than or equal to <inline-code>y</inline-code>, otherwise <inline-code>False</inline-code></li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"order-of-operations\">Order of operations</h2><p>All comparison operators (e.g. <inline-code>==</inline-code>, <inline-code>!=</inline-code>, etc.) have same priority and are evaluated from left to right.</p><p>All arithmetic and string operators have higher priority than comparison operators.</p><python>>>> x = 5\n# + operator will be evaluated before ==\n>>> x + 1 == 6\nTrue\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-3\"></h2><div class=\"p1 br5 bggreen\"><p>Write a program that takes an integer as input from the user and displays on your screen whether it is true or false that such integer is even.</p><div class=\"hgrid\"><output>Enter a number: 5\n5 is an even number: False\n</output><output>Enter a number: 8\n8 is an even number: True\n</output></div><python>num = int(input(\"Enter a number: \"))\n# Write code below\n</python></div></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-4\"></h2><solution><python>num = int(input(\"Enter a number: \"))\n\n# a number is even if remainder is 0 when it is divided by 2\nis_even = (num % 2 == 0)\n\nprint(num, \"is an even number:\", is_even)\n\n# without using extra variable:\n# print(num, \"is an even number:\", num % 2 == 0)\n</python></solution></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"comparing-strings\">Comparing strings</h2><p>Comparison operators work for strings as well.<br>\nThe comparison is done <i>alphabetically</i> i.e. following a dictionary order</p><div class=\"hgrid\"><python>>>> \"cat\" == \"cat\"\nTrue\n>>> \"cat\" == \"dog\"\nFalse\n>>> \"cat\" != \"Cat\"\nTrue\n</python><python># \"c\" appears before \"d\" alphabetically\n>>> \"cat\" &#x3C; \"dog\"\nTrue\n\n# A-Z appear before a-z alphabetically\n>>> \"cat\" &#x3C; \"Dog\"\nFalse\n</python></div></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-5\"></h2><python># Objects of different types are always not equal\n>>> \"cat\" == 123\nFalse\n\n# inequality is not allowed \n# between a number and str\n>>> \"cat\" &#x3C; 123\nTypeError: '&#x3C;' not supported between instances of 'str' and 'int'\n\n# All of the above examples work the same when using variables\n>>> s1 = \"cat\"\n>>> s2 = \"dog\"\n>>> s1 == s2\nFalse\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"equality-and-floating-point-numbers\">Equality and floating point numbers</h2><p>Consider following example:</p><python>>>> x = 1.1 + 2.2\n>>> x == 3.3  # why is this False?\nFalse\n</python><ul>\n<li>As we saw earlier, a floating-point number is stored with 64-bit <i>finite precision</i>.</li>\n<li>This means that a number may not be stored as precisely as we would like.</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"correct-way-to-check-if-two-float-values-are-equal\">Correct way to check if two <inline-code>float</inline-code> values are equal</h2><p>We should check if they are “close enough”.</p><python>>>> epsilon = 0.000001  # define how close two numbers need to be\n\n>>> x = 1.1 + 2.2\n>>> x\n3.3000000000000003\n\n# Check if x and 3.3 are within epsilon distance\n>>> abs(x - 3.3) &#x3C; epsilon\nTrue\n</python><p>The epsilon value depends on the application and how much error we are willing tolerate.</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"logical-operators\">Logical Operators</h2><p>Logical operators are useful to combine multiple conditions.</p><p>Logical operators take boolean expressions as operands and produce a result of type <inline-code>bool</inline-code> when evaluated.</p><p>Python has 3 boolean operators:</p><ul>\n<li><inline-code>not</inline-code> — a unary operator</li>\n<li><inline-code>and</inline-code> — binary operator</li>\n<li><inline-code>or</inline-code> — binary operator</li>\n</ul></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-6\"></h2><p>Suppose <inline-code>x</inline-code> is a variable of type <inline-code>bool</inline-code>:</p><div class=\"code p1\" style=\"font-size: 0.75em;\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>x</th><th>not x</th></tr></thead><tbody><tr><td>False</td><td>True</td></tr><tr><td>True</td><td>False</td></tr></tbody></table></div><p><inline-code>not x</inline-code> evaluates to the opposite value of <inline-code>x</inline-code>.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-7\"></h2><p>Suppose <inline-code>x</inline-code> and <inline-code>y</inline-code> are variables of type <inline-code>bool</inline-code>:</p><div class=\"hgrid\"><div class=\"code ppt-py2 ppt-f80\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>x</th><th>y</th><th>x and y</th></tr></thead><tbody><tr><td>True</td><td>True</td><td>True</td></tr><tr><td>True</td><td>False</td><td>False</td></tr><tr><td>False</td><td>True</td><td>False</td></tr><tr><td>False</td><td>False</td><td>False</td></tr></tbody></table></div><div class=\"code ppt-py2 ppt-f80\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>x</th><th>y</th><th>x or y</th></tr></thead><tbody><tr><td>True</td><td>True</td><td>True</td></tr><tr><td>True</td><td>False</td><td>True</td></tr><tr><td>False</td><td>True</td><td>True</td></tr><tr><td>False</td><td>False</td><td>False</td></tr></tbody></table></div></div><p><inline-code>x and y</inline-code> evaluates to <inline-code>True</inline-code> if and only if both <inline-code>x</inline-code> and <inline-code>y</inline-code> are <inline-code>True</inline-code>.</p><p><inline-code>x or y</inline-code> evaluates to <inline-code>False</inline-code> if and only if both <inline-code>x</inline-code> and <inline-code>y</inline-code> are <inline-code>False</inline-code>.</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"order-of-operations-1\">Order of operations</h2><p>In order of higher to lower priority: <inline-code>not</inline-code>, <inline-code>and</inline-code>, <inline-code>or</inline-code></p><p>As usual, we can use parentheses in order to change the priority.</p><div class=\"hgrid\"><div style=\"border-right: solid 1px black;\"><p>What does <inline-code>b and not a or b</inline-code> evaluate to if <inline-code>a = False</inline-code> and <inline-code>b = True</inline-code> ?</p><div class=\"code\"><ul>\n<li>b and not a or b</li>\n<li>True and not False or True</li>\n<li>True and True or True</li>\n<li>True or True</li>\n<li>True</li>\n</ul></div></div><div><p>What does <inline-code>a and not (a or b)</inline-code> evaluate to if <inline-code>a = True</inline-code> and <inline-code>b = False</inline-code> ?</p><div class=\"code\"><ul>\n<li>a and not (a or b)</li>\n<li>True and not (True or False)</li>\n<li>True and not True</li>\n<li>True and False</li>\n<li>False</li>\n</ul></div></div></div></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"updated-operator-precedence-table\">Updated operator precedence table</h2><div class=\"hgrid\"><div class=\"ppt-f80\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Operator</th><th>Associativity</th></tr></thead><tbody><tr><td><inline-code>()</inline-code> (parentheses)</td><td>-</td></tr><tr><td><inline-code>**</inline-code></td><td>Right</td></tr><tr><td>Unary <inline-code>-</inline-code></td><td>-</td></tr><tr><td><inline-code>*</inline-code>, <inline-code>/</inline-code>, <inline-code>//</inline-code>, <inline-code>%</inline-code></td><td>Left</td></tr><tr><td>Binary <inline-code>+</inline-code>, <inline-code>-</inline-code></td><td>Left</td></tr><tr><td><inline-code>==</inline-code>, <inline-code>!=</inline-code>, <inline-code>&#x3C;</inline-code>, <inline-code>></inline-code>, <inline-code>&#x3C;=</inline-code>, <inline-code>>=</inline-code></td><td>Left</td></tr><tr><td><inline-code>not</inline-code></td><td>-</td></tr><tr><td><inline-code>and</inline-code></td><td>Left</td></tr><tr><td><inline-code>or</inline-code></td><td>Left</td></tr><tr><td><inline-code>=</inline-code> (assignment)</td><td>Right</td></tr></tbody></table></div><p>You don’t need to memorize all this, use parenthesis when in doubt!</p></div></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"try-these-examples-in-thonny\">Try these examples in Thonny</h2><p>Change the value of x and see results of boolean expressions.</p><python>x = 30\n# Is an even number greater than 20?\nprint(x % 2 == 0 and x > 20)\n\nx = 10\n# Is an even number or a multiple of 5 greater than 20?\nprint(x % 2 == 0 or x % 5 == 0 and x > 20)\n\n# Is a multiple of 2 or 5, greater than 20? \nprint((x % 2 == 0 or x % 5 == 0) and x > 20)\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-8\"></h2><div class=\"px1 py025 bggreen\"><p><b>Try it!</b></p><p>Write a program that takes 3 integers <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo separator=\"true\">,</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x, y, z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span></span> as inputs and prints out <inline-code>True</inline-code> if <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span> is an even number between <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span></span> and <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span></span>, <inline-code>False</inline-code> otherwise. Assume all 3 numbers will be different.</p><python># Retrieve inputs from the user\nx = int(input(\"Enter the x: \"))\ny = int(input(\"Enter the y: \"))\nz = int(input(\"Enter the z: \"))\n\n# Write code below\n</python></div></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-9\"></h2><solution><python># Retrieve inputs from the user\nx = int(input(\"Enter the x: \"))\ny = int(input(\"Enter the y: \"))\nz = int(input(\"Enter the z: \"))\n\n# check if y is even\nis_even = y % 2 == 0\n\n# check if y is between x and z\nis_between = (x &#x3C; y and y &#x3C; z) or (z &#x3C; y and y &#x3C; x)\n\nprint(is_even and is_between)\n</python></solution></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"flow-of-execution\">Flow of execution</h2><ul>\n<li>Flow of execution refers to order in which statements (lines of code) in our program are executed.</li>\n<li>So far in our programs, each line was executed unconditionally.</li>\n<li>For most programs, it is not enough as we need to make choices or run code repeatedly.</li>\n</ul><p>We need to control the flow of execution in our programs.</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"control-flow\">Control flow</h2><p>The control flow of a program determines:</p><ul>\n<li>Which parts of the code should always be executed</li>\n<li>Which parts should be executed only under certain conditions</li>\n<li>Which parts should be executed repeatedly</li>\n</ul><p>All of these can be achieved using control flow statements:</p><ul>\n<li><inline-code>if</inline-code> statement for conditional execution</li>\n<li><inline-code>for</inline-code> and <inline-code>while</inline-code> loops for repeated execution</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"if-statement--to-execute-or-not-to-execute\"><code>if</code> statement — to execute or not to execute</h2><hgrid cols=\"1fr 4fr\" margin=\"0 0\" gap=\"2em\"><hgrid><div class=\"px1 py025 br5\" style=\"background-color: white; white-space: pre;\"><p><code class=\"bgred\">if</code>  <code class=\"bggreen\">condition</code>  <code class=\"bgyellow\">:</code>\n<code>    </code><code class=\"bgblue\">code block</code></p></div></hgrid><div><ul>\n<li><code class=\"bggreen\">condition</code> must be a boolean expression</li>\n<li><code class=\"bgblue\">code block</code> is one of more Python statements</li>\n<li><code class=\"bgblue\">code block</code> is executed only if the condition is True, otherwise it is skipped.</li>\n</ul></div></hgrid><div style=\"margin-top: -1em;\"><p>Notice space before code block. It is called <sc>indentation</sc>.</p><p></p><div class=\"bgred px1 py025\">Indentation is required to tell Python that the code belongs inside <inline-code>if</inline-code> statement.</div><p></p><p>Typically, 4 spaces are used for indentation. We can use <i>tab</i> key to indent.</p></div></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-10\"></h2><p>Try the following examples with different values for variables.</p><python place=\"start\">x = 10  \nif x > 0:\n    print(x, \"is positive\")\n</python><python place=\"start\">num = -5.2\n\nabsolute_num = num\n\nif num &#x3C; 0:\n    absolute_num = -num\n    \nprint(\"Absolute value of\", num, \"is\", absolute_num)\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-11\"></h2><python>x = 1000\ny = 123\n\nmin_value = x\n\nif y &#x3C; min_value:\n    min_value = y\n    \nprint(\"Minimum of\", x, \"and\", y, \"is\", min_value)\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"if-statement-with-else-part\"><inline-code>if</inline-code> statement with <inline-code>else</inline-code> part</h2><p><inline-code>if</inline-code> statements can have <inline-code>else</inline-code> part to make a choice between two code blocks.</p><hgrid cols=\"1fr 4fr\" margin=\"0 0\" gap=\"2em\"><hgrid><div class=\"px1 py025 br5\" style=\"background-color: white; white-space: pre;\"><p><code class=\"bgred\">if</code>  <code class=\"bggreen\">condition</code>  <code class=\"bgyellow\">:</code>\n<code>    </code><code class=\"bggreen\">code block<sub>1</sub></code>\n<code class=\"bgred\">else</code> <code class=\"bgyellow\">:</code>\n<code>    </code><code class=\"bgblue\">code block<sub>2</sub></code></p></div></hgrid><div><ul>\n<li>When <code class=\"bggreen\">condition</code> is <inline-code>True</inline-code>, <code class=\"bggreen\">code block<sub>1</sub></code> is executed</li>\n<li>Otherwise (<code class=\"bggreen\">condition</code> is <inline-code>False</inline-code>) and <code class=\"bgblue\">code block<sub>2</sub></code> is executed</li>\n<li>The code blocks are also called <sc>branches</sc> of the if-statement.</li>\n</ul></div></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-12\"></h2><python>x = 10  # change this to -5 and run\n\nif x > 0:\n   print(\"x is positive.\")\nelse:\n    print(\"x is not positive.\")\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-13\"></h2><div class=\"p2 bggreen\"><p>Write a program that takes an integer as input from the user and displays whether the number is even or odd.</p><hgrid><output>Please enter a number: 5\nThe number 5 is odd\n</output><output>Please enter a number: 8\nThe number 8 is even\n</output></hgrid></div></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-14\"></h2><solution><python>num = int(input(\"Please enter a number: \"))\n\n# a number is even if remainder is zero when divided by 2\nif num % 2 == 0:\n    print(\"The number\", num, \"is even\")\nelse:\n    print(\"The number\", num, \"is odd\")\n</python></solution><divider></divider></slide>","title":"3.1 — Order of Expression Evaluation, Comparing Values, Conditional Execution","date":"2024-01-15","published":true,"section":"Lecture-3.1"}},"__N_SSG":true}