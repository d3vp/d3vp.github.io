{"pageProps":{"titles":["L1.1 — Computer and Programming Basics","L1.2 — Variables & Expressions","L2.1 — Control Flow Statements","Python Style Guide","May 14 — Problem Set","L2.2 — print(), String methods & while loop","May 17 — Problem Set","L3.1 — More loops & Defining functions","May 19 — Problem Set","L3.2 — Lists","May 21 — Problem Set","L4.1 — Tuples, Dictionaries, Sets","May 26 — Problem Set","May 28 — Problem Set","L4.2 — Nested data structures","June 2 — Problem Set","June 4 — Problem Set","L5.1 — Handling Exceptions, File IO","L5.2 — Comparing data structures, Writing modules, Matplotlib","June 9 — Problem Set","L6.1 — Object oriented programming","June 16 — Problem Set"],"slugs":["Lecture-1.1","Lecture-1.2","Lecture-2.1","style-guide","_May14-problem-set","Lecture-2.2","_May17-problem-set","Lecture-3.1","_May19-problem-set","Lecture-3.2","_May21-problem-set","Lecture-4.1","_May26-problem-set","_May28-problem-set","Lecture-4.2","_June2-problem-set","_June4-problem-set","Lecture-5.1","Lecture-5.2","_June9-problem-set","Lecture-6.1","_June16-problem-set"],"post":{"title":"June 16 — Problem Set","slug":"_June16-problem-set","content":"<p>In this problem set we will create two classes <inline-code>Book</inline-code> and <inline-code>BookStore</inline-code> in steps.</p>\n<ol>\n<li>\n<p>Define a new class <inline-code>Book</inline-code>.</p>\n<ul>\n<li>Every <inline-code>Book</inline-code> object has the following attributes: id_num (int),  title (str),  author (str), genre (str), and  price (float). Write a constructor:\n<ul>\n<li>5 arguments: to initialize respective attributes.</li>\n</ul>\n</li>\n</ul>\n<solution><python>class Book:\n    \"\"\"\n    Represents a book\n    \n    Instance Attributes: id_num (int), title (str), author (str),\n                        genre (str), price (float)\n    \"\"\"\n    def __init__(self, id_num, title, author, genre, price):\n        self.id_num = id_num\n        self.title = title\n        self.author = author\n        self.genre = genre\n        self.price = price\n</python></solution>\n</li>\n<li>\n<p>Add the method <inline-code>__str__</inline-code> which returns a string containing information about the book object (<inline-code>self</inline-code>). Use title, author and price attributes in the string, separated by a <inline-code>\", \"</inline-code> (a comma followed by a space).</p>\n<python>b = Book(1, \"Animal Farm\", \"G. O.\", \"Satire\", 15.0)\nprint(b)\n#Animal Farm, G. O., $15.0\n</python>\n<solution><python>class Book:\n    # ... methods defined earlier ...\n\n    def __str__(self):\n        return self.title + \", \" + self.author + \", $\" + str(self.price)\n</python></solution>\n</li>\n<li>\n<p>Add a method called <inline-code>on_sale(self)</inline-code> which modifies the Book object (<inline-code>self</inline-code>) so that it has half the price it used to have. Round the resulting price to 2 digits.</p>\n<python>b = Book(1, \"Animal Farm\", \"G. O.\", \"Satire\", 15.0)\nb.on_sale()\nprint(b.price)\n#7.5\n</python>\n<solution><python>class Book:\n    # ... methods defined earlier ...\n\n    def on_sale(self):\n        self.price = round(self.price / 2, 2)\n</python></solution>\n</li>\n<li>\n<p>Add a method called <inline-code>is_cheaper(self, other_book)</inline-code> which takes a Book object <inline-code>other_book</inline-code> as argument and returns <inline-code>True</inline-code> if the <inline-code>self</inline-code> book costs less than the <inline-code>other_book</inline-code>.</p>\n<python>b1 = Book(1, \"Animal Farm\", \"G.O.\", \"Satire\", 15.0)\nb2 = Book(2, \"Harry Potter\", \"J.K.R.\", \"Fantasy\", 30.0)\nprint(b1.is_cheaper(b2))  # True\nprint(b2.is_cheaper(b1))  # False\n</python>\n<solution><python>class Book:\n    # ... methods defined earlier ...\n    \n    def is_cheaper(self, other_book):\n        return self.price &#x3C; other_book.price\n</python></solution>\n</li>\n<li>\n<p>Now, outside the <inline-code>Book</inline-code> class, create the following functions.</p>\n<ol>\n<li>\n<p>create a function <inline-code>display_books</inline-code> which takes a list of books as argument and displays the information about each book, one book per line.</p>\n<python>b1 = Book(1, \"Animal Farm\", \"G. O.\", \"Satire\", 15.0)\nb2 = Book(2, \"Harry Potter\", \"J.K.R.\", \"Fantasy\", 30.0)\nb3 = Book(3, \"The Lord of the Rings\", \"J.R.R.T.\", \"Fantasy\", 27.0)\nb4 = Book(4, \"Dracula\", \"B.S.\", \"Horror\", 17.5)\n\nbooks = [b1, b2, b3, b4]\ndisplay_books(books)\n</python>\n<output>Animal Farm, G. O., $15.0\nHarry Potter, J.K.R., $30.0\nThe Lord of the Rings, J.R.R.T., $27.0\nDracula, B.S., $17.5\n</output>\n<solution><python>class Book:\n    # ... methods defined earlier ...\n\n# outside the Book class:\n\ndef display_books(books):\n    # iterate through the list of books\n    for b in books:\n        # b is an object of Book class\n        print(b)\n</python></solution>\n</li>\n<li>\n<p>Create a function <inline-code>sale</inline-code> which takes a list of books as argument and reduces (by half) the price of all of the books in the list. (Call appropriate method on each book object.)</p>\n<python>b1 = Book(1, \"Animal Farm\", \"G. O.\", \"Satire\", 15.0)\nb2 = Book(2, \"Harry Potter\", \"J.K.R.\", \"Fantasy\", 30.0)\nbooks = [b1, b2]\nsale(books)\nprint(b1.price)  # 7.5\nprint(b2.price)  # 15.0\n</python>\n<solution><python>class Book:\n    # ... methods defined earlier ...\n\n# ... previously defined functions ...\n\ndef sale(books):\n    # iterate through all the books\n    for b in books:\n        # b is an object of Book class\n        b.on_sale()\n</python></solution>\n</li>\n</ol>\n</li>\n<li>\n<p>Define a new class <inline-code>Bookstore</inline-code>. Each Bookstore has attributes: <inline-code>name</inline-code> (str) and <inline-code>books</inline-code> (a dict) to store a collection <inline-code>Book</inline-code> objects. For easy access, the books are kept in a dictionary where key is a book’s ID and value is the book object.</p>\n<ul>\n<li>Create an appropriate constructor that takes as argument <inline-code>name</inline-code> (str) and <inline-code>list_of_books</inline-code> (a list of <inline-code>Book</inline-code> objects).<br>\nInitialize attribute <inline-code>books</inline-code> (a dict), using the <inline-code>list_of_books</inline-code>. Add each book <inline-code>b</inline-code> into the dictionary:  <inline-code>b.id_num</inline-code> as key and the book <inline-code>b</inline-code> as value.</li>\n</ul>\n<solution><python>class BookStore:\n    \"\"\"\n    Represents a bookstore\n    \n    Attributes: name (str), books (dict mapping id_num to objects of Book class) \n    \"\"\"\n    def __init__(self, name, list_of_books = []):\n        self.name = name\n        \n        # create a empty dictionary\n        self.books = {}\n        \n        # iterate through the list\n        for b in list_of_books:\n            # b is an object of Book class\n            # add the appropriate key-value to the dictionary\n            self.books[b.id_num] = b\n</python></solution>\n</li>\n<li>\n<p>Add method <inline-code>__str__</inline-code> to the <inline-code>Bookstore</inline-code> that returns a string containing multiple lines. First line should contain name of the bookstore and rest of the lines each corresponds to a book. (If <inline-code>b</inline-code> is a <inline-code>Book</inline-code> object you can use <inline-code>str(b)</inline-code> to obtain a string for that book; it will call <inline-code>__str__</inline-code> method for the book <inline-code>b</inline-code>.)</p>\n<python>b1 = Book(1, \"Animal Farm\", \"G. O.\", \"Satire\", 15.0)\nb2 = Book(2, \"Harry Potter\", \"J.K.R.\", \"Fantasy\", 30.0)\nb3 = Book(3, \"The Lord of the Rings\", \"J.R.R.T.\", \"Fantasy\", 27.0)\nb4 = Book(4, \"Dracula\", \"B.S.\", \"Horror\", 17.5)\n\nbooks = [b1, b2, b3, b4]\n\nstore = BookStore(\"My Book Store\", books)\nprint(store)\n</python>\n<output>My Book Store\nAnimal Farm, G. O., $15.0\nHarry Potter, J.K.R., $30.0\nThe Lord of the Rings, J.R.R.T., $27.0\nDracula, B.S., $17.5\n</output>\n<solution><python>class BookStore:\n    # ... previously defined methods ...\n\n    def __str__(self):\n        info = self.name + \"\\n\"\n        # iterate through the books of the bookstore\n        for id_num in self.books:  # self.books is a dict\n            b = self.books[id_num] # b is an object of type Book\n            info += str(b) + \"\\n\"\n        return info\n</python></solution>\n</li>\n<li>\n<p>Add method <inline-code>start_sale</inline-code> to the <inline-code>Bookstore</inline-code> class which calls <inline-code>on_sale</inline-code> for each book in the bookstore.</p>\n<python>b1 = Book(1, \"Animal Farm\", \"G. O.\", \"Satire\", 15.0)\nb2 = Book(2, \"Harry Potter\", \"J.K.R.\", \"Fantasy\", 30.0)\nb3 = Book(3, \"The Lord of the Rings\", \"J.R.R.T.\", \"Fantasy\", 27.0)\nb4 = Book(4, \"Dracula\", \"B.S.\", \"Horror\", 17.5)\n\nbooks = [b1, b2, b3, b4]\n\nstore = BookStore(\"My Book Store\", books)\nstore.start_sale()\nprint(store)\n</python>\n<output>My Book Store\nAnimal Farm, G. O., $7.5\nHarry Potter, J.K.R., $15.0\nThe Lord of the Rings, J.R.R.T., $13.5\nDracula, B.S., $8.75\n</output>\n<solution><python>class BookStore:\n    # ... previously defined methods ...\n\n    def start_sale(self):\n        # iterate through the books\n        for id_num in self.books:\n            b = self.books[id_num] # b is object of Book class\n            b.on_sale()\n</python></solution>\n</li>\n</ol>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}