{"pageProps":{"titles":["L1.1 — Computer and Programming Basics","L1.2 — Variables & Expressions","L2.1 — Control Flow Statements","Python Style Guide","May 14 — Problem Set","L2.2 — print(), String methods & while loop","May 17 — Problem Set","L3.1 — More loops & Defining functions","May 19 — Problem Set","L3.2 — Lists","May 21 — Problem Set","L4.1 — Tuples, Dictionaries, Sets","May 26 — Problem Set","May 28 — Problem Set","L4.2 — Nested data structures","June 2 — Problem Set","June 4 — Problem Set","L5.1 — Handling Exceptions, File IO","L5.2 — Comparing data structures, Writing modules, Matplotlib","June 9 — Problem Set","L6.1 — Object oriented programming","June 16 — Problem Set"],"slugs":["Lecture-1.1","Lecture-1.2","Lecture-2.1","style-guide","_May14-problem-set","Lecture-2.2","_May17-problem-set","Lecture-3.1","_May19-problem-set","Lecture-3.2","_May21-problem-set","Lecture-4.1","_May26-problem-set","_May28-problem-set","Lecture-4.2","_June2-problem-set","_June4-problem-set","Lecture-5.1","Lecture-5.2","_June9-problem-set","Lecture-6.1","_June16-problem-set"],"post":{"title":"L2.2 — print(), String methods & while loop","slug":"Lecture-2.2","content":"<h1>ASCII code and special characters</h1>\n<p>Recall ASCII table from Lecture-1.1:</p>\n<img style=\"margin-left: 0em; width: 100%;\" src=\"module-1/ASCII-Table.png\">\n<p>Python has built-in functions to convert ASCII code (decimal) to/from a single character.</p>\n<python>>>> ord(\"a\")  # get ASCII code for letter \"a\"\n97\n>>> ord(\"A\")\n65\n>>> ord(\"$\")\n36\n>>> ord(\"hi\")  # doesn't work for more than one character\nTypeError: ord() expected a character, but string of length 2 found\n\n>>> chr(70)  # get character for ASCII code 70\n'F'\n>>> chr(103)\n'g'\n</python>\n<div class=\"p2 bggreen\"><p>Write a program that takes a string as input and shifts each letter left by 3 according to ASCII table.<br>\ni.e. <code>A → >, B → ?, C → @, D → A, E → B</code>, etc.</p><python>    word = input(\"Enter a word: \")\n\n# shift each letter in word by 3\n</python><solution><python>word = input(\"Enter a word: \")\n\nresult = \"\"\nfor i in range(len(word)):\n    code = ord(word[i])  # Get ASCII code for the letter\n    code = code - 3  # Shift code by 3\n    # Get letter for the code and add it to result:\n    result = result + chr(code)  \n    \nprint(result)\n</python></solution></div>\n<h2>Escape characters</h2>\n<p>There are special characters such as shown below, which we cannot direct enter in a string:</p>\n<ul>\n<li><i>newline character</i>: This is the character representing “enter” or “return” key.</li>\n<li><i>tab character</i>: This is the character representing “tab” key.</li>\n</ul>\n<python># Trying to enter a newline character directly fails:\nmessage = \"Hello\nworld\"\n</python>\n<output>    message = \"Hello\n                   ^\nSyntaxError: EOL while scanning string literal\n</output>\n<p>To include a newline character in a string we can use the escape character <inline-code>\\n</inline-code> in the string:</p>\n<python>message = \"hello\\nworld\"\nprint(message)\n</python>\n<output>hello\nworld\n</output>\n<p><inline-code>\\n</inline-code> is stored as a single character even though it looks like two.</p>\n<python>>>> ord(\"\\n\")\n10\n</python>\n<p>Another escape character is <inline-code>\\t</inline-code> which represents the tab character.<br>\nIt is useful as a separator when displaying values:</p>\n<python># print uses space as separator by default\nprint(\"Khalid\", 85)\nprint(\"Reza\", 90)\n\n# Using tab as separator\nprint(\"Khalid\", 85, sep=\"\\t\")\nprint(\"Reza\", 90, sep=\"\\t\")\n</python>\n<output>Khalid 85\nReza 90\nKhalid\t85\nReza\t90\n</output>\n<h1>Controlling print() function</h1>\n<p>In example above, we used a <sc>keyword argument</sc> <inline-code>sep=</inline-code> to tell print which separator to use between values.</p>\n<p>Unlike the usual arguments, keyword arguments are given in the form <inline-code>name=value</inline-code>; in the example <inline-code>sep</inline-code> is the name of argument and <inline-code>\"\\t\"</inline-code> is the value.</p>\n<python># separator can be any string\n>>> print(\"Alice\", 90, 3.14, sep=\",\")\nAlice,90,3.14\n\n>>> print(\"Alice\", 90, 3.14, sep=\"|\")\nAlice|90|3.14\n\n# even longer than one character\n>>> print(\"Alice\", 90, 3.14, sep=\"-----\")\nAlice-----90-----3.14\n\n>>> print(\"Alice\", 90, 3.14, sep=\"\")  # No separator!\nAlice903.14\n</python>\n<p>By default, <inline-code>print()</inline-code> function displays a newline  character <inline-code>\\n</inline-code> at end of line.</p>\n<python>>>> print(\"hello\")  # \"\\n\" is displayed after \"o\"\nhello\n>>> print()  # no arguments, just prints \"\\n\"\n\n# there is just a blank line above\n</python>\n<p>We can change this end character using another keyword argument to <inline-code>print()</inline-code> function, <inline-code>end=</inline-code>.</p>\n<python>print(\"A sequence of numbers:\")\nprint(1, end=\",\")\nprint(4, end=\",\")\nprint(9, end=\",\")\n</python>\n<output>A sequence of numbers:\n1,4,9,\n</output>\n<p>This is useful in a loop:</p>\n<python>N = 10\nfor i in range(N):\n    print(i*i, end=\", \")  # comma and a space\n</python>\n<output>0, 1, 4, 9, 16, 25, 36, 49, 64, 81, \n</output>\n<div class=\"p2 bggreen\"><p>Change the above example to not print the last comma. For example,</p><output>0, 1, 4, 9, 16, 25, 36, 49, 64, 81\n</output><solution><python>N = 10\nfor i in range(N):\n    if i == N - 1:\n        print(i * i, end=\"\")\n    else:\n        print(i * i, end=\", \")\n</python></solution></div>\n<h1>Multiline strings</h1>\n<div class=\"p2 bggreen\"><p>Using <inline-code>\\n</inline-code>, create a single string that contains all of the following lines:</p><pre><code>Shopping list\n- Milk\n- Eggs\n- Apples\n</code></pre><solution><python>shopping_list = \"Shopping list\\n- Milk\\n- Eggs\\n- Apples\\n\"\nprint(shopping_list)\n</python></solution></div>\n<p>Python provides a better create multiline strings using <i>triple quotes</i>: <inline-code>'''</inline-code> or <inline-code>\"\"\"</inline-code>.</p>\n<python>shopping_list = '''Shopping list\n- Milk\n- Eggs\n- Apples\n'''\n\n# OR the following, both are same\n\nshopping_list = \"\"\"Shopping list\n- Milk\n- Eggs\n- Apples\n\"\"\"\n\nprint(shopping_list)\n</python>\n<h1>String methods</h1>\n<p>A <sc>method</sc> is similar to a function except that a method is <i>always</i> called on an object:</p>\n<div class=\"px1 py025 code br5\" style=\"background-color: white; width: auto; white-space: pre;\"><p>object.method_name(argument1, argument2, …)</p></div>\n<p><inline-code>str</inline-code> type has several methods that we can call on a string object:</p>\n<python>>>> \"hello\".upper()  # calling method upper() on the string \"hello\"\n'HELLO'\n\n>>> message = \"hello\"\n>>> message.upper()  # using variable that refers to string\n'HELLO'\n\n>>> message = 10\n>>> message.upper()  # upper() only available for str objects\nAttributeError: 'int' object has no attribute 'upper'\n</python>\n<p>Many useful methods of strings:</p>\n<python>s = \"Luke, I am your father\"\n\n# s.lower() : returns a copy of s, but with all lower case letters.\n>>> s.lower()\n'luke, i am your father'\n\n# s.upper() : returns a copy of s, but with all upper case letters.\n>>> s.upper()\n'LUKE, I AM YOUR FATHER'\n\n# s.replace(old, new) : returns a copy of s with all occurrences of \n# the substring old replaced by new.\n>>> s.replace(\"am\", \"am not\")\n'Luke, I am not your father'\n\n>>> s.replace(\" \", \"\")  # empty string will delete\n'Luke,Iamyourfather'\n\n# s.count(c) : returns the number of non-overlapping \n# occurrences of substring c in s.\n>>> s.count(\"a\")\n2\n\n# s.find(c) : returns the index where the substring begins in s begins. \n# If c is not a substring of s, then -1 is returned.\n>>> s.find(\"you\")\n11\n>>> s.find(\"hi\")\n-1\n</python>\n<div class=\"p2 bggreen\"><p>In just one expression, compare if two strings <inline-code>s1</inline-code> and <inline-code>s2</inline-code> are equal in a case-insensitive manner.</p><solution><python>s1 = \"Hello Everyone\"\ns2 = \"hello everyone\"\n\nis_equal = s1.upper() == s2.upper()\n\n# OR\n# is_equal = s1.lower() == s2.lower()\n\nprint(is_equal)  # prints True\n</python></solution></div>\n<h2><inline-code>in</inline-code> operator (membership operator)</h2>\n<ul>\n<li>In Python <inline-code>in</inline-code> is a keyword.</li>\n<li>The <inline-code>in</inline-code> and <inline-code>not in</inline-code> operators test for membership.</li>\n<li>We can use them with strings to test if one string is a substring of another.</li>\n</ul>\n<python>>>> s = \"More garbage\"\n>>> \"age\" in s  # True if \"age\" is found anywhere in s\nTrue\n>>> \"x\" in s\nFalse\n>>> \"w\" not in s\nTrue\n</python>\n<h1><code>while</code> statement</h1>\n<p><inline-code>while</inline-code> statement is another way to repeatedly execute a block of code.</p>\n<p>General format of a while loop:</p>\n<div class=\"px1 py025 br5\" style=\"background-color: white; width: 90%; white-space: pre;\"><p><code>Initialize variables so that</code> <code class=\"bggreen ibox\">condition</code> <code>is True</code>\n<code class=\"b\">while</code> <code class=\"bggreen ibox\">condition</code> <code class=\"b\">:</code>\n<code>    </code><code class=\"bgblue ibox\">code block</code>\n<code>    </code><code>update variables that affect</code> <code class=\"bggreen ibox\">condition</code></p></div>\n<p>What <inline-code>while</inline-code> loop does:</p>\n<ol>\n<li>Evaluate the <code class=\"bggreen ibox\">condition</code></li>\n<li>If <code class=\"bggreen ibox\">condition</code> evaluates to <inline-code>False</inline-code>, loop body is not executed.</li>\n<li>If <code class=\"bggreen ibox\">condition</code> evaluates to <inline-code>True</inline-code>, run the loop body (all indented lines of code)<br>\na) In loop body we perform some task, <code class=\"bgblue ibox\">code block</code>, and update variables that may change the <code class=\"bggreen ibox\">condition</code> value<br>\nb) Go back to step 1</li>\n</ol>\n<python># a program to compute sum of first N numbers\nN = 10\n\ntotal = 0\n\ni = 1  # Set value so that condition below is True \nwhile i &#x3C;= N:  # Check if condition is True\n    # main task of summing numbers:\n    total = total + i  \n    \n    # update i, affects value of condition i &#x3C;= N \n    i = i + 1\n\n# print result outside the loop   \nprint(total)\n</python>\n<p>It is a common mistake to forget updating the condition inside loop body.<br>\nSee what happens when you remove/comment out the line <inline-code>i = i + 1</inline-code> in above example.<br>\nThe loop will never end — an infinite loop!</p>\n<h2>Augmented assignment statements</h2>\n<p>Augmented assignment is the combination, in a single statement, of a arithmetic operation and an assignment statement:</p>\n<python>x = 3\ny = 5\n\nx += 1  # same as: x = x + 1\n\nx += y  # same as: x = x + y\n\nx += x * y  # same as x = x + x * y\n\nx -= 5  # x = x - 5\n\nx *= 2  # x = x * 2\n</python>\n<p>Similarly, other operators exist: <inline-code>/=</inline-code>, <inline-code>//=</inline-code>, <inline-code>%=</inline-code>, <inline-code>**=</inline-code>.</p>\n<p>These are very useful, especially when updating the condition in while loop.</p>\n<h2>Indefinite loops</h2>\n<p>So far we have seen loops that work with fixed number of steps.</p>\n<p>But while loop can be used for repeating code for unknown number of steps:</p>\n<python># program to keep asking for password until correct password is entered.\n# Assume that correct password is \"1234\"\n\npassword = input(\"Enter password: \")\n\nwhile password != \"1234\":\n    print(\"Incorrect password, try again!\")\n    \n    password = input(\"Enter password: \")\n    \n# If we reach this line it means \"1234\" was entered as password: \nprint(\"Login successful!\")\n</python>\n<div class=\"p2 bggreen\"><p>Change above example to ask for an email and password.<br>\nProgram should continue until both email and password are correct.<br>\nPassword comparison must be case-sensitive, while email comparison should be case-insensitive.<br>\nFor comparison, just choose any email, password that you like.</p><solution><python>email = input(\"Enter email: \")\npassword = input(\"Enter password: \")\n\nwhile email.lower() != \"abcd@gmail.com\" or password != \"1234\":\n    print(\"Incorrect email or password, try again!\")\n    \n    email = input(\"Enter email: \")\n    password = input(\"Enter password: \")\n    \n# If we reach this line it means both email and password were correct\nprint(\"Login successful!\")\n\n</python></solution></div>\n<h3><inline-code>for</inline-code> vs <inline-code>while</inline-code> loops</h3>\n<ul>\n<li><inline-code>for</inline-code> loops are better when we want to go over a fixed sequence such as a a string or a series of numbers</li>\n<li><inline-code>while</inline-code> loop is more flexible an allows arbitrary conditions and number of steps. e.g. do something until user enters correct data</li>\n</ul>\n<h1>Importing modules</h1>\n<p>A module is a file containing definitions and statements.</p>\n<p>Every <inline-code>.py</inline-code> file is a module. The name of the module is the name of the file.</p>\n<p>A program is a collection of code with a common purpose.</p>\n<ul>\n<li>We can split a program into multiple modules (files)</li>\n<li>We group related code into the same module e.g. <inline-code>math</inline-code></li>\n</ul>\n<h2><inline-code>import</inline-code> statements</h2>\n<p>We use code inside a module by <i>importing</i> the module.\nWe import a module using <inline-code>import</inline-code> statement:</p>\n<python>import math\n\n# Now we can use the module by its name—math—\n\n# We can call functions inside the module using dot operator\nx = math.sqrt(16)\nprint(x)\n\ny = math.sin(math.pi / 2)\nprint(y)\n</python>\n<p>Another way of using a module is to import functions/variables from the module:</p>\n<python>from math import sqrt, sin, pi\n\n# Now, we can call sqrt and sin without the \"math.\" prefix\nx = sqrt(16)\nprint(x)\n\ny = sin(pi / 2)\nprint(y)\n</python>\n<p>Use <inline-code>help()</inline-code> function to see list of all function contained in <inline-code>math</inline-code> module:</p>\n<python>>>> import math\n>>> help(math) # will display a long doc, not showing here\n\n>>> help(math.sqrt) # show help on a specific function\nHelp on built-in function sqrt in module math:\n\nsqrt(x, /)\n    Return the square root of x.\n</python>\n<h2><inline-code>random</inline-code> module</h2>\n<p>In Python, we can generate (pseudo)-random numbers using the <inline-code>random</inline-code> module.</p>\n<p>The module provides us with a lot of different functions but for the moment we’ll focus on the following:</p>\n<ul>\n<li><inline-code>random()</inline-code> – It returns a random float value between <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0.0</mn></mrow><annotation encoding=\"application/x-tex\">0.0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span></span></span> (inclusive) and <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1.0</mn></mrow><annotation encoding=\"application/x-tex\">1.0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span></span></span> (exclusive)</li>\n<li><inline-code>randint(x, y)</inline-code> – It returns a random int value between x and y, both included.</li>\n</ul>\n<p>Each time your execute these functions, you will get a different value, try it!</p>\n<python>>>> import random\n>>> random.random()\n0.12826246225939641\n>>> random.random()\n0.33797149195934817\n\n>>> random.randint(1, 10)\n9\n>>> random.randint(1, 10)\n1\n</python>\n<h3>The seed</h3>\n<ul>\n<li>The random number generation is not truly random.</li>\n<li>It is determined by an initial value that is called the seed.</li>\n<li>By default, the seed used to generate the numbers is the current system time.\n<ul>\n<li>This means that each time we run the program, the seed will be different, and the numbers generated will also be different.</li>\n</ul>\n</li>\n<li>We can fix the seed using the function <inline-code>random.seed()</inline-code></li>\n</ul>\n<p>Run the following with the seed function call and without it (comment the line):</p>\n<python>import random\nrandom.seed(123) # Try with and without this line\ni = 0\nwhile i &#x3C; 5:\n    print(random.randint(1, 100))\n    i += 1\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}