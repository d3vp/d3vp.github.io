{"pageProps":{"titles":["L1.1 — Computer and Programming Basics","L1.2 — Variables & Expressions","L2.1 — Control Flow Statements","Python Style Guide","May 14 — Problem Set","L2.2 — print(), String methods & while loop","May 17 — Problem Set","L3.1 — More loops & Defining functions","May 19 — Problem Set","L3.2 — Lists","May 21 — Problem Set","L4.1 — Tuples, Dictionaries, Sets"],"slugs":["Lecture-1.1","Lecture-1.2","Lecture-2.1","style-guide","_May14-problem-set","Lecture-2.2","_May17-problem-set","Lecture-3.1","_May19-problem-set","Lecture-3.2","_May21-problem-set","Lecture-4.1"],"post":{"title":"L3.1 — More loops & Defining functions","slug":"Lecture-3.1","content":"<h1><code>break</code> and <code>continue</code> statements</h1>\n<p><inline-code>break</inline-code> statement can be used to terminate a loop before it normally ends.</p>\n<p>After a <inline-code>break</inline-code> statement is executed, no other code inside the loop is executed.</p>\n<div class=\"flex\"><python>for i in range(10):\n    if i > 5:\n        break\n    print(i, end=\" \")\n</python><output>0 1 2 3 4 5 \n</output></div>\n<p>Lets look at the homopolymer example from the problem set:</p>\n<python>seq = \"AAAAAAA\"\n# seq = \"AAAAGA\"\n\nis_homopolymer = True\nfor i in range(len(seq)):\n    if seq[i] != seq[0]:\n        # Found different letter\n        is_homopolymer = False\n        break  # don't loop further\n\nif is_homopolymer:\n    print(\"homopolymer\")\nelse:\n    print(\"not homopolymer\")\n</python>\n<h3>Example:</h3>\n<p>Write a program that takes an integer as input and prints whether the number is prime or not.\nTo check if a number <inline-code>n</inline-code> is prime:</p>\n<ul>\n<li>Divide <inline-code>n</inline-code> by each number <inline-code>i</inline-code> from <inline-code>2</inline-code> to <inline-code>n-1</inline-code>\n<ul>\n<li>if <inline-code>n</inline-code> is divisible by any <inline-code>i</inline-code> then <inline-code>n</inline-code> cannot be not prime</li>\n<li>In other words, if <inline-code>n</inline-code> is not divisible by all <inline-code>i</inline-code>’s then <inline-code>n</inline-code> is prime</li>\n</ul>\n</li>\n</ul>\n<solution><python>num = int(input(\"Enter number: \"))\n\nis_prime = True\n\nif num &#x3C; 2:\n    is_prime = False\nelse:\n    for i in range(2, num):\n        if num % i == 0:\n            is_prime = False\n            break\n\nprint(is_prime)\n</python></solution>\n<p>We can also use break in a <inline-code>while</inline-code> loop.<br>\nRecall email/password example from previous lecture:</p>\n<p></p><div class=\"w120\"></div><p></p>\n<python>email = input(\"Enter email: \")\npassword = input(\"Enter password: \")\n\nwhile email.lower() != \"abcd@gmail.com\" or password != \"1234\":\n    print(\"Incorrect email or password, try again!\")\n    \n    email = input(\"Enter email: \")\n    password = input(\"Enter password: \")\n    \nprint(\"Login successful!\")\n</python>\n<p>:::</p>\n<p>We can simplify the code using a <inline-code>break</inline-code> statement:</p>\n<python>while True:\n    email = input(\"Enter email: \")\n    password = input(\"Enter password: \")\n    if email.lower() == \"abcd@gmail.com\" and password == \"1234\":\n        break\n    print(\"Incorrect email or password, try again!\")\n\nprint(\"Login successful!\")\n</python>\n<h2><code>continue</code> statement</h2>\n<p><inline-code>continue</inline-code> statement is useful to skip some steps in a loop.</p>\n<p>After a <inline-code>continue</inline-code> statement is executed, code that follows the statement is skipped and execution continues from the next step of the loop.</p>\n<python>for i in range(1, 50):\n    if i % 2 == 0 or i % 3 == 0:\n        continue\n    print(i, end=\" \")\n</python>\n<output>1 5 7 11 13 17 19 23 25 29 31 35 37 41 43 47 49\n</output>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>Nested Loops</h1>\n<p>We can have a for/while loop inside other for/while loops.</p>\n<p>This is useful when we have two sequences and we need all combinations/pairs of items from the sequences.</p>\n<h3>Example 1</h3>\n<p>Write a program that prints all pairs of numbers that can occur when two six-sided dice are rolled.</p>\n<python># outer loop for first die d1:\nfor d1 in range(1, 7):  \n    # inner loop for second die d2\n    for d2 in range(1, 7):\n        print(d1, d2)\n</python>\n<h3>Example 2</h3>\n<p>Write a program that takes two string—one with consonants and other with vowels—and combines each consonant with every vowel to print a syllable.</p>\n<python>consonants = \"bdfghjklmn\"\nvowels = \"aeiou\"\n\nfor i in range(len(consonants)):\n    for j in range(len(vowels)):\n        syllable = consonants[i] + vowels[j]\n        print(syllable, end=\" \")\n</python>\n<h1>Defining a function</h1>\n<p>A function is a <i>named</i> block of code that performs a task.</p>\n<p>So far we have been using (calling) functions to do specific tasks — <inline-code>print()</inline-code>, <inline-code>input()</inline-code>, etc.</p>\n<p>We can also define/create our own functions.</p>\n<p>There are two kinds of functions (as the textbook calls them):</p>\n<ul>\n<li><i>void</i> functions — do not return any value explicitly\n<ul>\n<li>e.g. <inline-code>print()</inline-code> function</li>\n</ul>\n</li>\n<li><i>fruitful</i> functions — return a value, which can be stored or used, for example:\n<ul>\n<li><inline-code>message = input(\"Enter a string\")</inline-code></li>\n<li><inline-code>length = len(\"hello\")</inline-code></li>\n<li><inline-code>num = random.random()</inline-code></li>\n</ul>\n</li>\n</ul>\n<div class=\"flex\"><div class=\"flexc\"><div class=\"b\">Void function</div><python># Define the function\ndef display_greeting():\n    print(\"+------------+\")\n    print(\"|  Welcome!  |\")\n    print(\"+------------+\")\n\n# Call the function\ndisplay_greeting()\n</python><output>+------------+\n|  Welcome!  |\n+------------+\n</output></div><div class=\"flexc\"><div class=\"b\">Fruitful function</div><python># Define the function\ndef greeting():\n    return (\"+------------+\\n\" +\n            \"|  Welcome!  |\\n\" +\n            \"+------------+\\n\")\n\n# Call the function\nmessage = greeting()\nprint(message)\n\nprint(type(message))\n</python><output>+------------+\n|  Welcome!  |\n+------------+\n\n&#x3C;class 'str'>\n</output></div></div>\n<p>As we saw <i>void</i> functions do not explicitly return any value.<br>\nSuch functions implicitly return a special value <inline-code>None</inline-code>.</p>\n<python>>>> print(None, type(None))\nNone &#x3C;class 'NoneType'>\n</python>\n<p>The following 3 functions are equivalent as python implicitly returns <inline-code>None</inline-code> for a function that does not explicitly use a return statement, or uses <inline-code>return</inline-code> without a value.</p>\n<div class=\"flex ml-3 w130\"><python>def display_greeting():\n    print(\"+------------+\")\n    print(\"|  Welcome!  |\")\n    print(\"+------------+\")\n</python><python>def display_greeting():\n    print(\"+------------+\")\n    print(\"|  Welcome!  |\")\n    print(\"+------------+\")\n    return\n</python><python>def display_greeting():\n    print(\"+------------+\")\n    print(\"|  Welcome!  |\")\n    print(\"+------------+\")\n    return None\n</python></div>\n<h2>Functions can be called multiple times</h2>\n<p>One of the useful things about creating functions is that we call them multiple times.<br>\nThis allows <sc>code reuse</sc>; we can avoid duplicate lines of code.</p>\n<div class=\"flex\" style=\"width:100%;\"><python># Define the function\ndef display_greeting():\n    print(\"+------------+\")\n    print(\"|  Welcome!  |\")\n    print(\"+------------+\")\n\n\n# Call the function\ndisplay_greeting()\ndisplay_greeting()\ndisplay_greeting()\n</python><output>+------------+\n|  Welcome!  |\n+------------+\n+------------+\n|  Welcome!  |\n+------------+\n+------------+\n|  Welcome!  |\n+------------+\n</output></div>\n<h2>Flow of execution</h2>\n<ul>\n<li>When we define a function using <inline-code>def</inline-code> keyword:\n<ul>\n<li>it is not executed.</li>\n<li>Only the function name is created, which refers to the code block inside the function.</li>\n</ul>\n</li>\n<li>When we call a function (e.g. <inline-code>display_greeting()</inline-code>), the code block inside the function is <i>actually</i> executed.</li>\n</ul>\n<div class=\"my2\"><iframe width=\"800\" height=\"450\" frameborder=\"0\" src=\"https://pythontutor.com/iframe-embed.html#code=%23%20Define%20the%20function%0Adef%20display_greeting%28%29%3A%0A%20%20%20%20print%28%22%2B------------%2B%22%29%0A%20%20%20%20print%28%22%7C%20%20Welcome!%20%20%7C%22%29%0A%20%20%20%20print%28%22%2B------------%2B%22%29%0A%0A%23%20Call%20the%20function%0Adisplay_greeting%28%29%0Adisplay_greeting%28%29%0Adisplay_greeting%28%29%0A&#x26;codeDivHeight=400&#x26;codeDivWidth=350&#x26;cumulative=false&#x26;curInstr=0&#x26;heapPrimitives=true&#x26;origin=opt-frontend.js&#x26;py=3&#x26;rawInputLstJSON=%5B%5D&#x26;textReferences=false\"> </iframe></div>\n<div class=\"my2\"><iframe width=\"800\" height=\"460\" frameborder=\"0\" src=\"https://pythontutor.com/iframe-embed.html#code=%23%20Define%20the%20function%0Adef%20greeting%28%29%3A%0A%20%20%20%20return%20%28%22%2B------------%2B%5Cn%22%20%2B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%7C%20%20Welcome!%20%20%7C%5Cn%22%20%2B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%2B------------%2B%5Cn%22%29%0A%0A%23%20Call%20the%20function%0Amessage%20%3D%20greeting%28%29%0Aprint%28message%29%0A%0Aprint%28type%28message%29%29%0A&#x26;codeDivHeight=400&#x26;codeDivWidth=350&#x26;cumulative=false&#x26;curInstr=0&#x26;heapPrimitives=true&#x26;origin=opt-frontend.js&#x26;py=3&#x26;rawInputLstJSON=%5B%5D&#x26;textReferences=false\"> </iframe></div>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>Functions that take arguments</h1>\n<p>A function can be defined such that it takes one or more arguments.</p>\n<python># Define the function\ndef display_greeting(message):\n    length = len(message)\n    print(\"+\" + \"-\" * (length + 6) + \"+\")\n    print(\"|   \" + message + \"   |\")\n    print(\"+\" + \"-\" * (length + 6) + \"+\")\n\n\n# Call the function\ndisplay_greeting(\"Hello\")\n# Call again with different argument\ndisplay_greeting(\"Welcome!\")\n</python>\n<output>+-----------+\n|   Hello   |\n+-----------+\n+--------------+\n|   Welcome!   |\n+--------------+\n</output>\n<p>Let us see an example of function that takes arguments and also returns some value.</p>\n<python>def euclidean_distance(x1, y1, x2, y2):\n    d = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    return d ** 0.5\n\n\n# Distance between 2 points\nd1 = euclidean_distance(-2, 3, 10, 20)\n\n# Distance between another 2 points\nd2 = euclidean_distance(5, 10, -1.5, 3)\n\nprint(d1, d2)\n</python>\n<p>To understand what’s going on:</p>\n<iframe style=\"margin-left: -3em;\" width=\"900\" height=\"560\" frameborder=\"0\" src=\"https://pythontutor.com/iframe-embed.html#code=def%20euclidean_distance%28x1,%20y1,%20x2,%20y2%29%3A%0A%20%20%20%20d%20%3D%20%28x1%20-%20x2%29%20**%202%20%2B%20%28y1%20-%20y2%29%20**%202%0A%20%20%20%20return%20d%20**%200.5%0A%0A%0A%23%20Distance%20between%202%20points%0Ad1%20%3D%20euclidean_distance%28-2,%203,%2010,%2020%29%0A%0A%23%20Distance%20between%20another%202%20points%0Ad2%20%3D%20euclidean_distance%285,%2010,%20-1.5,%203%29%0A%0Aprint%28d1,%20d2%29&#x26;codeDivHeight=400&#x26;codeDivWidth=350&#x26;cumulative=false&#x26;curInstr=0&#x26;heapPrimitives=true&#x26;origin=opt-frontend.js&#x26;py=3&#x26;rawInputLstJSON=%5B%5D&#x26;textReferences=false\"> </iframe>\n<h2>Controlling the flow of execution with <inline-code>return</inline-code> statement</h2>\n<p>As we have seen, <inline-code>return</inline-code> statement allows us to return a value from a function back to the code that calls the function.</p>\n<p>But at the same time return statement also ends execution of the function.<br>\nWhen return statement is executed, no further code in the function gets executed.</p>\n<div class=\"flex\" style=\"width:100%;\"><python>def display(message):\n    print(\"***** \" + message + \" *****\")\n    return\n    print(\"This will never be displayed\")\n    \n    \ndisplay(\"hello\")\n</python><output>***** hello *****\n</output></div>\n<p>This is very useful when using loops.</p>\n<p>For example, using return statements in a function, we can further simplify the prime number example:</p>\n<div class=\"flex\" style=\"width:80%;\"><python>def is_prime(num):\n    if num &#x3C; 2:\n        return False\n\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n\n    return True\n\n\nprint(is_prime(7))\nprint(is_prime(9))\n</python><output>True\nFalse\n</output></div>\n<p><b>Important</b>: we must make sure that all branches/cases in the function return a value.<br>\nIn above example, if we forget the last return statement in the function, <inline-code>return None</inline-code> will happen implicitly, which would be incorrect.</p>\n<div class=\"p2 bggreen\"><p>Rewrite solution for homopolymer problem from this <a href=\"https://d3vp.github.io/comp202-notes/_May17-problem-set.html\">problem set</a> — create a function <inline-code>is_homopolymer</inline-code> that takes a string as an argument and returns <inline-code>True</inline-code> if the string is homopolymer, <inline-code>False</inline-code> otherwise. You may use a <inline-code>for</inline-code> or <inline-code>while</inline-code> loop.</p><solution><python>def is_homopolymer(seq):\n    for i in range(len(seq)):\n        if seq[i] != seq[0]:\n            return False\n\n    return True\n\nprint(is_homopolymer(\"GGGGGG\"))\nprint(is_homopolymer(\"GGGGAG\"))\n</python></solution></div>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>\n<h1>Scope of variables</h1>\n<ul>\n<li>A variable name only exists inside the body of the function in which it is created.\n<ul>\n<li>It does not exist outside the function or in any other functions.</li>\n</ul>\n</li>\n<li>The <sc>scope</sc> of a variable consists of parts of the program where the variable name exists and can be used.</li>\n</ul>\n<div class=\"flex w120 ml-2\"><python>def f():\n    x = 3\n    print(\"Inside f(), x =\", x)\n    \nf()\nprint(x)\n</python><output>Inside f(), x = 3\nTraceback (most recent call last):\n  File \"myprogram.py\", line 6, in &#x3C;module>\n    print(x)\nNameError: name 'x' is not defined\n</output></div>\n<p>A variable created inside a function is called a <sc>local variable</sc>.</p>\n<p>A variable created outside any function is called a <sc>global variable</sc>.</p>\n<div class=\"flex w120 ml-2\"><python>def f():\n    x = 3  # local variable\n    print(\"Inside f(), x =\", x)  # local x is used!\n\n\nx = 100  # global variable\nf()\nprint(x)\n</python><output>Inside f(), x = 3\n100\n</output></div>\n<ul>\n<li>As we saw above, it is possible to create a local variable with the same name as a global variable.</li>\n<li>These are considered two different variables, and inside the function only the local one will be used.</li>\n</ul>\n<p>A global variable can be used inside a function, but it cannot be changed inside the function.<br>\nWhen you try to change it, a local variable will be created instead!</p>\n<div class=\"flex w120 ml-2\"><python>def f():\n    print(\"Inside f(), x =\", x)  # global x is used!\n\n\nx = 100  # global variable\nf()\nprint(x)\n</python><output>Inside f(), x = 100\n100\n</output></div>\n<div class=\"p2 bggreen\"><p>What will be printed in each case?</p><div class=\"flex\"><python>def f():\n    y = 5\n    print(x)\n\nx = 10\nf()\n</python><python>def f():\n    x = 5 \n    print(x)\n\nx = 10\nf()\n</python><python>def f():\n    x = 5 \n    print(x)\n\nx = 10\nf()\nprint(x)\n</python></div><solution><div class=\"flex\"><output>10\n</output><output>5\n</output><output>5\n10\n</output></div></solution></div>\n<h3>Function arguments are also local variables inside a function.</h3>\n<div class=\"py2 flex w130 ml-2\"><div class=\"flexc\"><python>def f(x):\n    print(\"In f():\", x)\n\nx = 10\nf(123)\nprint(x)\n</python><output>In f(): 123\n10\n</output></div><div class=\"flexc\"><python>def f(x):\n    x = 3\n    print(\"In f():\", x)\n\nx = 10\nf(123)\nprint(x)\n</python><output>In f(): 3\n10\n</output></div><div class=\"flexc\"><python>def f(x):\n    print(\"In f():\", x, y)\n\ny = 10\nf(123)\nprint(y)\n</python><output>In f(): 123 10\n10\n</output></div></div>\n<h3>Best Practice</h3>\n<ul>\n<li>Avoid using global variables within functions; it makes your program confusing.\n<ul>\n<li>It is okay to use variables that don’t change (e.g. constants such as <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span></span>)</li>\n<li>It is also okay to use modules inside functions</li>\n</ul>\n</li>\n<li>In general, it is bad thing to change the value of a global variable from within a function. (We will not learn how to do this.)</li>\n</ul>\n<h1>Docstrings</h1>\n<p>A <sc>docstring</sc> (documentation string) is a multiline (triple-quoted) string that we write after the header of a function to explain how the function works.</p>\n<p>It is an important part of programming to write such documentation.<br>\nYou will be expected do so in your assignments.</p>\n<h3>Example 1</h3>\n<python>def euclidean_distance(x1, y1, x2, y2):\n    \"\"\"\n    Computes Euclidean distance between two 2D points.\n\n    Args:\n        x1: x-coordinate of first point (float) \n        y1: y-coordinate of first point (float) \n        x2: x-coordinate of second point (float) \n        y2: y-coordinate of second point (float) \n\n    Returns: the euclidean distance as a float\n    \"\"\"\n    d = (x1 - x2) ** 2 + (y1 - y2) ** 2\n    return d ** 0.5\n</python>\n<h3>Example 2</h3>\n<python>def is_prime(num):\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n        num: an integer greater than zero\n    \n    Returns: a bool value indicating if num is prime.\n    \"\"\"\n    if num &#x3C; 2:\n        return False\n\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n\n    return True\n\n</python>\n<p>Now, anyone can use <inline-code>help(is_prime)</inline-code> to see the documentation for our function.</p>\n<h2>How to write a function</h2>\n<ul>\n<li>Ideally we would write most of the docstring before even writing code in the function.\n<ul>\n<li>Think of what a function should do.</li>\n<li>Think of what arguments it should take, and what would be the return value.</li>\n</ul>\n</li>\n<li>Finally focus on writing code in the function.</li>\n</ul>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}