{"pageProps":{"titles":["2.1 — Programming Basics","2.2 — Variables, Arithmetic & String operations","2.3 — Function Calls, Expressions","3.1 — Defining functions, Errors & Debugging","3.2 — Boolean Expressions, Comparison & Logical Operators","3.3 — Conditional execution using if statement","3.4 — for loop & String indexing, slicing","Python Style Guide","4.1 — Escape Characters & Controlling print()","4.2 — String methods & in operator","4.3 — while statement & Nested loops","4.4 — return statement & Importing modules"],"slugs":["Lecture-2.1","Lecture-2.2","Lecture-2.3.1","Lecture-3.1","Lecture-3.2","Lecture-3.3","Lecture-3.4","style-guide","Lecture-4.1","Lecture-4.2","Lecture-4.3","Lecture-4.4"],"post":{"title":"4.2 — String methods & in operator","slug":"Lecture-4.2","content":"<h1>String methods</h1>\n<p>A <sc>method</sc> is similar to a function except that a method is <i>always</i> called on an object:</p>\n<div class=\"px1 py025 code br5\" style=\"background-color: white; width: auto; white-space: pre;\"><p>object.method_name(argument1, argument2, …)</p></div>\n<p><inline-code>str</inline-code> type has several methods that we can call on a string object:</p>\n<python>print(\"hello\".upper())  # calling method upper() on the string \"hello\"\n# HELLO\n\nmessage = \"hello\"\nprint(message.upper())  # using variable that refers to string\n# HELLO\n\nmessage = 10\nprint(message.upper())  # upper() only available for str objects\n# AttributeError: 'int' object has no attribute 'upper'\n</python>\n<h2>Useful string methods</h2>\n<python>s = \"Luke, I am your father\"\n\n# s.lower() : returns a copy of s, but with all lower case letters.\nprint(s.lower())\n# luke, i am your father\n\n# s.upper() : returns a copy of s, but with all upper case letters.\nprint(s.upper())\n# LUKE, I AM YOUR FATHER\n\n# s.replace(old, new) : returns a copy of s with all occurrences of \n# the substring old replaced by new.\nprint(s.replace(\"am\", \"am not\"))\n# Luke, I am not your father\n\nprint(s.replace(\" \", \"\")) # empty string will delete\n# Luke,Iamyourfather\n</python>\n<python>s = \"banana\"\n# s.count(c) : returns the number of non-overlapping \n# occurrences of substring c in s.\nprint(s.count(\"na\"))\n# 2\n\n# s.find(c) : returns the index where the substring begins in s begins. \n# If c is not a substring of s, then -1 is returned.\nprint(s.find(\"an\"))\n# 1\n\nprint(s.find(\"naa\"))\n# -1\n</python>\n<python>x = 1\ny = 2.5\nz = 3.14\nname = \"Reza\"\n\n# fmt.format(a1, a2, ...):\n# returns a string where the placeholders {} in format string fmt\n# are replaced by args a1, a2, etc.\n\nprint(\"x = {}, y = {}\".format(x, y))\n# x = 1, y = 2.5\n\nprint(\"Point: ({}, {}, {})\".format(x, y, z))\n# Point: (1, 2.5, 3.14)\n\nprint(\"Welcome {}!\".format(name))\n# Welcome Reza!\n</python>\n<p>For details on the format specification, see: <a href=\"https://pyformat.info/\">https://pyformat.info/</a></p>\n<h3>Example</h3>\n<p>In just one expression, compare if two strings <inline-code>s1</inline-code> and <inline-code>s2</inline-code> are equal in a case-insensitive manner.</p>\n<python>s1 = \"Hello Everyone\"\ns2 = \"hello everyone\"\n\nis_equal = s1.upper() == s2.upper()\n\n# OR\n# is_equal = s1.lower() == s2.lower()\n\nprint(is_equal)  # prints True\n</python>\n<h2><inline-code>in</inline-code> operator (membership operator)</h2>\n<ul>\n<li>In Python <inline-code>in</inline-code> is a keyword.</li>\n<li>The <inline-code>in</inline-code> and <inline-code>not in</inline-code> operators test for membership.</li>\n<li>We can use them with strings to test if one string is a substring of another.</li>\n</ul>\n<python>s = \"More garbage\"\nprint(\"age\" in s)  # True\nprint(\"x\" in s)  # False\nprint(\"w\" not in s)  # True\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}