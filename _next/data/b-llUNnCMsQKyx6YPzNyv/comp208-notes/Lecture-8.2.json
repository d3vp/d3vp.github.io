{"pageProps":{"allSlugs":[["Lecture-1",[{"title":"1 — Programming Basics","slug":"Lecture-1"}]],["Lecture-2.1",[{"title":"2.1 — Variables, Arithmetic & String operations","slug":"Lecture-2.1"}]],["Lecture-2.2",[{"title":"2.2 — Defining functions, Errors & Debugging","slug":"Lecture-2.2"}]],["Lecture-3.1",[{"title":"3.1 — Order of Expression Evaluation, Comparing Values, Conditional Execution","slug":"Lecture-3.1"}]],["Lecture-3.2",[{"title":"3.2 — if statement, for loop, Indexing & Slicing Strings","slug":"Lecture-3.2"}]],["Lecture-4.1",[{"title":"4.1 — return vs. print, while statement, Modules","slug":"Lecture-4.1"}]],["Lecture-4.2",[{"title":"4.2 — String methods, break & continue statements","slug":"Lecture-4.2"}]],["Lecture-5.1",[{"title":"5.1 — Controlling print(), Nested Loops, Lists","slug":"Lecture-5.1"}]],["Lecture-5.2",[{"title":"5.2 — Scope of variables, List operations","slug":"Lecture-5.2"}]],["Lecture-6.1",[{"title":"6.1 — Tuples, Immutable objects, Sets","slug":"Lecture-6.1"}]],["Lecture-6.2",[{"title":"6.2 — More list & set operations, Dictionaries","slug":"Lecture-6.2"}]],["Lecture-7.1",[{"title":"7.1 — Iterables, Unpacking, Nested Lists","slug":"Lecture-7.1"}]],["Lecture-7.2",[{"title":"7.2 — Nested data structures, Comprehensions, Modules","slug":"Lecture-7.2"}]],["Lecture-8.1",[{"title":"8.1 — Nested list comprehensions, Reading & Writing Files","slug":"Lecture-8.1"}]],["Lecture-8.2",[{"title":"8.2 — Shallow vs. deep copy, Handling exceptions","slug":"Lecture-8.2"}]],["Lecture-9.1",[{"title":"9.1 — Object Oriented Programming (OOP)","slug":"Lecture-9.1"}]],["Lecture-9.2",[{"title":"9.2 — Keyword arguments, More on OOP","slug":"Lecture-9.2"}]],["Lecture-10.1",[{"title":"10.1 — NumPy","slug":"Lecture-10.1"}]],["Lecture-10.2",[{"title":"10.2 — Plotting using Matplotlib, More Numpy","slug":"Lecture-10.2"}]],["Lecture-11.1",[{"title":"11.1 — More Numpy, Linear algebra, Random numbers","slug":"Lecture-11.1"}]],["Lecture-11.2",[{"title":"11.2 — Interpolation & Curve fitting","slug":"Lecture-11.2"}]],["Lecture-12.1",[{"title":"12.1 — System of Linear Equations, Numerical Integration","slug":"Lecture-12.1"}]],["Lecture-12.2",[{"title":"12.2 — Root Finding","slug":"Lecture-12.2"}]]],"post":{"slug":"Lecture-8.2","content":"<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"shallow-copy\">Shallow copy</h2><p>When we create a new list using slicing or  <inline-code>list()</inline-code> function on a nested list, inner lists are not copied but they are shared. Such a copy is called <sc>shallow copy</sc>.</p><python>nested_list = [[3, 17, 42], [10, 20, 30]]\n\nnew_copy = nested_list[:]  # shallow copy\n\nnew_copy = list(nested_list)  # shallow copy\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"\"></h2><python lineno=\"false\">nested_list = [[3, 17, 42], \n               [10, 20, 30]]\n\nnew_copy = nested_list[:]\n</python><img style=\"width: 70%; margin: 1em auto\" src=\"lecture-8.2/shallow_copy.png\"></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-1\"></h2><p>Changing values in a shallow copy affects the original nested list because inner lists are shared.</p><hgrid><python>nested_list = [[3, 17, 42], \n               [10, 20, 30]]\n\nnew_copy = nested_list[:] \n# new_copy = list(nested_list)\n\nnew_copy[0][2] = 123\n\nprint(new_copy)\nprint(nested_list)\n</python><output>[[3, 17, 123], [10, 20, 30]]\n[[3, 17, 123], [10, 20, 30]]\n</output></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-2\"></h2><p>Similary <inline-code>dict()</inline-code>, <inline-code>tuple()</inline-code>, <inline-code>set()</inline-code> functions will make a shallow copy.</p><python lineno=\"false\">student = {\"name\": \"Reza\", \"ID\": 2601000, \"grades\": [95, 95, 97]}\nstudent_copy = dict(student)\n</python><img style=\"width: 100%; margin: 1em auto\" src=\"lecture-8.2/shallow_copy_dict.png\"></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-3\"></h2><p>Changing values via the shallow copy affects the original dictionary because grades list is shared.</p><python>student = {\"name\": \"Reza\", \"ID\": 2601000, \"grades\": [95, 95, 97]}\n\nstudent_copy = dict(student)\nstudent_copy[\"grades\"][0] = 100\n\nprint(student_copy)\nprint(student)\n</python><output>{'name': 'Reza', 'ID': 2601000, 'grades': [100, 95, 97]}\n{'name': 'Reza', 'ID': 2601000, 'grades': [100, 95, 97]}\n</output></slide>\n<slide class=\"ppt-f95 slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"deep-copy-\">Deep copy </h2><p><inline-code>deepcopy</inline-code> function from <inline-code>copy</inline-code> module can copy a nested structure recursively (all inner lists etc. are copied as well). Such a copy is called <sc>deep copy</sc>.</p><hgrid><python>import copy\n\nnested_list = [[3, 17, 42], \n               [10, 20, 30]]\nnew_copy = copy.deepcopy(nested_list)\nnew_copy[0][2] = 123\n\nprint(new_copy)\nprint(nested_list)\n</python><output>[[3, 17, 123], [10, 20, 30]]\n[[3, 17, 42], [10, 20, 30]]\n</output></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-4\"></h2><python>import copy\n\nstudent = {\"name\": \"Reza\", \"ID\": 2601000, \"grades\": [95, 95, 97]}\n\nstudent_copy = copy.deepcopy(student)\nstudent_copy[\"grades\"][0] = 100\n\nprint(student_copy)\nprint(student)\n</python><output>{'name': 'Reza', 'ID': 2601000, 'grades': [100, 95, 97]}\n{'name': 'Reza', 'ID': 2601000, 'grades': [95, 95, 97]}\n</output></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-5\"></h2><greenbox><p>Time for problems about file reading/writing on Ed Lessons.</p></greenbox></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"types-of-errors\">Types of Errors</h2><ul>\n<li>Syntax Errors: When syntax is incorrect such as wrong punctuations, invalid characters, indentation etc.\n<ul>\n<li>Program does not even run in this case.</li>\n</ul>\n</li>\n<li>Runtime Errors, also called <sc>Exceptions</sc>, occur when there is a problem in the program during execution.\n<ul>\n<li>All code executes until an exception occurs.</li>\n</ul>\n</li>\n<li>Semantic or Logic errors are said to occur when a program executes without a problem but does not produce correct output as expected.</li>\n</ul></slide>\n<slide class=\"ppt-f90 slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-6\"></h2><p>In Python, all exceptions are objects of some exception type.<br>\nCommon exceptions are:</p><div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Exception Type</th><th>Meaning</th></tr></thead><tbody><tr><td>IndexError</td><td>Index is out of range in a list or tuple</td></tr><tr><td>KeyError</td><td>Specified key does not appear in a dictionary</td></tr><tr><td>NameError</td><td>Specified local or global name does not exist</td></tr><tr><td>TypeError</td><td>Operation or function applied to an inappropriate type</td></tr><tr><td>ValueError</td><td>Operation or function applied to correct type but inappropriate value</td></tr><tr><td>ZeroDivisionError</td><td>Second operand of division or remainder operation is zero</td></tr></tbody></table></div></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"exception-traceback\">Exception Traceback</h2><p>Traceback is an error message that allows tracing an exception back to its origin</p><hgrid cols=\"1fr 2fr\"><python>def func():\n   return 5 / 0\n\ndef main():\n   return func()\n\nmain()\n</python><output>Traceback (most recent call last):\n  File \"myprogram.py\", line 7, in &#x3C;module>\n    main()\n  File \"myprogram.py\", line 5, in main\n    return func()\n  File \"myprogram.py\", line 2, in func\n    return 5 / 0\nZeroDivisionError: division by zero\n</output></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"using-try-statement-to-handle-errors\">Using <inline-code>try</inline-code> statement to handle errors</h2><python>try:\n    # try-block: code that may cause runtime error\nexcept:\n    # except-block: handle the error here\n</python><ul>\n<li>Identify a code that can potentially produce errors</li>\n<li>Put that code in <inline-code>try-block</inline-code>.</li>\n<li>Write code in <inline-code>except-block</inline-code> to handle the case when error occurs</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"example\">Example</h2><p>Suppose we want to take a number from user input:</p><python>number = float(input('Please enter a number: '))\n</python><output>ValueError: could not convert string to float: 'abcd'\n</output><p>Since we know that <inline-code>float()</inline-code> function throws the <inline-code>ValueError</inline-code>, we can handle that error using <inline-code>try</inline-code> statement.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-7\"></h2><python>try:\n   number = float(input('Please enter a number: '))\n   # the following line only executes when float() function\n   # worked i.e. it did not throw ValueError\n   print(\"You entered: \", number)  \nexcept ValueError:\n   print(\"Please enter valid number!\")\n</python><p>There are two cases when we run the code above:</p><div class=\"flex ml-2\"><div class=\"flexc\"><p></p><div class=\"sans\">No error occurs in try-block</div>\nexcept-block is not executed.<p></p><output>Please enter a number: -3.1415\nYou entered:  -3.1415\n</output></div><div class=\"flexc\"><p></p><div class=\"sans\">Error occurs in try-block</div>\nexcept-block is executed.<p></p><output>Please enter a number: abcd\nPlease enter valid number!\n</output></div></div></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-8\"></h2><greenbox><p>Using try statement in a loop, ask user to input a number (float) until they enter a valid number.<br>\nYou can use a break statement in the try-block.</p></greenbox><output>Please enter a number: abcd\nInvalid number!\nPlease enter a number: -1.61\nCorrect number entered: -1.61\n</output></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-9\"></h2><solution><python>while True: # Loop forever\n   try:\n       number = float(input('Please enter a number: '))\n       break  # Get out of the loop\n   except ValueError:\n       print('Invalid number!')\n\nprint(\"Correct number entered:\", number)\n</python></solution></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"unhandled-exceptions-are-thrown-as-usual\">Unhandled exceptions are thrown as usual</h2><p>If an exception occurs in try-block but it is not the same type as in the except part, the exception occurs as usual i.e. except-block is not executed and program crashes.</p><hgrid class=\"ppt-f80\" margin=\"1em 0 1em -2em\"><python>student_grades = {\"Reza\": 90.0}\n\ntry:\n    name = input('Enter name: ')\n    grade = float(input(\"Enter grade to add: \"))\n    student_grades[name] += grade\n    print(student_grades)\nexcept ValueError:\n    print('Grade should be a number!')\n</python><output>Enter name: Dev\nEnter grade to add: 5\nTraceback (most recent call last):\n  File \"myprogram.py\", line 20\n    student_grades[name] += grade\nKeyError: 'Dev'\n</output></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"catching-multiple-exceptions\">Catching multiple exceptions</h2><p>Except blocks can be chained to handle multiple exceptions that may occur in try-block.</p><p>Depending on the exception that occurs, only one of the except-blocks executes. Others are skipped.</p><python>try:\n    # try-block: code that may cause runtime error(s)\nexcept Error1:\n    # handle the Error1 here\nexcept Error2:\n    # handle the Error2 here\n</python></slide>\n<slide class=\"ppt-f90 slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-10\"></h2><python>student_grades = {\"Reza\": 90.0}\n\ntry:\n    name = input('Enter name: ')\n    grade = float(input(\"Enter grade to add: \"))\n    student_grades[name] += grade\n    print(student_grades)\nexcept ValueError:\n    print('Grade should be a number!')\nexcept KeyError:\n    print(name, \"was not found.\")\n</python><div class=\"flex\" style=\"width: 110%; margin-left: -2em;\"><div class=\"flexc\"><p><span class=\"sans\">No error</span></p><output>Enter name: Reza\nEnter grade to add: 5\n{'Reza': 95.0}\n</output></div><div class=\"flexc\"><p><span class=\"sans\">ValueError</span></p><output>Enter name: Reza\nEnter grade to add: 10x\nGrade should be a number!\n</output></div><div class=\"flexc\"><p><span class=\"sans\">KeyError</span></p><output>Enter name: Dev\nEnter grade to add: 5\nDev was not found.\n</output></div></div></slide>\n<slide class=\"ppt-f95 slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-11\"></h2><p>We can have a <b>default except block</b> without any exception type to handle exception of any kind.</p><hgrid cols=\"3fr 1fr\" margin=\"0.5em 0 1em -2em\"><python>student_grades = {\"Reza\": 90.0}\n\ntry:\n    name = input('Enter name: ')\n    grade = float(input(\"Enter grade to add: \"))\n    student_grades[name] += grade\n    print(no_such_variable)  # error here\nexcept ValueError:\n    print('Grade should be a number!')\nexcept KeyError:\n    print(name, \"was not found.\")\nexcept:\n    print(\"Some error occured.\")\n</python><div><output>Enter name: Reza\nEnter grade to add: 5\nSome error occured.\n</output><p>(Again, only one of the except-blocks will execute.)</p></div></hgrid></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-12\"></h2><redbox><p>In general it is <em>not a good practice</em> to catch all errors using a default block.<br>\nInstead, specific errors should be handled explicitly by using an exception type.</p></redbox></slide>\n<slide class=\"ppt-f95 slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"finally-block-\"><inline-code>finally</inline-code> block </h2><ul>\n<li>We can have an optional <inline-code>finally</inline-code> block in a <inline-code>try</inline-code> statement; it is always executed whether an exception occurs in <inline-code>try</inline-code> block or not.</li>\n<li>It is useful to clean up resources (e.g. closing a file), which needs to be done even when exceptions occur.</li>\n</ul><python>try:\n    # try-block: code that may cause runtime error(s)\nexcept Error1:\n    # handle the Error1 here\nexcept Error2:\n    # handle the Error2 here\nfinally:\n    # this block always executes\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-13\"></h2><p>For this example, download the files <inline-code>read_matrix.py</inline-code> and <inline-code>matrixdata.txt</inline-code> from Ed Lesson and keep it in the same folder as the program.</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"when-to-use-try-statement\">When to use try statement</h2><ul>\n<li>It is a bad practice to use a try/except to “hide” bugs in the program!</li>\n<li>try/except should be used when we know that a specific error may occurs and there is no other way to handle it</li>\n</ul></slide>\n<slide class=\"ppt-f90 slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-14\"></h2><hgrid margin=\"0\"><div><p><span class=\"sans\">Good practice</span></p><python>try:\n    number = float(input(\"Enter a number: \"))\nexcept ValueError:\n    print('Number is not valid!')\n</python></div><p>because there is no other better way to check if a string contains a valid number.</p></hgrid><hgrid margin=\"0\"><div><p><span class=\"sans\">Not a good practice</span></p><python>student_grades = {\"Reza\": 90.0}\ntry:\n    name = input('Enter name: ')\n    student_grades[name] += 10\nexcept KeyError:\n    print(name, \"was not found.\")\n</python><p>because there is another way to do this (shown on right ->)</p></div><python place=\"center\">student_grades = {\"Reza\": 90.0}\n\nname = input('Enter name: ')\n\nif name in student_grades:\n    student_grades[name] += 10\nelse:\n    print(name, \"was not found.\")\n</python></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"where-do-exceptions-come-from\">Where do Exceptions come from?</h2><p><inline-code>raise</inline-code> statement is used to throw an exception from our code to tell Python that an unexpected case or error has occurred.</p><python lineno=\"false\">raise SomeException(\"Some message\")\n</python><p>Check <inline-code>euclidean_distance</inline-code> function in <inline-code>distance.py</inline-code> and <inline-code>distance2.py</inline-code>.</p><p>An exception raised in this way must be handled using <inline-code>try</inline-code> statements, otherwise Python will stop execution with the error as usual.</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"example-1\">Example</h2><p>How exceptions are raised in Python modules?<br>\nOpen the following link and search for <inline-code>raise</inline-code>:\n<a href=\"https://github.com/python/cpython/blob/main/Lib/random.py\">https://github.com/python/cpython/blob/main/Lib/random.py</a></p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"checking-type-of-an-object\">Checking type of an object</h2><python># isinstance(obj, class):\n#       Return whether an object is an instance of a class\n\nx = 123\nprint(isinstance(x, int))  # True\nprint(isinstance(x, float))  # False\n\nx = \"apple\"\nprint(isinstance(x, str))  # True\n\nx = [1, 5, 9]\nprint(isinstance(x, list))  # True\nprint(isinstance(x, tuple))  # False\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-15\"></h2><python># isinstance(obj, tuple_of_classes):\n#    A tuple of classes, e.g. isinstance(x, (A, B, ...)), may be given.\n#    Equivalent to isinstance(x, A) or isinstance(x, B) or ...\n\nx = 3.14\nprint(isinstance(x, (int, float)))  # True\n\nx = [1, 5, 9]\nprint(isinstance(x, (list, tuple)))  # True\n\nx = (11, 51, 4)\nprint(isinstance(x, (list, tuple)))  # True\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-16\"></h2><greenbox><p>Time for some problems on Ed Lessons.</p></greenbox><divider></divider></slide>","title":"8.2 — Shallow vs. deep copy, Handling exceptions","date":"2023-02-13","published":true,"section":"Lecture-8.2"}},"__N_SSG":true}