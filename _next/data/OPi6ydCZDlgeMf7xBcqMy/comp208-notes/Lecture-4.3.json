{"pageProps":{"titles":["2.1 — Programming Basics","2.2 — Variables, Arithmetic & String operations","2.3 — Function Calls, Expressions","3.1 — Defining functions, Errors & Debugging","3.2 — Boolean Expressions, Comparison & Logical Operators","3.3 — Conditional execution using if statement","3.4 — for loop & String indexing, slicing","Python Style Guide","4.1 — Escape Characters & Controlling print()","4.2 — String methods & in operator","4.3 — while statement & Nested loops","4.4 — return statement & Importing modules","5.1 — Scope of Variables","5.2 — Lists & List Operations","5.3 — List Functions & Methods","5.4 — Tuples","6.1 — Object Identity, Immutability, Unpacking","6.2 — Sets","6.3 — Dictionaries","7.1 — Nested data structures & comparisons","7.2 — Iterables & comprehensions","7.3 — Reading and writing files","8.1 — Default arguments & Modules","8.2 — Handling Exceptions","9.1 — Object Oriented Programming (OOP)","9.2 — More on methods & __str__","10.1 — NumPy","10.2 — Plotting using Matplotlib","Week 10 — More on NumPy","11.1 — Root finding","11.2 — Interpolation & Curve fitting","12.1 — More NumPy & Linear algebra","12.2 — Solving a system of linear equations","12.3 — Numerical Integration"],"slugs":["Lecture-2.1","Lecture-2.2","Lecture-2.3.1","Lecture-3.1","Lecture-3.2","Lecture-3.3","Lecture-3.4","style-guide","Lecture-4.1","Lecture-4.2","Lecture-4.3","Lecture-4.4","Lecture-5.1","Lecture-5.2","Lecture-5.3","Lecture-5.4","Lecture-6.1","Lecture-6.2","Lecture-6.3","Lecture-7.1","Lecture-7.2","Lecture-7.3","Lecture-8.1","Lecture-8.2","Lecture-9.1","Lecture-9.2","Lecture-10.1","Lecture-10.2","Lecture-10.3","Lecture-11.1","Lecture-11.2","Lecture-12.1","Lecture-12.2","Lecture-12.3"],"post":{"title":"4.3 — while statement & Nested loops","slug":"Lecture-4.3","content":"<h1><code>while</code> statement</h1>\n<p><inline-code>while</inline-code> statement is another way to repeatedly execute a block of code.</p>\n<p>General format of a while loop:</p>\n<div class=\"px1 py025 br5\" style=\"background-color: white; width: 90%; white-space: pre;\"><p><code>Initialize variables so that</code> <code class=\"bggreen ibox\">condition</code> <code>is True</code>\n<code class=\"b\">while</code> <code class=\"bggreen ibox\">condition</code> <code class=\"b\">:</code>\n<code>    </code><code class=\"bgblue ibox\">code block</code>\n<code>    </code><code>update variables that affect</code> <code class=\"bggreen ibox\">condition</code></p></div>\n<p>What <inline-code>while</inline-code> loop does:</p>\n<ol>\n<li>Evaluate the <code class=\"bggreen ibox\">condition</code></li>\n<li>If <code class=\"bggreen ibox\">condition</code> evaluates to <inline-code>False</inline-code>, loop body is not executed.</li>\n<li>If <code class=\"bggreen ibox\">condition</code> evaluates to <inline-code>True</inline-code>, run the loop body (all indented lines of code)<br>\na) In loop body we perform some task, <code class=\"bgblue ibox\">code block</code>, and update variables that may change the <code class=\"bggreen ibox\">condition</code> value<br>\nb) Go back to step 1</li>\n</ol>\n<python># a program to compute sum of first N numbers\nN = 10\n\ntotal = 0\n\ni = 1  # Set value so that condition below is True \nwhile i &#x3C;= N:  # Check if condition is True\n    # main task of summing numbers:\n    total = total + i  \n    \n    # update i, affects value of condition i &#x3C;= N \n    i = i + 1\n\n# print result outside the loop   \nprint(total)\n</python>\n<p>It is a common mistake to forget updating the condition inside loop body.<br>\nSee what happens when you remove/comment out the line <inline-code>i = i + 1</inline-code> in above example.<br>\nThe loop will never end — an infinite loop!</p>\n<h2>Augmented assignment statements</h2>\n<p>Augmented assignment is the combination, in a single statement, of a arithmetic operation and an assignment statement:</p>\n<python>x = 3\ny = 5\n\nx += 1  # same as: x = x + 1\n\nx += y  # same as: x = x + y\n\nx += x * y  # same as x = x + x * y\n\nx -= 5  # x = x - 5\n\nx *= 2  # x = x * 2\n</python>\n<p>Similarly, other operators exist: <inline-code>/=</inline-code>, <inline-code>//=</inline-code>, <inline-code>%=</inline-code>, <inline-code>**=</inline-code>.</p>\n<p>These are very useful, especially when updating the condition in while loop.</p>\n<h2>Indefinite loops</h2>\n<p>So far we have seen loops that work with fixed number of steps.</p>\n<p>But while loop can be used for repeating code for unknown number of steps:</p>\n<python># program to keep asking for password until correct password is entered.\n# Assume that correct password is \"1234\"\n\npassword = input(\"Enter password: \")\n\nwhile password != \"1234\":\n    print(\"Incorrect password, try again!\")\n    \n    password = input(\"Enter password: \")\n    \n# If we reach this line it means \"1234\" was entered as password: \nprint(\"Login successful!\")\n</python>\n<div class=\"p2 bggreen\"><p>Change above example to ask for an email and password.<br>\nProgram should continue until both email and password are correct.<br>\nPassword comparison must be case-sensitive, while email comparison should be case-insensitive.<br>\nFor comparison, just choose any email, password that you like.</p><solution><python>email = input(\"Enter email: \")\npassword = input(\"Enter password: \")\n\nwhile email.lower() != \"abcd@gmail.com\" or password != \"1234\":\n    print(\"Incorrect email or password, try again!\")\n    \n    email = input(\"Enter email: \")\n    password = input(\"Enter password: \")\n    \n# If we reach this line it means both email and password were correct\nprint(\"Login successful!\")\n\n</python></solution></div>\n<h3><inline-code>for</inline-code> vs <inline-code>while</inline-code> loops</h3>\n<ul>\n<li><inline-code>for</inline-code> loops are better when we want to go over a fixed sequence such as a a string or a series of numbers</li>\n<li><inline-code>while</inline-code> loop is more flexible an allows arbitrary conditions and number of steps. e.g. do something until user enters correct data</li>\n</ul>\n<h1><code>break</code> and <code>continue</code> statements</h1>\n<p><inline-code>break</inline-code> statement can be used to terminate a loop before it normally ends.</p>\n<p>After a <inline-code>break</inline-code> statement is executed, no other code inside the loop is executed.</p>\n<div class=\"flex\"><python>for i in range(10):\n    if i > 5:\n        break\n    print(i)\n    \nprint(\"Bye!\")\n</python><output>0\n1\n2\n3\n4\n5\nBye!\n</output></div>\n<h3>Example:</h3>\n<p>Write a program that takes an integer as input and prints whether the number is prime or not.\nTo check if a number <inline-code>n</inline-code> is prime:</p>\n<ul>\n<li>Divide <inline-code>n</inline-code> by each number <inline-code>i</inline-code> from <inline-code>2</inline-code> to <inline-code>n-1</inline-code>\n<ul>\n<li>if <inline-code>n</inline-code> is divisible by any <inline-code>i</inline-code> then <inline-code>n</inline-code> cannot be not prime</li>\n<li>In other words, if <inline-code>n</inline-code> is not divisible by all <inline-code>i</inline-code>’s then <inline-code>n</inline-code> is prime</li>\n</ul>\n</li>\n</ul>\n<python>num = int(input(\"Enter number: \"))\n\nis_prime = True\n\nif num &#x3C; 2:\n    is_prime = False\nelse:\n    for i in range(2, num):\n        if num % i == 0:\n            is_prime = False\n            break\n\nprint(is_prime)\n</python>\n<h2>Using <inline-code>break</inline-code> in a <inline-code>while</inline-code> loop.</h2>\n<p>Consider the following example to check if email/password are correct:</p>\n<p></p><div class=\"w120\"></div><p></p>\n<python>email = input(\"Enter email: \")\npassword = input(\"Enter password: \")\n\nwhile email.lower() != \"abcd@gmail.com\" or password != \"1234\":\n    print(\"Incorrect email or password, try again!\")\n    \n    email = input(\"Enter email: \")\n    password = input(\"Enter password: \")\n    \nprint(\"Login successful!\")\n</python>\n<p>We can simplify the code using a <inline-code>break</inline-code> statement:</p>\n<python>while True:\n    email = input(\"Enter email: \")\n    password = input(\"Enter password: \")\n    if email.lower() == \"abcd@gmail.com\" and password == \"1234\":\n        break\n    print(\"Incorrect email or password, try again!\")\n\nprint(\"Login successful!\")\n</python>\n<h2><code>continue</code> statement</h2>\n<p><inline-code>continue</inline-code> statement is useful to skip some steps in a <inline-code>for</inline-code>/<inline-code>while</inline-code> loop.</p>\n<p>After a <inline-code>continue</inline-code> statement is executed, code that follows the statement is skipped and execution continues from the next step of the loop.</p>\n<python>for i in range(1, 50):\n    if i % 2 == 0 or i % 3 == 0:\n        continue\n    print(i, end=\" \")\n</python>\n<output>1 5 7 11 13 17 19 23 25 29 31 35 37 41 43 47 49\n</output>\n<h1>Nested Loops</h1>\n<p>We can have a for/while loop inside other for/while loops.</p>\n<p>This is useful when we have two sequences and we need all combinations/pairs of items from the sequences.</p>\n<h3>Example 1</h3>\n<p>Write a program that prints all pairs of numbers that sum to <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>7</mn></mrow><annotation encoding=\"application/x-tex\">7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">7</span></span></span></span></span> when two six-sided dice are rolled.</p>\n<div class=\"flex\" style=\"width:80%;\"><python># outer loop for first die d1:\nfor d1 in range(1, 7):  \n    # inner loop for second die d2\n    for d2 in range(1, 7):\n        if d1 + d2 == 7:\n            print(d1, d2)\n</python><output>1 6\n2 5\n3 4\n4 3\n5 2\n6 1\n</output></div>\n<h3>Example 2</h3>\n<p>Write a program that takes two string—one with consonants and other with vowels—and combines each consonant with every vowel to print a syllable.</p>\n<div class=\"flex\" style=\"width:100%;\"><python>consonants = \"bdfghjklmn\"\nvowels = \"aeiou\"\n\nfor i in range(len(consonants)):\n    for j in range(len(vowels)):\n        syllable = consonants[i] + vowels[j]\n        print(syllable, end=\" \")\n    print()  # to start printing from next line\n\n</python><output>ba be bi bo bu \nda de di do du \nfa fe fi fo fu \nga ge gi go gu \nha he hi ho hu \nja je ji jo ju \nka ke ki ko ku \nla le li lo lu \nma me mi mo mu \nna ne ni no nu\n</output></div>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}