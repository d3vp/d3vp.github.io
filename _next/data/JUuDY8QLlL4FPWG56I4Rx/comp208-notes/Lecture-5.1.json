{"pageProps":{"titles":["2.1 — Programming Basics","2.2 — Variables, Arithmetic & String operations","2.3 — Function Calls, Expressions","3.1 — Defining functions, Errors & Debugging","3.2 — Boolean Expressions, Comparison & Logical Operators","3.3 — Conditional execution using if statement","3.4 — for loop & String indexing, slicing","Python Style Guide","4.1 — Escape Characters & Controlling print()","4.2 — String methods & in operator","4.3 — while statement & Nested loops","4.4 — return statement & Importing modules","5.1 — Scope of Variables","5.2 — Lists & List Operations","5.3 — Lists Functions & Methods","5.4 — Tuples"],"slugs":["Lecture-2.1","Lecture-2.2","Lecture-2.3.1","Lecture-3.1","Lecture-3.2","Lecture-3.3","Lecture-3.4","style-guide","Lecture-4.1","Lecture-4.2","Lecture-4.3","Lecture-4.4","Lecture-5.1","Lecture-5.2","Lecture-5.3","Lecture-5.4"],"post":{"title":"5.1 — Scope of Variables","slug":"Lecture-5.1","content":"<h1>Scope of variables</h1>\n<ul>\n<li>A variable name only exists inside the body of the function in which it is created.\n<ul>\n<li>It does not exist outside the function or in any other functions.</li>\n</ul>\n</li>\n<li>The <sc>scope</sc> of a variable consists of parts of the program where the variable name exists and can be used.\n<ul>\n<li>Each function has its own <sc>local scope</sc>, which other functions cannot access.</li>\n<li><sc>global scope</sc> consists of names  accessible by the entire module (Python file).</li>\n</ul>\n</li>\n</ul>\n<div class=\"flex w120 ml-2\"><python>def f():\n    x = 3\n    print(\"Inside f(), x =\", x)\n    \nf()\nprint(x)\n</python><output>Inside f(), x = 3\nTraceback (most recent call last):\n  File \"myprogram.py\", line 6, in &#x3C;module>\n    print(x)\nNameError: name 'x' is not defined\n</output></div>\n<p>A variable created inside a function is called a <sc>local variable</sc>.</p>\n<p>A variable created outside any function is called a <sc>global variable</sc>.</p>\n<div class=\"flex w120 ml-2\"><python>def f():\n    x = 3  # local variable\n    print(\"Inside f(), x =\", x)  # local x is used!\n\n\nx = 100  # global variable\nf()\nprint(x)\n</python><output>Inside f(), x = 3\n100\n</output></div>\n<ul>\n<li>As we saw above, it is possible to create a local variable with the same name as a global variable.</li>\n<li>These are considered two different variables, and inside the function only the local one will be used.</li>\n</ul>\n<div class=\"flex w120 ml-2\"><python>def f():\n    print(\"Inside f(), x =\", x)  # global x is used!\n\n\nx = 100  # global variable\nf()\nprint(x)\n</python><output>Inside f(), x = 100\n100\n</output></div>\n<h2>How variable name is looked up?</h2>\n<ul>\n<li>Inside a function, when a name is used:\n<ul>\n<li>First, name is searched within the function (local scope) to see if it exists.</li>\n<li>If name is not found in the function, it is searched globally</li>\n</ul>\n</li>\n<li>Outside a function, name is simply searched globally</li>\n<li>If a name cannot be found anywhere (local or global scope), we get <inline-code>NameError</inline-code> complaining that the name is not defined.</li>\n</ul>\n<div class=\"p2 bggreen\"><p>What will be printed in each case?</p><div class=\"flex\"><python>def f():\n    y = 5\n    print(x)\n\nx = 10\nf()\n</python><python>def f():\n    x = 5 \n    print(x)\n\nx = 10\nf()\n</python><python>def f():\n    x = 5 \n    print(x)\n\nx = 10\nf()\nprint(x)\n</python></div><solution><div class=\"flex\"><output>10\n</output><output>5\n</output><output>5\n10\n</output></div></solution></div>\n<h2>Function arguments are also local variables inside a function.</h2>\n<div class=\"py2 flex w130 ml-2\"><div class=\"flexc\"><python>def f(x):\n    print(\"In f():\", x)\n\nx = 10\nf(123)\nprint(x)\n</python><output>In f(): 123\n10\n</output></div><div class=\"flexc\"><python>def f(x):\n    x = 3\n    print(\"In f():\", x)\n\nx = 10\nf(123)\nprint(x)\n</python><output>In f(): 3\n10\n</output></div><div class=\"flexc\"><python>def f(x):\n    print(\"In f():\", x, y)\n\ny = 10\nf(123)\nprint(y)\n</python><output>In f(): 123 10\n10\n</output></div></div>\n<h2>Best Practice</h2>\n<ul>\n<li>Avoid using global variables within functions; it makes your program confusing.\n<ul>\n<li>It is okay to use variables that don’t change (e.g. constants such as <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span></span>)</li>\n<li>It is also okay to use modules inside functions</li>\n</ul>\n</li>\n<li>In general, it is bad thing to change the value of a global variable from within a function. (We will not learn how to do this.)</li>\n</ul>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}