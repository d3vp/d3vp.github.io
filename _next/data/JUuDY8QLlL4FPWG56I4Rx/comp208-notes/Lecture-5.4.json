{"pageProps":{"titles":["2.1 — Programming Basics","2.2 — Variables, Arithmetic & String operations","2.3 — Function Calls, Expressions","3.1 — Defining functions, Errors & Debugging","3.2 — Boolean Expressions, Comparison & Logical Operators","3.3 — Conditional execution using if statement","3.4 — for loop & String indexing, slicing","Python Style Guide","4.1 — Escape Characters & Controlling print()","4.2 — String methods & in operator","4.3 — while statement & Nested loops","4.4 — return statement & Importing modules","5.1 — Scope of Variables","5.2 — Lists & List Operations","5.3 — Lists Functions & Methods","5.4 — Tuples"],"slugs":["Lecture-2.1","Lecture-2.2","Lecture-2.3.1","Lecture-3.1","Lecture-3.2","Lecture-3.3","Lecture-3.4","style-guide","Lecture-4.1","Lecture-4.2","Lecture-4.3","Lecture-4.4","Lecture-5.1","Lecture-5.2","Lecture-5.3","Lecture-5.4"],"post":{"title":"5.4 — Tuples","slug":"Lecture-5.4","content":"<h1>Tuples</h1>\n<ul>\n<li>A tuple is an ordered collection of objects, like lists.</li>\n<li>A tuple is <i>immutable</i>. A tuple object cannot change after it is created.</li>\n<li>We create a tuple using parentheses <inline-code>()</inline-code> instead of square brackets <inline-code>[]</inline-code>.</li>\n</ul>\n<python>tup = (1, 2, 3)\nprint(type(tup))\n# &#x3C;class 'tuple'>\n\n# tuple with only one item\ntup = (10,)  # comma is required!\nprint(tup, type(tup))\n# (10,) &#x3C;class 'tuple'>\n</python>\n<p>We can use <inline-code>tuple</inline-code> function to convert other sequences such as lists and strings into a tuple.</p>\n<python>word = \"apple\"\ntup = tuple(word)\nprint(tup)\n# ('a', 'p', 'p', 'l', 'e')\n\nprimes = [2, 3, 5, 7]\nprimes = tuple(primes)\nprint(primes)\n# (2, 3, 5, 7)\n</python>\n<h2>Tuples are immutable</h2>\n<p>items cannot be added, removed or changed in a tuple.</p>\n<p>Therefore, unlike lists, none of the operations that modify a tuple are allowed.</p>\n<python>x = (1, 1, 2, 3, 5, 8)\nx[3] = 100\n# TypeError: 'tuple' object does not support item assignment\n\nx[:2] = (11, 12)\n# TypeError: 'tuple' object does not support item assignment\n</python>\n<p>In general, operations that do not modify a tuple are available.</p>\n<python>tup = (45, 23, 'abc') \n\n# Indexing and slicing work the same way as lists.\nprint(tup[1])\n# 23\nprint(tup[1:])\n# (23, 'abc')\n\nprint(len(tup))  # number of items in a tuple\n# 3\n\n# Similary min(), max(), and sum() functions work with tuples\n\n# Following methods are available for tuples\nprint(tup.index(\"abc\"))\n# 2\nprint(tup.count(23))\n# 1\n</python>\n<p>Since a tuple is a sequence, we can use it in a for loop just like a list:</p>\n<python>numbers = (1, 2, 3)\n\nfor n in numbers:\n    print(n)\n\n# prints:\n# 1\n# 2\n# 3\n</python>\n<h2>Why use tuples?</h2>\n<p>If lists are more flexible than tuples, why should we use tuples?</p>\n<ul>\n<li>Immutability is useful to avoid changing data by mistake.</li>\n<li>We can use tuples as keys in a dictionary!</li>\n<li>Programs are a bit faster when working with tuples.</li>\n</ul>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}