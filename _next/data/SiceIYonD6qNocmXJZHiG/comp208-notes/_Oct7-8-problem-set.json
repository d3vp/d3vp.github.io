{"pageProps":{"titles":["Week 1 — Computer and Programming Basics","Sep 9-10 Problem Set 2","Sep 16-17 Problem Set","Sep 23-24 Problem Set","Sep 30-Oct 1 Problem Set","Oct 7-8 Problem Set","Oct 21-22 Problem Set","Oct 28-29 — Problem Set","Nov 4-5 More on NumPy & Problems","Nov 18-19 — NumPy & Problem Set"],"slugs":["Lecture-1.2","_Sep09-problem-set","_Sep16-17-problem-set","_Sep23-24-problem-set","_Sep30-Oct1-problem-set","_Oct7-8-problem-set","_Oct21-22_problem-set","_Oct28-29_problem-set","_Nov4-5_problem-set","_Nov18-19_problem-set"],"post":{"title":"Oct 7-8 Problem Set","slug":"_Oct7-8-problem-set","content":"<p>Solutions are available on this page. Click “Show answer” button after each question.</p>\n<p><span style=\"margin-left: -1em;\"><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1.</mn></mrow><annotation encoding=\"application/x-tex\">1.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">.</span></span></span></span></span></span> Write a function <inline-code>circular_shift</inline-code> that takes a list <inline-code>array</inline-code> as argument and modifies <inline-code>array</inline-code> such that all the elements of <inline-code>array</inline-code> have been moved right by one position. The last element of the list should end up at the beginning.</p>\n<python>def circular_shift(array: list) -> None:\n    # Remove last element and insert it at the first position\n\n\nmylist = [1, 2, 3, 4, 5, 6]\ncircular_shift(mylist)\nprint(mylist)  # [6, 1, 2, 3, 4, 5]\n</python>\n<solution><python>def circular_shift(array: list) -> None:\n    last = array.pop()  # remove last element from list\n    array.insert(0, last)  # Insert it at the first position\n\n\nmylist = [1, 2, 3, 4, 5, 6]\ncircular_shift(mylist)\nprint(mylist)  # [6, 1, 2, 3, 4, 5]\n</python></solution>\n<p>We can also do this without using a loop instead of list methods:</p>\n<solution><python>def circular_shift(array: list) -> None:\n    N = len(array)\n    \n    # save the last element of the list\n    last = array[N - 1]\n    \n    # Go from index N-1 to 1 and shift elements rightwards\n    for i in range(N-1, 0, -1):\n        array[i] = array[i - 1]\n\n    # Finally put the last element, saved in temp, to index 0\n    array[0] = last\n\n\nmylist = [1, 2, 3, 4, 5, 6]\ncircular_shift(mylist)\nprint(mylist)  # [6, 1, 2, 3, 4, 5]\n</python></solution>\n<hr style=\"margin: 2em auto; border-top: 1px solid #b0b0b0;\">\n<p><span style=\"margin-left: -1em;\"><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2.</mn></mrow><annotation encoding=\"application/x-tex\">2.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">.</span></span></span></span></span></span> Write a program that asks the user to enter a long text. Then, print out statistics about the text: the number of characters, number of words, and number of unique words. We don’t need to handle punctuation such as comma.</p>\n<python>text = input(\"Enter text: \")\nprint(\"# of characters:\", ???)\nprint(\"# of words:\", ???))\nprint(\"# of unique words:\", ???)\n</python>\n<output>Enter text: A computer is a machine that can be programmed to carry out sequences of arithmetic or logical operations automatically. Modern computers can perform generic sets of operations known as programs. These programs enable computers to perform a wide range of tasks. A computer system is a complete computer that includes the hardware, operating system main software, and peripheral equipment needed and used for full operation. This term may also refer to a group of computers that are linked and function together, such as a computer network or computer cluster.\n# of characters: 559\n# of words: 89\n# of unique words: 62\n</output>\n<solution><python>text = input(\"Enter text: \")\nprint(\"# of characters:\", len(text))\nwords = text.split()\nprint(\"# of words:\", len(words))\nprint(\"# of unique words:\", len(set(words)))\n</python></solution>\n<hr style=\"margin: 2em auto; border-top: 1px solid #b0b0b0;\">\n<p><span style=\"margin-left: -1em;\"><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3.</mn></mrow><annotation encoding=\"application/x-tex\">3.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mord\">.</span></span></span></span></span></span> Design a function called <inline-code>check_duplicates</inline-code> that checks whether a list of strings contains any duplicates.</p>\n<python>def check_duplicates(mylist: list[str]) -> bool:\n    # Use a set\n\n\nprint(check_duplicates([\"apple\", \"orange\", \"apple\"]))  # True\nprint(check_duplicates([\"apple\", \"orange\", \"banana\"]))  # False\n</python>\n<solution><python>def check_duplicates(mylist: list[str]) -> bool:\n    \"\"\"Return True iff mylist contains duplicates\n    \"\"\"\n    return len(set(mylist)) != len(mylist)\n\n\n# another way\ndef check_duplicates(mylist: list[str]) -> bool:\n    uniques = set()\n    for x in mylist:\n        if x not in uniques:\n            uniques.add(x)\n        else:\n            return True\n    \n    return False\n\n\nprint(check_duplicates([\"apple\", \"orange\", \"apple\"]))  # True\nprint(check_duplicates([\"apple\", \"orange\", \"banana\"]))  # False\n</python></solution>\n<hr style=\"margin: 2em auto; border-top: 1px solid #b0b0b0;\">\n<p><span style=\"margin-left: -1em;\"><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4.</mn></mrow><annotation encoding=\"application/x-tex\">4.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mord\">.</span></span></span></span></span></span> Write a function  <inline-code>substrings</inline-code> that takes as a string s and a integer k, and returns the set of all unique substrings of length k contained in the string s.</p>\n<python>print(substrings(\"ACGATATATA\", 3))\n# { 'GAT ' , 'TAT ' , 'ACG ' , 'CGA ' , 'ATA '}\n\nprint(substrings(\"ACGATATATA\", 4))\n# {'ATAT', 'TATA', 'GATA', 'ACGA', 'CGAT'}\n</python>\n<solution><python>def substrings(s, k):\n    \"\"\" Find the set of all unique substrings present in a sequence\n    Args:\n        s (str): a string \n        k (int): the substring length\n    Returns: a set of str\n    \"\"\"\n    # create an empty set\n    sub = set()  \n\n    # -k+1 avoids the positions at the end of seq that are\n    # # less than k positions from the end\n    for i in range(len(s) - k + 1): \n        sub.add(s[i:i+k])\n\n    return sub\n\n\n\nprint(substrings(\"ACGATATATA\", 3))\n# { 'GAT ' , 'TAT ' , 'ACG ' , 'CGA ' , 'ATA '}\n\nprint(substrings(\"ACGATATATA\", 4))\n# {'ATAT', 'TATA', 'GATA', 'ACGA', 'CGAT'}\n</python></solution>\n<hr style=\"margin: 2em auto; border-top: 1px solid #b0b0b0;\">\n<p><span style=\"margin-left: -1em;\"><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5.</mn></mrow><annotation encoding=\"application/x-tex\">5.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span><span class=\"mord\">.</span></span></span></span></span></span> Write a function <inline-code>count_occurrences</inline-code> that takes as argument a list <inline-code>array</inline-code> and counts how many times each element appears in <inline-code>array</inline-code>. The function should return a dictionary where each item i.e. each key-value pair is such that the key is a unique element from <inline-code>array</inline-code> and the value is how many times that key appears in <inline-code>array</inline-code>.</p>\n<python>def count_occurrences(array: list) -> dict:\n    # Start with empty dictionary\n\n    # For each element x in the array,\n    #    If x is not present in dictionary, add x as the key with value 1\n    #    Otherwise, increment by 1 the value of key x in the dictionary\n\n\nd = count_occurrences([10, 12, 10, 100, 250, 100, 100])\nprint(d)  # {10: 2, 12: 1, 100: 3, 250: 1}\n\nd = count_occurrences([\"apple\", \"banana\", \"apple\", \"orange\"])\nprint(d)  # {'apple': 2, 'banana': 1, 'orange': 1}\n</python>\n<div class=\"my2\"></div>\n<solution><python>def count_occurrences(array):\n    count = {} # create an empty dictionary\n\n    # iterate through the elements in the list\n    for element in array:\n        if element not in count:\n            # we see element for the first time \n            count[element] = 1  # set value 1 with element as key\n        else:\n            # Found an item in count dictionary with element as key\n            count[element] += 1 # increment its value\n                \n    return count\n\n\nd = count_occurrences([10, 12, 10, 100, 250, 100, 100])\nprint(d)\n</python></solution>\n<hr style=\"margin: 2em auto; border-top: 1px solid #b0b0b0;\">\n<p><span style=\"margin-left: -1em;\"><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>6.</mn></mrow><annotation encoding=\"application/x-tex\">6.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mord\">.</span></span></span></span></span></span> Write a function <inline-code>merge_inventory</inline-code> that takes as arguments two dictionaries each representing the inventory of a warehouse for a company. The function should combine the two in a dictionary representing the entire inventory of the company and return the resulting dictionary. For example,</p>\n<python>def merge_inventory(inv1: dict, inv2: dict) -> dict:\n    # create an empty dictionary to store the result (merged inventory)\n    \n    # First add all items from inv1 to the new dictionary\n    \n    # Add or update items from inv2 to result:\n    #   - if an item name already exists, increment its quantity\n    #   - if an item name does not exist, simply add it\n\n\ninventory_one = {\"sofa\": 5, \"chair\": 12, \"lamp\": 3}\ninventory_two = {\"sofa\": 1, \"area rug\": 6, \"coffee table\": 2, \"lamp\": 5}\ncombined = merge_inventory(inventory_one, inventory_two)\nprint(combined)\n# {\"sofa\": 6, \"chair\": 12, \"lamp\": 8, \"area rug\": 6, \"coffee table\": 2}\n# Order does not matter when printed\n</python>\n<solution><python>def merge_inventory(inv1: dict, inv2: dict) -> dict:\n    # create an empty dictionary to store merged inventory\n    merged = {}\n    \n    # First add all items from inventory 1\n    for name in inv1:\n        merged[name] = inv1[name]\n    \n    # Add or update items from inventory 2\n    for name in inv2:\n        # If item name already exists, increment its quantity\n        if name in merged:\n            merged[name] += inv2[name]\n        else:\n            # Item name does not exist so just add it\n            merged[name] = inv2[name]\n    \n    return merged\n</python></solution>\n<hr style=\"margin: 2em auto; border-top: 1px solid #b0b0b0;\">\n<p><span style=\"margin-left: -1em;\"><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>7.</mn></mrow><annotation encoding=\"application/x-tex\">7.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">7</span><span class=\"mord\">.</span></span></span></span></span></span> Write a function <inline-code>flatten</inline-code> that takes a 2D list (a list of lists) <inline-code>lst</inline-code> as an argument and returns a flattened (non-nested) list which contains all elements from <inline-code>lst</inline-code></p>\n<python>def flatten(lst: list[list]) -> list:\n    # Use two nested loops\n\n\nnested_list = [[1, 2, 3],\n               [100, 245, 300],\n               [-4, 10, -5]]\nflat_list = flatten(nested_list)\nprint(flat_list)\n# [1, 2, 3, 100, 245, 300, -4, 10, -5]\n\n</python>\n<solution><python>def flatten(lst: list[list]) -> list:\n    result = []\n    for inner_list in lst:\n        for x in inner_list:\n            result.append(x)\n            \n    return result\n\n\nnested_list = [[1, 2, 3],\n               [100, 245, 300],\n               [-4, 10, -5]]\nflat_list = flatten(nested_list)\nprint(flat_list)\n# [1, 2, 3, 100, 245, 300, -4, 10, -5]\n</python></solution>\n<hr style=\"margin: 2em auto; border-top: 1px solid #b0b0b0;\">\n<p><span style=\"margin-left: -1em;\"><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>8.</mn></mrow><annotation encoding=\"application/x-tex\">8.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">8</span><span class=\"mord\">.</span></span></span></span></span></span> Write a function <inline-code>matrix_sum</inline-code> that takes two matrices (list of lists) as arguments, call them A and B, and returns a matrix C (list of lists), such that C is the element-wise sum of A and B i.e. <inline-code>C[i][j] = A[i][j] + B[i][j]</inline-code> for all <inline-code>i, j</inline-code>. You can assume that A and B will be of same size (no. of rows and columns will be same.)</p>\n<python>def matrix_sum(A: list[list], B: list[list]) -> list[list]:\n    # Use 2 nested loops and do C[i][j] = A[i][j] + B[i][j]\n\n\nmatrix1 = [[1, 2, 3],\n           [4, 5, 6]]\n\nmatrix2 = [[1, 2, 3],\n           [1, 1, 1]]\nresult = matrix_sum(matrix1, matrix2)\nprint(result)\n# prints:\n# [[2, 4, 6], [5, 6, 7]]\n\n</python>\n<solution><python>def matrix_sum(A: list[list], B: list[list]) -> list[list]:\n    nrows = len(A)\n    ncols = len(A[0])\n    C = []\n    \n    for i in range(nrows):\n        C.append([0] * ncols)\n    \n    for i in range(nrows):\n        for j in range(ncols):\n            C[i][j] = A[i][j] + B[i][j]\n    \n    return C\n\n\nmatrix1 = [[1, 2, 3],\n           [4, 5, 6]]\n\nmatrix2 = [[1, 2, 3],\n           [1, 1, 1]]\nresult = matrix_sum(matrix1, matrix2)\nprint(result)\n# prints:\n# [[2, 4, 6], [5, 6, 7]]\n\n</python></solution>\n<hr style=\"margin: 2em auto; border-top: 1px solid #b0b0b0;\">\n<p><span style=\"margin-left: -1em;\"><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>9.</mn></mrow><annotation encoding=\"application/x-tex\">9.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">9</span><span class=\"mord\">.</span></span></span></span></span></span> There are <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>100</mn></mrow><annotation encoding=\"application/x-tex\">100</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span></span> light bulbs lined up in a row in a long room. Each bulb has its own switch and is currently switched off. The room has an entry door and an exit door. There are <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>100</mn></mrow><annotation encoding=\"application/x-tex\">100</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span></span> people lined up outside the entry door. Each bulb is numbered consecutively from <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></span> to <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>100</mn></mrow><annotation encoding=\"application/x-tex\">100</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span></span>. So is each person.</p>\n<p>Person No. <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></span> enters the room, switches on every bulb, and exits. Person No. <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span></span> enters and flips the switch on every second bulb (turning off bulbs <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo separator=\"true\">,</mo><mn>4</mn><mo separator=\"true\">,</mo><mn>6</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">2, 4, 6, ...</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">6</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span></span></span></span></span>). Person No. 3 enters and flips the switch on every third bulb (changing the state on bulbs <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn><mo separator=\"true\">,</mo><mn>6</mn><mo separator=\"true\">,</mo><mn>9</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">3, 6, 9, ...</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">6</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">9</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span></span></span></span></span>). This continues until all <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>100</mn></mrow><annotation encoding=\"application/x-tex\">100</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span></span> people have passed through the room.</p>\n<p>What is the final state of bulb No. <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>64</mn></mrow><annotation encoding=\"application/x-tex\">64</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mord\">4</span></span></span></span></span>? And how many of the light bulbs are illuminated after the <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>10</mn><msup><mn>0</mn><mrow><mi>t</mi><mi>h</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">100^{th}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.849108em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">t</span><span class=\"mord mathnormal mtight\">h</span></span></span></span></span></span></span></span></span></span></span></span></span> person has passed through the room?</p>\n<p>Write a program that simulates this process and prints answer to above questions.</p>\n<p>Problem statement from <a href=\"http://puzzles.nigelcoldwell.co.uk/six.htm\">http://puzzles.nigelcoldwell.co.uk/six.htm</a><br>\nFrom a mathematical perspective, a simple solution exists (<a href=\"https://www.youtube.com/watch?v=WNhxkpmVQYw\">https://www.youtube.com/watch?v=WNhxkpmVQYw</a>), but we are interested in solving this problem with programming and not math.</p>\n<p>Hint: use a list to store the state of each bulb (on/off) and use loops to simulate the process above (change state of the bulbs in each step).</p>\n<solution><python>N = 100\n\n# Start with 100 bulbs all switched off\n# We use True/False for On/Off\n# bulbs at indices 1...100, Ignore index 0\nbulbs = [False] * (N+1)\n\n# Loop for each person i, 1 to 100\nfor i in range(1, N+1):\n    # Person i flips the switch of each bulb b if b is multiple of i\n    for b in range(i, N+1, i):  # b -> i, 2*i, 3*i, ... 100\n        # Flip the bulb b, which has index b-1 in the list\n        bulbs[b] = not bulbs[b]\n        \n        \n# Is 64th bulb On?\nprint(bulbs[64])\n\n# How many bulbs are on?\nprint(bulbs.count(True))\n\n# Which bulbs are on?\n# Should print all the square numbers\nfor b in range(1, N+1):\n    if bulbs[b]:\n        print(b, end=\" \")  # Bulb b+1 has list index b\n\n</python></solution>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}