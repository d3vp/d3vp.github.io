{"pageProps":{"allSlugs":[["Lecture-1",[{"title":"1 — Programming Basics","slug":"Lecture-1"}]],["Lecture-2.1",[{"title":"2.1 — Variables, Arithmetic & String operations","slug":"Lecture-2.1"}]],["Lecture-2.2",[{"title":"2.2 — Defining functions, Errors & Debugging","slug":"Lecture-2.2"}]],["Lecture-3.1",[{"title":"3.1 — Order of Expression Evaluation, Comparing Values, Conditional Execution","slug":"Lecture-3.1"}]],["Lecture-3.2",[{"title":"3.2 — if statement, for loop, Indexing & Slicing Strings","slug":"Lecture-3.2"}]],["Lecture-4.1",[{"title":"4.1 — return vs. print, while statement, Modules","slug":"Lecture-4.1"}]],["Lecture-4.2",[{"title":"4.2 — String methods, break & continue statements","slug":"Lecture-4.2"}]],["Lecture-5.1",[{"title":"5.1 — Controlling print(), Nested Loops, Lists","slug":"Lecture-5.1"}]],["Lecture-5.2",[{"title":"5.2 — Scope of variables, List operations","slug":"Lecture-5.2"}]],["Lecture-6.1",[{"title":"6.1 — Tuples, Immutable objects, Sets","slug":"Lecture-6.1"}]],["Lecture-6.2",[{"title":"6.2 — More list & set operations, Dictionaries","slug":"Lecture-6.2"}]],["Lecture-7.1",[{"title":"7.1 — Iterables, Unpacking, Nested Lists","slug":"Lecture-7.1"}]],["Lecture-7.2",[{"title":"7.2 — Nested data structures, Comprehensions, Modules","slug":"Lecture-7.2"}]],["Lecture-8.1",[{"title":"8.1 — Nested list comprehensions, Reading & Writing Files","slug":"Lecture-8.1"}]],["Lecture-8.2",[{"title":"8.2 — Shallow vs. deep copy, Handling exceptions","slug":"Lecture-8.2"}]],["Lecture-9.1",[{"title":"9.1 — Object Oriented Programming (OOP)","slug":"Lecture-9.1"}]],["Lecture-9.2",[{"title":"9.2 — Keyword arguments, More on OOP","slug":"Lecture-9.2"}]],["Lecture-10.1",[{"title":"10.1 — NumPy","slug":"Lecture-10.1"}]],["Lecture-10.2",[{"title":"10.2 — Plotting using Matplotlib, More Numpy","slug":"Lecture-10.2"}]],["Lecture-11.1",[{"title":"11.1 — More Numpy, Linear algebra, Random numbers","slug":"Lecture-11.1"}]],["Lecture-11.2",[{"title":"11.2 — Interpolation & Curve fitting","slug":"Lecture-11.2"}]],["Lecture-12.1",[{"title":"12.1 — System of Linear Equations, Numerical Integration","slug":"Lecture-12.1"}]],["Lecture-12.2",[{"title":"12.2 — Root Finding","slug":"Lecture-12.2"}]],["Lecture-13.1",[{"title":"13.1 — Binary Search, Sorting","slug":"Lecture-13.1"}]]],"post":{"slug":"Lecture-2.1","content":"<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"review-of-last-week\">Review of last week</h2><p>All data in a Python program is represented by <sc>objects</sc>.</p><p>An object always has a <sc>type</sc> (or <sc>class</sc>) associated with it.</p><ul>\n<li><inline-code>int</inline-code>: Integers such as <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">..., -1, 0, 1, 2, ...</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">...</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">...</span></span></span></span></span></li>\n<li><inline-code>float</inline-code>: Floating-point numbers such as <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>1.2</mn><mo separator=\"true\">,</mo><mn>3.14</mn><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">-1.2, 3.14,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1.2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">3.14</span><span class=\"mpunct\">,</span></span></span></span></span> etc.</li>\n<li><inline-code>str</inline-code>: Text data (a sequence of characters) such as “hello world”, “Python”, etc.</li>\n</ul><p>In Thonny, we can use <inline-code>Edit menu -> Toggle comment</inline-code> to comment/uncomment the selected lines.</p></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"variables\">Variables</h2><p>In Python, a <sc>Variable</sc> is a name that refers to an object in computer memory.<br>\nA variable can be created using <sc>Assignment Statement</sc>:</p><div class=\"center code my3\"><p><span class=\"bgblue p1 br5\">variable_name = value</span></p></div><p><inline-code>=</inline-code> is known as the <sc>assignment operator</sc>.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"\"></h2><python># create a variable and assign it value 20\ntemperature = 20  \n\n# variable temperature refers to 20 which is displayed\nprint(\"Today's temperature is\", temperature)\n\n# show type of the variable\nprint(\"Type of temperature variable is\", type(temperature))\n</python><output>Today's temperature is 20\nType of temperature variable is &#x3C;class 'int'>\n</output></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"arithmetic-with-numbers\">Arithmetic with numbers</h2><p>Calculations with numbers can be done using <i>arithmetic operators</i>.</p><div class=\"hgrid\"><div><python># Addition\nprint(1.5 + 1.5) # 3.0\n\n# Subtraction\nprint(10 - 20)  # -10\n</python></div><div><python># Multiplication\nprint(42 * 42)  # 1764\n\n# Division\nprint(1 / 5)  # 0.2\n\n# Exponentiation (x to the power of y)\nprint(2 ** 16)  # 65536\n</python></div></div></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-1\"></h2><python>temperature = 20\n# Unary minus operator\nprint(-temperature)  # -20\n\n\n# Computing rest mass energy of an electron\nrest_mass = 9.109e-31  # Using scientific notation\nspeed_of_light = 3e8\nrest_mass_energy = rest_mass * (speed_of_light ** 2)  # E = mc^2\nprint(rest_mass_energy)  # 8.198099999999999e-14\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"floor-division-and-remainder\">Floor division and remainder</h2><img src=\"module-2/divmod.svg\" style=\"margin:2em;\"><python># floor division\nprint(20 // 3)  # 6\n\n# remainder\nprint(20 % 3)  # 2\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-2\"></h2><python># Converting seconds to minutes\n\nduration = 320\nprint(duration, \"seconds equal\", duration / 60, \"minutes.\")\n# 320 seconds equal 5.333333333333333 minutes.\n \n# Alternative approach:\nminutes = duration // 60\nseconds = duration % 60\nprint(duration, \"seconds equal\", minutes, \"minutes and\", \n      seconds, \"seconds.\")\n# 320 seconds equal 5 minutes and 20 seconds.\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"result-type-of-arithmetic-operations\">Result type of arithmetic operations</h2><p>For all operators (except division <inline-code>/</inline-code>):</p><ul>\n<li>if one or more of the operands are of type <inline-code>float</inline-code>, result value will have type <inline-code>float</inline-code></li>\n<li>if both operands are of type <inline-code>int</inline-code>, result value will have type <inline-code>int</inline-code>.</li>\n</ul><p>For division operator <inline-code>/</inline-code>:</p><ul>\n<li>the result value is always of type <inline-code>float</inline-code> regardless of whether the operands are of type <inline-code>int</inline-code> or <inline-code>float</inline-code>.</li>\n</ul></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-3\"></h2><python>x = 2 + 1\nprint(x, type(x))  # 3 &#x3C;class 'int'>\n\nx = 2 + 1.0\nprint(x, type(x))  # 3.0 &#x3C;class 'float'>\n\n# Classic division always results in float\nx = 1 / 2  \nprint(x, type(x))  # 0.5 &#x3C;class 'float'>\n</python><div class=\"px2 py1 my2\" style=\"border: solid 1px lightgray; border-radius:5px; background-color: #d6efd6;\"><p><b class=\"p0\">Try the above examples with other operators!</b></p></div></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"basic-string-operations\">Basic string operations</h2><p>Strings are sequences of zero or more characters.</p><p>In Python, strings are enclosed by either single or double quotes.</p><python>\"Hello\"\n'everyone!'\n\"I'm Batman.\"  # single quote allowed inside double quotes,\n'You can call me \"Bruce\".'  # and vice versa.\n'123' # this is a string, not a number!\n\"\" # this is an empty string\n\" \" # this is a string with just one space\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-4\"></h2><python># a multi-line string using triple quotes\n\"\"\"The woods are lovely, dark and deep,   \nBut I have promises to keep,   \nAnd miles to go before I sleep,   \nAnd miles to go before I sleep.\n\"\"\"\n\n# We can also use single quotes for multi-line strings\n'''I hold it true, whate'er befall;\nI feel it when I sorrow most;\n'Tis better to have loved and lost\nThan never to have loved at all.\n'''\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"string-concatenation-joining-using--operator\">String concatenation (joining) using <inline-code>+</inline-code> operator</h2><python>message = \"Hello\" + \"everyone\"\nprint(message)  # Helloeveryone\n\nname = \"Alice\"\nmessage = \"Hello \" + name\nprint(message)  # Hello Alice\n\nstring = \"1\" + \"2\" + \"3\"\nprint(string)  # 123 and not the number 6\n\nprice = 100\nprint(price + \" USD\")\n# TypeError: unsupported operand type(s) for +: 'int' and 'str'\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"string-repetition\">String repetition</h2><p>String can be repeated multiple times using <inline-code>*</inline-code> operator.</p><python>print(\"Welcome! \" * 3)  # 'Welcome! Welcome! Welcome! '\n\nprint(4 * \"ha\")  # 'hahahaha'\n\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"string-length\">String length</h2><p>The function <inline-code>len()</inline-code> returns length of its argument string.</p><python>password = \"xyz1234\"\nprint(\"Password length:\", len(password))\n# Password length: 7\n\nprint(len(1234))\n# TypeError: object of type 'int' has no len()\n\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"more-on-variables\">More on Variables</h2><p>Let us write code that implements the following formula to convert fahrenheit to celsius:</p><p><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mo>=</mo><mfrac><mrow><mn>5</mn><mo stretchy=\"false\">(</mo><mi>f</mi><mo>−</mo><mn>32</mn><mo stretchy=\"false\">)</mo></mrow><mn>9</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">c = \\frac{5(f-32)}{9}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.355em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">9</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">5</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">32</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p><python>print(\"10 F in C is\", 5 * (10 - 32) / 9)\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"variables-allow-saving-intermediate-results-of-a-computation\"><span style=\"font-size: 0.83em;\">Variables allow “saving” intermediate results of a computation</span></h2><p>We can use variable to store the result so that we can reuse it in the program later.</p><python>fahrenheit = 10\n\n# Store the result of the expression\ncelsius = 5 * (fahrenheit - 32) / 9\n\nprint(fahrenheit, \"F in C is\", celsius)\n\n# Use variable celsius for more calculations\nprint(\"Adding 10 degrees today:\", celsius + 10)\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"variables-can-be-reassigned-new-values\"><span style=\"font-size: 0.85em;\">Variables can be reassigned new values</span></h2><python># Create variable name \"number\" and assign a value to it\nnumber = 123  \nprint(number)  # displays 123\n\n# Assign new value to existing variable \"number\"\nnumber = -50\n\nprint(number)  # displays -50\n\n# add 10 and assign the result value to existing variable \"number\"\nnumber = number + 10\n\nprint(number)  # displays -40\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-5\"></h2><p>New values can be of different type.</p><div style=\"margin-top: 2em; margin-bottom: 2em; width: 800;\">\n<iframe width=\"800\" height=\"500\" frameborder=\"0\" src=\"https://pythontutor.com/iframe-embed.html#code=number%20%3D%20123%20%20%23%20an%20int%20value%0Amessage%20%3D%20%22hello%22%20%20%23%20a%20string%0A%0Aprint%28number,%20type%28number%29%29%0Aprint%28message,%20type%28message%29%29%0A%0A%23%20Now%20variable%20number%20refers%20to%20the%20string%20%22hello%22%0Anumber%20%3D%20message%0A%0Aprint%28number,%20type%28number%29%29%0Aprint%28message,%20type%28message%29%29%0A&#x26;codeDivHeight=400&#x26;codeDivWidth=350&#x26;cumulative=false&#x26;curInstr=0&#x26;heapPrimitives=true&#x26;origin=opt-frontend.js&#x26;py=3&#x26;rawInputLstJSON=%5B%5D&#x26;textReferences=false\"> </iframe>\n</div></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-6\"></h2><p>However, variables should be changed with caution as it can produce errors or strange results.</p><python>number = 123  # an int value\nmessage = \"hello\"  # a string\n\n# Now variable number refers to the string \"hello\"\nnumber = message\nprint(number * 2) # String repetition!\nprint(number - 10) # minus won't work with string.\n</python><output>hellohello\nTraceback (most recent call last):\n    print(number - 10)\nTypeError: unsupported operand type(s) for -: 'str' and 'int'\n</output></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"example-swapping-values\">Example: Swapping values</h2><p>Sometimes we need to swap (interchange) values of two variables.</p><div class=\"hgrid\" style=\"width: 110%;\"><div><p>A naive attempt (does not work):</p><python>x = 137\ny = 42\n\n# Try swapping\nx = y\ny = x\n\nprint(x, y)  # 42 42\n</python></div><div><p>The following will work:</p><python>x = 137\ny = 42\n\n# Correct way to swap\ntemp = x\nx = y\ny = temp\n\nprint(x, y)  # 42 137\n</python></div></div></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"rules-for-variable-names\">Rules for variable names</h2><ul>\n<li>A variable name can only contain alpha-numeric characters and underscores <inline-code>A-Z, a-z, 0-9, _</inline-code></li>\n<li>A variable name cannot start with a number</li>\n<li>Variable names are case-sensitive\n<ul>\n<li>(<inline-code>cat</inline-code>, <inline-code>Cat</inline-code>, and <inline-code>CAT</inline-code> are three different variables)</li>\n</ul>\n</li>\n<li>They cannot be keywords.\n<ul>\n<li>Python has 33 reserved keywords, you can see a list of them by typing <inline-code>help(\"keywords\")</inline-code> in the Python shell.</li>\n</ul>\n</li>\n</ul><div class=\"px2 my2\" style=\"border: solid 1px lightgray; border-radius:5px; background-color: #d6dcef;\"><p>Python filenames must follow the same rules as above.</p></div></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"good-practice-for-naming-variables\">Good practice for naming variables</h2><div class=\"ppt-m-3 ppt-mt-1\"><ul>\n<li>Name your variable something descriptive of its purpose or content.</li>\n<li>If the variable is one word, all letters should be lowercase. Eg: <inline-code>hour</inline-code>, <inline-code>day</inline-code>.</li>\n<li>If the variable contains more than one word, then they should all be lowercase and each separated by an underscore. This is called <i>snake case</i>.<br>\ne.g. <inline-code>is_sunny</inline-code>, <inline-code>cat_name</inline-code></li>\n<li>Good variable names: <inline-code>hour</inline-code>, <inline-code>is_open</inline-code>,  <inline-code>number_of_books</inline-code>, <inline-code>course_code</inline-code></li>\n<li>Bad variable names: <inline-code>asfdstow</inline-code>, <inline-code>nounderscoreever</inline-code>, <inline-code>ur_stupid</inline-code>, <inline-code>CaPiTAlsANyWHErE</inline-code></li>\n</ul></div></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"function-calls\">Function calls</h2><p>Function take zero or more input values, perform an action or computation, and return the result value.</p><p>Input values passed to a function are called <sc>arguments</sc>.</p><p>A <sc>Function Call</sc> is an expression that looks like below:</p><div class=\"center code my3\"><p><span class=\"bgblue p1 br5\">function_name(argument1, argument2, …, argumentN)</span></p></div><p>How do we say it? — function “takes” argument(s) and “returns” a result. The result is also called the <sc>return value</sc>.</p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-7\"></h2><p>The number of arguments required by a function depends on how that function is defined.</p><p>Following are some built-in functions available in Python:</p><python># min() function takes 2 or more numbers and returns the minimum \nx = min(1, -4, 6)\nprint(x)  # -4\n\n# abs() function takes a number and returns absolute value of the number\ny = abs(-6)\nprint(y)  # 6\n\n# Gives an error if we do not give exactly one number\nz = abs(-1, 4)\n# TypeError: abs() takes exactly one argument (2 given)\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"expressions-vs-statements\">Expressions vs Statements</h2><p>An <sc>Expression</sc> is any valid combination of values, variables, operators, function calls.</p><p>When executed, it always evaluates to a single object.</p><python>x = 3\ny = 4\nz = x ** 2 + y ** 2  # this expression evaluates to an int object\nprint(z)  # 25\n\ns = \"hello\"\ns2 = s * len(s) # this expression evaluates to str value\nprint(s2)  # hellohellohellohellohello\n\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-8\"></h2><p>A statement is one or more lines of code that performs an action but does not evaluate to any value.</p><p>So, statements cannot be used as a part of an expression.</p><python>>>> x = 123  # Does not evaluate to anything so nothing shows below\n>>> x  # This is an trivially an expression\n123\n>>> 10 + (x = 123)  # Trying to use assignment statement in an expression\n    10 + (x = 123)\n            ^\nSyntaxError: invalid syntax\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"order-of-expression-evaluation\">Order of Expression Evaluation</h2><p>When we have different operators the same expression, which operator should apply first?.</p><p>All Python operators have a <sc>precedence</sc> and <sc>associativity</sc>:</p><ul>\n<li>Precedence — for two different kinds of operators, which should be applied first?</li>\n<li>Associativity — for two operators with the same precedence, which should be applied first?</li>\n</ul></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-9\"></h2><p>Table below show operators from higher precedence to lower.</p><div class=\"my2 hgrid\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Operator</th><th>Associativity</th></tr></thead><tbody><tr><td><inline-code>()</inline-code> (parentheses)</td><td>-</td></tr><tr><td><inline-code>**</inline-code></td><td>Right</td></tr><tr><td>Unary <inline-code>-</inline-code></td><td>-</td></tr><tr><td><inline-code>*</inline-code>, <inline-code>/</inline-code>, <inline-code>//</inline-code>, <inline-code>%</inline-code></td><td>Left</td></tr><tr><td>Binary <inline-code>+</inline-code>, <inline-code>-</inline-code></td><td>Left</td></tr><tr><td><inline-code>=</inline-code> (assignment)</td><td>Right</td></tr></tbody></table></div></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-10\"></h2><python>x = 3\ny = 5\n# Multiplication has higher precedence than addition\nz = x + 2 * y + 1  \nprint(z)  # 14\n\n# Need to use parentheses to enforce the order we want\nz = (x + 2) * (y + 1)\nprint(z)  # 30\n\n# Same precedence so left to right\nz = x * y / 100  \nprint(z)  # 0.15\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-11\"></h2><python># Same as 2 ** (3 ** 2) because \"**\" goes right to left\nz = 2 ** 3 ** 2\nprint(z)  # 512\n\n# Using parentheses to enforce the order we want\nz = (2 ** 3) ** 2  \nprint(z)  # 64\n\nx = 5\nx = x + 1  # addition happens first and then assignment\nprint(x)  # 6\n\n</python><divider></divider></slide>","title":"2.1 — Variables, Arithmetic & String operations","date":"2023-01-08","published":true,"section":"Lecture-2.1"}},"__N_SSG":true}