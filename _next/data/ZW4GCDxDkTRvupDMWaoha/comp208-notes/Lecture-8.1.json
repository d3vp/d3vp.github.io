{"pageProps":{"titles":["2.1 — Programming Basics","2.2 — Variables, Arithmetic & String operations","2.3 — Function Calls, Expressions","3.1 — Defining functions, Errors & Debugging","3.2 — Boolean Expressions, Comparison & Logical Operators","3.3 — Conditional execution using if statement","3.4 — for loop & String indexing, slicing","Python Style Guide","4.1 — Escape Characters & Controlling print()","4.2 — String methods & in operator","4.3 — while statement & Nested loops","4.4 — return statement & Importing modules","5.1 — Scope of Variables","5.2 — Lists & List Operations","5.3 — List Functions & Methods","5.4 — Tuples","6.1 — Object Identity, Immutability, Unpacking","6.2 — Sets","6.3 — Dictionaries","7.1 — Nested data structures & comparisons","7.2 — Iterables & comprehensions","7.3 — Reading and writing files","8.1 — Default arguments & Modules","8.2 — Handling Exceptions","9.1 — Object Oriented Programming (OOP)","9.2 — More on methods & __str__","10.1 — NumPy","10.2 — Plotting using Matplotlib","Week 10 — More on NumPy","11.1 — Root finding","11.2 — Interpolation & Curve fitting","12.1 — More NumPy & Linear algebra","12.2 — Solving a system of linear equations","12.3 — Numerical Integration"],"slugs":["Lecture-2.1","Lecture-2.2","Lecture-2.3.1","Lecture-3.1","Lecture-3.2","Lecture-3.3","Lecture-3.4","style-guide","Lecture-4.1","Lecture-4.2","Lecture-4.3","Lecture-4.4","Lecture-5.1","Lecture-5.2","Lecture-5.3","Lecture-5.4","Lecture-6.1","Lecture-6.2","Lecture-6.3","Lecture-7.1","Lecture-7.2","Lecture-7.3","Lecture-8.1","Lecture-8.2","Lecture-9.1","Lecture-9.2","Lecture-10.1","Lecture-10.2","Lecture-10.3","Lecture-11.1","Lecture-11.2","Lecture-12.1","Lecture-12.2","Lecture-12.3"],"post":{"title":"8.1 — Default arguments & Modules","slug":"Lecture-8.1","content":"<h1>Default arguments of functions</h1>\n<ul>\n<li>Python allows function arguments to have default values.\n<ul>\n<li>These arguments are called <sc>keyword arguments</sc>.</li>\n</ul>\n</li>\n<li>If the function is called without the keyword argument, the argument gets its default value.</li>\n</ul>\n<p>Example: both <inline-code>greeting</inline-code> and <inline-code>num_of_times</inline-code> have a default value in the function below:</p>\n<python>def greet(name, greeting=\"Hello\", num_of_times=1): \n    for i in range(num_of_times):\n        print(greeting, name)\n\n# try the following one at a time:\n# greet(\"Dev\")\n# greet(\"Dev\", greeting=\"Hi\")\n# greet(\"Dev\", num_of_times=3)\n# greet(\"Dev\", greeting=\"Hi\", num_of_times=3)\n# greet(\"Dev\", num_of_times=3, greeting=\"Hi\")\n</python>\n<h1>Writing &#x26; importing modules</h1>\n<ul>\n<li>\n<p>We have seen how to import a module from Python library using <inline-code>import</inline-code> statement e.g. <inline-code>import math</inline-code></p>\n</li>\n<li>\n<p>What are modules exactly?</p>\n<ul>\n<li>A module is simply a Python file containing definitions and statements.</li>\n<li>Every <inline-code>.py</inline-code> file is a module. The name of the module is the name of the file.</li>\n</ul>\n</li>\n<li>\n<p>Rules for naming modules</p>\n<ul>\n<li>A Python file that is supposed to be a module must follow same naming rules as variable names</li>\n<li>Module names can only start with letters a-z, A-Z or an underscore and must only contain these letters, digits and underscores.</li>\n</ul>\n</li>\n</ul>\n<h2>Try it!</h2>\n<p>Create a file <inline-code>geometry.py</inline-code> with the following code:</p>\n<python>import math\n\n\ndef sine(x):\n    \"\"\"Compute sine of a given angle.\n        \n    Args:\n        x: a float for angle in degrees\n    \n    Returns: a float\n    \"\"\"\n    return math.sin(math.radians(x))\n\n\ndef euclidean_distance(p1, p2):\n   \"\"\"\n   Computes Euclidean distance between two 2D points.\n\n   Args:\n       p1: list/tuple of length 2\n       p2: list/tuple of length 2\n\n   Returns: the euclidean distance as a float\n   \"\"\"\n   d = (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2\n   return d ** 0.5\n\n</python>\n<p>Now in another Python file (in the same directory), we can import the <inline-code>geometry</inline-code> module and use functions inside it:</p>\n<python># Import functions from the module\nfrom geometry import euclidean_distance, sine\n\n# Call the sine function\nprint(sine(90))\n\ndist = euclidean_distance((1, 1), (2, 3))  # tuples\nprint(dist)  # 2.23606797749979\n\n</python>\n<h3>Some observations:</h3>\n<ul>\n<li>When we import a module all code inside that module is executed.</li>\n<li>This means that if the module contains statements they will also be executed.</li>\n<li>Try adding some statement such as <inline-code>print(\"hello\")</inline-code> in <inline-code>geometry</inline-code> module outside the functions and import the module to see what happens.</li>\n</ul>\n<h2><inline-code>__name__</inline-code> AND <inline-code>__main__</inline-code></h2>\n<ul>\n<li>\n<p>When we write a module there might be code that we would like to see executed all the time, and another code that we would like to be executed only if the module is the program that we are actually running.</p>\n</li>\n<li>\n<p>To achieve this we need to learn about <inline-code>__name__</inline-code> and <inline-code>__main__</inline-code></p>\n</li>\n<li>\n<p>All we need to know for now is that <inline-code>__name__</inline-code> is a special variable that the interpreter initialize whenever it executes a module.</p>\n</li>\n<li>\n<p>When a module is executed, the interpreter does the following:</p>\n<ul>\n<li>sets the value of <inline-code>__name__</inline-code> for that module</li>\n<li>executes all the code in the module.</li>\n</ul>\n</li>\n<li>\n<p>Each module has its own <inline-code>__name__</inline-code> variable.</p>\n</li>\n<li>\n<p>When we execute a module as the main program, then the variable <inline-code>__name__</inline-code> for this module is set to be <inline-code>\"__main__\"</inline-code></p>\n</li>\n<li>\n<p>When a module is executed as part of an import statement from another module, then its <inline-code>__name__</inline-code> variable is set to be equal to the name of the module, which is name of the Python file.</p>\n<ul>\n<li>For instance, when <inline-code>geometry.py</inline-code> is executed because another program imports it, then its variable <inline-code>__name__</inline-code> is set to be <inline-code>geometry</inline-code>.</li>\n</ul>\n</li>\n<li>\n<p>After the variable <inline-code>__name__</inline-code> is set, the interpreter executes the code one statement at a time from top to bottom.</p>\n</li>\n<li>\n<p>If there is code we would like to see executed only when the module is executed as the main program, then we should add the following statement:</p>\n</li>\n</ul>\n<python>if __name__ == \"__main__\":\n    # any statement we like \n    print(\"This is the main program!\")\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}