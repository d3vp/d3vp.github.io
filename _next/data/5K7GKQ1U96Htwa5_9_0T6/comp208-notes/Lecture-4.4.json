{"pageProps":{"titles":["2.1 — Programming Basics","2.2 — Variables, Arithmetic & String operations","2.3 — Function Calls, Expressions","3.1 — Defining functions, Errors & Debugging","3.2 — Boolean Expressions, Comparison & Logical Operators","3.3 — Conditional execution using if statement","3.4 — for loop & String indexing, slicing","Python Style Guide","4.1 — Escape Characters & Controlling print()","4.2 — String methods & in operator","4.3 — while statement & Nested loops","4.4 — return statement & Importing modules","5.1 — Scope of Variables","5.2 — Lists & List Operations","5.3 — List Functions & Methods","5.4 — Tuples","6.1 — Object Identity, Immutability, Unpacking","6.2 — Sets","6.3 — Dictionaries","7.1 — Nested data structures & comparisons","7.2 — Iterables & comprehensions","7.3 — Reading and writing files","8.1 — Default arguments & Modules","8.2 — Handling Exceptions","9.1 — Object Oriented Programming (OOP)","9.2 — More on methods & __str__","10.1 — NumPy","10.2 — Plotting using Matplotlib","Week 10 — More on NumPy"],"slugs":["Lecture-2.1","Lecture-2.2","Lecture-2.3.1","Lecture-3.1","Lecture-3.2","Lecture-3.3","Lecture-3.4","style-guide","Lecture-4.1","Lecture-4.2","Lecture-4.3","Lecture-4.4","Lecture-5.1","Lecture-5.2","Lecture-5.3","Lecture-5.4","Lecture-6.1","Lecture-6.2","Lecture-6.3","Lecture-7.1","Lecture-7.2","Lecture-7.3","Lecture-8.1","Lecture-8.2","Lecture-9.1","Lecture-9.2","Lecture-10.1","Lecture-10.2","Lecture-10.3"],"post":{"title":"4.4 — return statement & Importing modules","slug":"Lecture-4.4","content":"<h1>Functions and <inline-code>return</inline-code> statement</h1>\n<p>Functions that do not have an explicit <inline-code>return</inline-code> statement, return a special value <inline-code>None</inline-code>.</p>\n<python>print(None, type(None))\n# None &#x3C;class 'NoneType'>\n</python>\n<p>The following 3 functions are equivalent because</p>\n<ul>\n<li>Python implicitly returns <inline-code>None</inline-code> for a function that does not  use a return statement</li>\n<li>if the <inline-code>return</inline-code> statement is used without a value, <inline-code>None</inline-code> is returned.</li>\n</ul>\n<div class=\"flex ml-3 w130\"><python>def display_greeting():\n    print(\"+------------+\")\n    print(\"|  Welcome!  |\")\n    print(\"+------------+\")\n</python><python>def display_greeting():\n    print(\"+------------+\")\n    print(\"|  Welcome!  |\")\n    print(\"+------------+\")\n    return\n</python><python>def display_greeting():\n    print(\"+------------+\")\n    print(\"|  Welcome!  |\")\n    print(\"+------------+\")\n    return None\n</python></div>\n<h2>Controlling the flow of execution with <inline-code>return</inline-code> statement</h2>\n<p>As we have seen, <inline-code>return</inline-code> statement allows us to return a value from a function back to the code that calls the function.</p>\n<p>But at the same time return statement also ends execution of the function.<br>\nWhen return statement is executed, no further code in the function gets executed.</p>\n<div class=\"flex\" style=\"width:100%;\"><python>def display(message):\n    print(\"***** \" + message + \" *****\")\n    return\n    print(\"This will never be displayed\")\n    \n    \ndisplay(\"hello\")\n</python><output>***** hello *****\n</output></div>\n<p>This is very useful when using loops.</p>\n<p>For example, using return statements in a function, we can further simplify the prime number example:</p>\n<div class=\"flex\" style=\"width:80%;\"><python>def is_prime(num):\n    if num &#x3C; 2:\n        return False\n\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n\n    return True\n\n\nprint(is_prime(7))\nprint(is_prime(9))\n</python><output>True\nFalse\n</output></div>\n<p><b>Important</b>: we must make sure that all branches/cases in the function return a value.<br>\nIn above example, if we forget the last return statement in the function, <inline-code>return None</inline-code> will happen implicitly, which would be incorrect.</p>\n<h1>Importing modules</h1>\n<p>A <sc>module</sc> is a Python file (typically a <inline-code>.py</inline-code> file) containing definitions and statements.</p>\n<p>Many modules such as <inline-code>math</inline-code> are already installed with Python.</p>\n<h2><inline-code>import</inline-code> statement</h2>\n<p>We use code inside a module by <i>importing</i> the module.\nWe import a module using <inline-code>import</inline-code> statement:</p>\n<python>import math\n\n# Now we can use the module by its name—math—\n\n# We can call functions inside the module using dot operator\nx = math.sqrt(16)\nprint(x)\n\ny = math.sin(math.pi / 2)\nprint(y)\n</python>\n<p>Another way of using a module is to import functions/variables from the module:</p>\n<python>from math import sqrt, sin, pi\n\n# Now, we can call sqrt and sin without the \"math.\" prefix\nx = sqrt(16)\nprint(x)\n\ny = sin(pi / 2)\nprint(y)\n</python>\n<p>Use <inline-code>help()</inline-code> function in Python Shell to see list of all function contained in <inline-code>math</inline-code> module:</p>\n<python>>>> import math\n>>> help(math) # will display a long doc, not showing here\n\n>>> help(math.sqrt) # show help on a specific function\nHelp on built-in function sqrt in module math:\n\nsqrt(x, /)\n    Return the square root of x.\n</python>\n<h2><inline-code>random</inline-code> module</h2>\n<p>In Python, we can generate (pseudo)-random numbers using the <inline-code>random</inline-code> module.</p>\n<p>The module provides us with a lot of different functions but for the moment we’ll focus on the following:</p>\n<ul>\n<li><inline-code>random()</inline-code> – It returns a random float value between <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0.0</mn></mrow><annotation encoding=\"application/x-tex\">0.0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span></span></span> (inclusive) and <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1.0</mn></mrow><annotation encoding=\"application/x-tex\">1.0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span></span></span> (exclusive)</li>\n<li><inline-code>randint(x, y)</inline-code> – It returns a random int value between x and y, both included.</li>\n</ul>\n<p>Each time your execute these functions, you will get a different value, try it!</p>\n<python>import random\nprint(random.random())  # 0.12826246225939641\n\nprint(random.random())  # 0.33797149195934817\n\nprint(random.randint(1, 10))  # 9\nprint(random.randint(1, 10))  # 1\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}