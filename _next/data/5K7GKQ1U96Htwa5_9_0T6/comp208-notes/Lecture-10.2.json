{"pageProps":{"titles":["2.1 — Programming Basics","2.2 — Variables, Arithmetic & String operations","2.3 — Function Calls, Expressions","3.1 — Defining functions, Errors & Debugging","3.2 — Boolean Expressions, Comparison & Logical Operators","3.3 — Conditional execution using if statement","3.4 — for loop & String indexing, slicing","Python Style Guide","4.1 — Escape Characters & Controlling print()","4.2 — String methods & in operator","4.3 — while statement & Nested loops","4.4 — return statement & Importing modules","5.1 — Scope of Variables","5.2 — Lists & List Operations","5.3 — List Functions & Methods","5.4 — Tuples","6.1 — Object Identity, Immutability, Unpacking","6.2 — Sets","6.3 — Dictionaries","7.1 — Nested data structures & comparisons","7.2 — Iterables & comprehensions","7.3 — Reading and writing files","8.1 — Default arguments & Modules","8.2 — Handling Exceptions","9.1 — Object Oriented Programming (OOP)","9.2 — More on methods & __str__","10.1 — NumPy","10.2 — Plotting using Matplotlib","Week 10 — More on NumPy"],"slugs":["Lecture-2.1","Lecture-2.2","Lecture-2.3.1","Lecture-3.1","Lecture-3.2","Lecture-3.3","Lecture-3.4","style-guide","Lecture-4.1","Lecture-4.2","Lecture-4.3","Lecture-4.4","Lecture-5.1","Lecture-5.2","Lecture-5.3","Lecture-5.4","Lecture-6.1","Lecture-6.2","Lecture-6.3","Lecture-7.1","Lecture-7.2","Lecture-7.3","Lecture-8.1","Lecture-8.2","Lecture-9.1","Lecture-9.2","Lecture-10.1","Lecture-10.2","Lecture-10.3"],"post":{"title":"10.2 — Plotting using Matplotlib","slug":"Lecture-10.2","content":"<h1>Matplotlib</h1>\n<ul>\n<li>Matplotlib is an extensive Python library commonly used to generate different types of plots.</li>\n<li>Matplotlib is an external library and to use it we have to install it.</li>\n<li>If you use Thonny, go to Tools -> Manage packages. Type matplotlib on the</li>\n</ul>\n<p>search bar and press “Find package from PyPI”. Then click Install.</p>\n<ul>\n<li>If you do not have Thonny, you can do so by typing the following commands in the terminal:\n<pre><code>python -m pip install -U pip  \npython -m pip install -U matplotlib  \n</code></pre>\n</li>\n</ul>\n<h2>matplotlib.pyplot</h2>\n<ul>\n<li>\n<p><inline-code>matplotlib.pyplot</inline-code> is a module in the package Matplotlib.</p>\n</li>\n<li>\n<p>This is the module we’ll be using to create plots.</p>\n</li>\n<li>\n<p>To use it, we first need to import it</p>\n<pre><code>import matplotlib.pyplot as plt\n</code></pre>\n</li>\n<li>\n<p>For more details: <a href=\"https://matplotlib.org/devdocs/api/pyplot_summary.html\">https://matplotlib.org/devdocs/api/pyplot_summary.html</a></p>\n</li>\n</ul>\n<h2>Example – A Line plot</h2>\n<p>We can use the function plot to create a line plot between the points in the input sequence.</p>\n<div class=\"flex\"><python>import matplotlib.pyplot as plt\n\nsome_numbers = [3, 1, 5, 2, 9, 3] \nplt.plot(some_numbers)\nplt.show() # display figure\n</python><img src=\"week10/line1.png\" style=\"width: 50%; margin-left: 2em;\"></div>\n<p>Note that:</p>\n<ul>\n<li>We have provided only one input to the function plot.</li>\n<li>If we do that, then the input values are going to be considered as the y-coordinates. Their corresponding x-coordinates are the indices of the list.</li>\n<li>In the example, we plot the following points: <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>3</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>5</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>4</mn><mo separator=\"true\">,</mo><mn>9</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>5</mn><mo separator=\"true\">,</mo><mn>3</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(0, 3), (1, 1), (2, 5), (3, 2), (4, 9), (5, 3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">5</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">9</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">5</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">)</span></span></span></span></span></li>\n</ul>\n<h2>Example - two inputs</h2>\n<div class=\"flex\"><python>import matplotlib.pyplot as plt\n\nx_coord = range(0, 10, 2)\ny_coord = [0, 0, 9, 8, 2]\nplt.plot(x_coord, y_coord)\nplt.show()\n</python><img src=\"week10/line2.png\" style=\"width: 50%; margin-left: 2em;\"></div>\n<h2>Example - a linear function</h2>\n<p>Using pyplot, we can plot the graph of the linear function <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>=</mo><mi>x</mi><mo>+</mo><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">y = x + 5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span></span></span></span></span>.</p>\n<div class=\"flex\"><python>import matplotlib.pyplot as plt\n\nx_coord = range(15)\ny_coord = [x + 5 for x in x_coord]\n\nplt.plot(x_coord, y_coord)\nplt.show()\n</python><img src=\"week10/linear.png\" style=\"width: 50%; margin-left: 2em;\"></div>\n<h2>Plot title and axis labels</h2>\n<p>We can add more information about our plots to the figure.</p>\n<ul>\n<li>\n<p><inline-code>plt.title(label)</inline-code>: takes as argument a string and adds the title label to the figure.</p>\n</li>\n<li>\n<p><inline-code>plt.xlabel(label)</inline-code>: takes as argument a string and sets the label for the x-axis.</p>\n</li>\n<li>\n<p><inline-code>plt.ylabel(label)</inline-code>: takes as argument a string and sets the label for the y-axis.</p>\n</li>\n<li>\n<p>We can choose the font size of the labels, by passing the info as argument as follows:</p>\n<pre><code>plt.title(\"First plot\", fontsize=22)\n</code></pre>\n</li>\n</ul>\n<div class=\"flex\"><python>import matplotlib.pyplot as plt\n\nx_coord = range(15)\ny_coord = [x + 5 for x in x_coord]\n    \nplt.plot(x_coord, y_coord)\n\nplt.title(\"First plot\", fontsize=20)\nplt.xlabel(\"x\", fontsize=14)\nplt.ylabel(\"y = x + 5\", fontsize=14)\n\nplt.show()\n</python><img src=\"week10/linear2.png\" style=\"width: 50%; margin-left: 2em;\"></div>\n<h2>Colors and markers</h2>\n<ul>\n<li>We can chose the style/color of the plots, the style/size of the markers, etc.</li>\n<li>Here is just a taste:</li>\n</ul>\n<div class=\"flex ml-2\"><img src=\"week10/colors.png\" style=\"width: 33%;\"><img src=\"week10/linestyles.png\" style=\"width: 33%; margin-left: 2em;\"><img src=\"week10/markers.png\" style=\"width: 33%; margin-left: 2em;\"></div>\n<p>You can check out the documentation here:<br>\n<a href=\"https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html\">https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html</a></p>\n<p>How to use these?</p>\n<ul>\n<li>The function plot can take as arguments one or two lists (for x and y coordinates) and a format string.</li>\n<li>The format string consists of three parts: <inline-code>[marker][line][color]</inline-code>. Each part is optional.</li>\n</ul>\n<div class=\"flex\"><python>import matplotlib.pyplot as plt\n\nsome_numbers = [3, 1, 5, 2, 9, 3]\n\n# circle marker, dashed line, green\nplt.plot(some_numbers, \"o--g\") \nplt.show() # display figure\n</python><img src=\"week10/colorplot.png\" style=\"width: 50%; margin-left: 2em;\"></div>\n<h2>Multiple plots in same figure</h2>\n<div class=\"flex\"><python>import matplotlib.pyplot as plt\nfrom math import sin, cos, radians\n\nx_coord = range(0, 540, 20)\ny_sin = [sin(radians(x)) for x in x_coord]\ny_cos = [cos(radians(x)) for x in x_coord]\n    \n# + marker, blue color and use label for legend\nplt.plot(x_coord, y_sin, '+b', label=\"sin(x)\")\n\n# magenta color and use label for legend\nplt.plot(x_coord, y_cos, 'm', label=\"cos(x)\")\n\nplt.legend()  # show legend\nplt.show()\n</python><img src=\"week10/twoplots.png\" style=\"width: 50%; margin: 2em 0 0 2em;\"></div>\n<h2>Saving a figure</h2>\n<ul>\n<li>We can use the function <inline-code>plt.savefig() </inline-code>to save the figure we created.</li>\n<li>The function takes as argument the file name (a string).</li>\n</ul>\n<python>import matplotlib.pyplot as plt\nfrom math import sin, radians\n\nx_coord = range(0, 540, 20)\ny_sin = [sin(radians(x)) for x in x_coord]\n\nplt.plot(x_coord, y_sin, 'm')\n\n# the figure won't be displayed, # but saved in y_sin.png \nplt.savefig(\"myplot.png\")\n</python>\n<h2>Bar Plots</h2>\n<p>When working with data that can be broken down into categories, it might be useful for us to use a bar plot instead.</p>\n<p>Consider the following example:</p>\n<python>import matplotlib.pyplot as plt\n\nmtl_pop = [1293992, 1080545, 1015420, 1016376, 1620693, 1704694]\nyears = ['1966', '1976', '1986', '1996', '2006', '2016']\n\nplt.bar(years, mtl_pop)\n\nplt.title(\"Population of Montreal\")\nplt.show()\n</python>\n<img src=\"week10/barplot.png\" style=\"width: 50%; margin: 0 0 0 2em;\">\n<h2>NumPy and Matplotlib</h2>\n<p>Matplotlib functions work with NumPy arrays as well.</p>\n<python>import numpy as np\nimport matplotlib.pyplot as plt\n\nx_values = np.linspace(0, 8, 501)\ny_values = np.sin(x_values ** 2)  # computes sin(x^2)\nplt.plot(x_values, y_values)\nplt.show()\n</python>\n<p><img style=\"display: block; margin: 3em auto; width: 15%;\" src=\"../assets/divider.svg\"></p>"}},"__N_SSG":true}