{"pageProps":{"allSlugs":[["Lecture-1",[{"title":"1 — Programming Basics","slug":"Lecture-1"}]],["Lecture-2.1",[{"title":"2.1 — Variables, Arithmetic & String operations","slug":"Lecture-2.1"}]],["Lecture-2.2",[{"title":"2.2 — Function calls, Defining functions, Types of Errors","slug":"Lecture-2.2"}]],["Lecture-3.1",[{"title":"3.1 — Order of Expression Evaluation, Comparing Values, Conditional Execution","slug":"Lecture-3.1"}]],["Lecture-3.2",[{"title":"3.2 — if statement, for loop, Indexing & Slicing Strings","slug":"Lecture-3.2"}]],["Lecture-4.1",[{"title":"4.1 — return vs. print, while statement, Modules","slug":"Lecture-4.1"}]],["Lecture-4.2",[{"title":"4.2 — String methods, break & continue statements","slug":"Lecture-4.2"}]],["Lecture-5.1",[{"title":"5.1 — Controlling print(), Nested Loops, Lists","slug":"Lecture-5.1"}]],["Lecture-5.2",[{"title":"5.2 — Scope of variables, List operations","slug":"Lecture-5.2"}]],["Lecture-6.1",[{"title":"6.1 — Tuples, Immutable objects, Sets","slug":"Lecture-6.1"}]],["Lecture-6.2",[{"title":"6.2 — More list & set operations, Dictionaries","slug":"Lecture-6.2"}]],["Lecture-7.1",[{"title":"7.1 — Iterables, Unpacking, Nested Lists","slug":"Lecture-7.1"}]],["Lecture-7.2",[{"title":"7.2 — Nested data structures, Comprehensions, Modules","slug":"Lecture-7.2"}]],["Lecture-8.1",[{"title":"8.1 — Nested list comprehensions, Reading & Writing Files","slug":"Lecture-8.1"}]],["Lecture-8.2",[{"title":"8.2 — Shallow vs. deep copy, Handling exceptions","slug":"Lecture-8.2"}]],["Lecture-9.1",[{"title":"9.1 — Object Oriented Programming (OOP)","slug":"Lecture-9.1"}]],["Lecture-9.2",[{"title":"9.2 — Keyword arguments, More on OOP","slug":"Lecture-9.2"}]],["Lecture-10.1",[{"title":"10.1 — NumPy","slug":"Lecture-10.1"}]],["Lecture-10.2",[{"title":"10.2 — More Numpy, Plotting using Matplotlib","slug":"Lecture-10.2"}]],["Lecture-11.1",[{"title":"11.1 — More Numpy, Linear algebra, Random numbers","slug":"Lecture-11.1"}]],["Lecture-11.2",[{"title":"11.2 — Interpolation, Curve fitting, Numerical Integration","slug":"Lecture-11.2"}]],["Lecture-12.1",[{"title":"12.1 — Using SciPy, System of Linear Equations","slug":"Lecture-12.1"}]],["Lecture-12.2",[{"title":"12.2 — Root Finding, Sorting algorithms","slug":"Lecture-12.2"}]]],"post":{"slug":"Lecture-10.1","content":"<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"what-is-numpy\">What is NumPy?</h2><ul>\n<li>The core library for scientific computing</li>\n<li>Provides a new data structure called an “array”\n<ul>\n<li>It is like a list, but more efficient</li>\n<li>Provides many functions that work with NumPy arrays</li>\n</ul>\n</li>\n<li><a href=\"https://numpy.org\">https://numpy.org</a></li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"installing-numpy\">Installing NumPy</h2><ul>\n<li>If you use Thonny, go to Tools -> Manage packages. Type <inline-code>numpy</inline-code> in the\nsearch bar and click “Search on PyPI”. Then click Install.</li>\n<li>If you do not have Thonny, you can do so by typing the following commands in the terminal:\n<pre><code>python -m pip install -U pip  \npython -m pip install -U numpy  \n</code></pre>\n</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"what-is-a-numpy-array\">What is a NumPy array?</h2><ul>\n<li>A NumPy array is a multidimensional collection/grid of items of same type .\n<ul>\n<li>Multidimensional: it could be a linear array (like a list e.g. vector) or a 2D array (like a list of lists e.g. matrix), 3D array etc.</li>\n</ul>\n</li>\n<li>Unlike a regular Python list,\n<ul>\n<li>All the values in a NumPy array must have the same type.</li>\n<li>A NumPy array’s size cannot be changed after creation.\n<ul>\n<li>All such operations that change the size (e.g. adding/removing items) result in a copy of the array.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"creating-an-array\">Creating an array</h2><python>import numpy as np\n\n# Create a NumPy array from a Python list\narr = np.array([1, 2, 3])\nprint(arr)  \n# [1 2 3] \n# note the lack of commas in the output\n\nprint(type(arr))  # &#x3C;class 'numpy.ndarray'>\n\n# convert a tuple object to numpy array\nx = np.array((1, 10, 100))\nprint(x)  # [ 1 10 100]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"\"></h2><p>We can specify the data type of elements when creating an array.</p><python>import numpy as np\n\n# these floats will be converted to ints (by truncation)\nx = np.array([1.2, 3.14, 10.65], dtype=int)\nprint(x)  # [ 1 3 10]\nprint(x.dtype)  # int64\n\n# We can also specify a NumPy-defined data type\nx = np.array([10, 20, 30], dtype=np.float64)\nprint(x)  # [10. 20. 30.]\nprint(x.dtype)  # float64\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"shape-and-dimensions-of-a-numpy-array\">Shape and dimensions of a NumPy array</h2><ul>\n<li>The number of dimensions is how many levels of nested arrays there are. e.g. 1D array, 2D array, etc. It can be obtained by accessing the <inline-code>ndim</inline-code> attribute.</li>\n<li><inline-code>shape</inline-code> attribute of a NumPy array is a tuple containing size/length in each dimension.</li>\n</ul><python>import numpy as np\n\nx = np.array([10, 20, 30])\n\nprint(x.ndim) # 1\nprint(x.shape) # (3,)\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-1\"></h2><python>import numpy as np\n\nx = np.array([[10, 20, 30], [40, 50, 60]])\nprint(x)\n# [[10 20 30]\n#  [40 50 60]]\n\nprint(x.ndim) # 2\nprint(x.shape) # (2, 3) &#x3C;-- row, col\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"indexing-a-numpy-array\">Indexing a NumPy array</h2><python>import numpy as np\n\narr = np.array([2, 4, 8])\nprint(arr[0], arr[1], arr[2])  # 2 4 8\n\n# we can modify existing elements.\narr[0] = 1\nprint(arr)  # [1 4 8]\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"other-ways-to-create-arrays\">Other ways to create arrays</h2><python>import numpy as np\n\n# create an array of 0's, with shape (2,).\nx = np.zeros(2)\nprint(x)\n# [0. 0.] \n# dots above mean float values\n\n# create an array of all 1's, with shape (3,),\n# of integer type.\ny = np.ones(3, dtype=int)\nprint(y)  # [1 1 1]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-2\"></h2><python># create an array of shape (5,) filled with one value\nx = np.full(5, 7)\nprint(x)\n# [7 7 7 7 7]\n\n# create an array of 4 random values in the interval [0.0, 1.0).\ny = np.random.random(4)\nprint(y)\n[0.70260439 0.68529032 0.59847495 0.88655089]\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"some-useful-numpy-functions\">Some useful numpy functions</h2><python>import numpy as np\n\n# Similar to the built-in range() function, \n# we can use arguments start, stop and step.\nx = np.arange(10)\nprint(x)\n# [0 1 2 3 4 5 6 7 8 9]\n\n# Unlike range(), float numbers are allowed.\nx = np.arange(10.0, 20.0, 2.5)\nprint(x)\n# [10.  12.5 15.  17.5]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-3\"></h2><p>When we want to create a list of evenly-spaced numbers, it is better to use <inline-code>np.linspace()</inline-code> than <inline-code>np.arange()</inline-code>.</p><python>import numpy as np\n\n# Create an array of 5 evenly spaced numbers in interval [0, 1]\nx = np.linspace(0, 1, 5)\nprint(x)\n# [0. 0.25 0.5 0.75 1. ]\n\n# 7 evenly spaced numbers in interval [10, 100]\nx = np.linspace(10, 100, 7)\nprint(x)\n# [ 10. 25. 40. 55. 70. 85. 100.]\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"broadcasting-operations\">Broadcasting operations</h2><ul>\n<li>An arithmetic operation between an array and a scalar (number) is applied to all elements of the array. It is known as <sc>broadcasting</sc>.</li>\n<li>It does not modify the given array; instead a new copy is created.</li>\n</ul><python>import numpy as np\narr = np.linspace(-1.0, 5.0, 7)\nprint(arr)  # [-1. 0. 1. 2. 3. 4. 5.]\n\n# Multiplication is broadcasted to each element.\nprint(arr * 6)  # [-6. 0. 6. 12. 18. 24. 30.]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-4\"></h2><python># Unary minus\nprint(-arr)\n# [ 1. -0. -1. -2. -3. -4. -5.]\n\n# Other operators work in same way\nprint(arr / 5)\n# [-0.2 0. 0.2 0.4 0.6 0.8 1. ]\n\nprint(arr + 4)\n# [3. 4. 5. 6. 7. 8. 9.]\n\nprint((arr + 3) * 2)\n# [ 4. 6. 8. 10. 12. 14. 16.]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-5\"></h2><p>Unlike Python lists, NumPy arrays implement operators such as <inline-code>*</inline-code> to perform arithmetic operations.</p><python>import numpy as np\n\nx = [1, 2, 3] # Python list\ny = x * 5\nprint(y)\n# [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\nx = np.array([1, 2, 3])\ny = x * 5\nprint(y)\n# [ 5 10 15]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-6\"></h2><p>NumPy also defines math functions that broadcast to all elements in the array.</p><python>import numpy as np\n\narr = np.linspace(-1.0, 5.0, 7)\n\nprint(np.sin(arr))\n# [-0.841 0. 0.841 0.909 0.141 -0.757 -0.959]\n\nprint(np.exp(arr)) # e^x function\n# [ 0.368 1. 2.718 7.389 20.086 54.598 148.413]\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"vector-operations\">Vector operations</h2><p>An arithmetic operation between arrays is done element-wise.  It is also called a <sc>vectorized</sc> operation.</p><python>import numpy as np\n\na = np.array([34.0, -12.0, 5.0])\nb = np.array([68.0, 5.0, 20.0])\nprint(a + b)  # [102. -7. 25.]\nprint(a / b)  # [ 0.5 -2.4 0.25]\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"example\">Example</h2><p>Write code to evaluate the expression below using NumPy:</p><div class=\"math math-display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>s</mi><mo>=</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>0</mn></mrow><mn>100</mn></munderover><msqrt><mfrac><mrow><mi>k</mi><mi>π</mi></mrow><mn>100</mn></mfrac></msqrt><mi>s</mi><mi>i</mi><mi>n</mi><mfrac><mrow><mi>k</mi><mi>π</mi></mrow><mn>100</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">s = \\sum_{k=0}^{100} \\sqrt{\\frac{k \\pi}{100}} sin \\frac{k \\pi}{100}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.1032em;vertical-align:-1.3021em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8011em;\"><span style=\"top:-1.8479em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">100</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3021em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6766em;\"><span class=\"svg-align\" style=\"top:-4.4em;\"><span class=\"pstrut\" style=\"height:4.4em;\"></span><span class=\"mord\" style=\"padding-left:1em;\"><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">100</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">kπ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span><span style=\"top:-3.6366em;\"><span class=\"pstrut\" style=\"height:4.4em;\"></span><span class=\"hide-tail\" style=\"min-width:1.02em;height:2.48em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"2.48em\" viewBox=\"0 0 400000 2592\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M424,2478\nc-1.3,-0.7,-38.5,-172,-111.5,-514c-73,-342,-109.8,-513.3,-110.5,-514\nc0,-2,-10.7,14.3,-32,49c-4.7,7.3,-9.8,15.7,-15.5,25c-5.7,9.3,-9.8,16,-12.5,20\ns-5,7,-5,7c-4,-3.3,-8.3,-7.7,-13,-13s-13,-13,-13,-13s76,-122,76,-122s77,-121,77,-121\ns209,968,209,968c0,-2,84.7,-361.7,254,-1079c169.3,-717.3,254.7,-1077.7,256,-1081\nl0 -0c4,-6.7,10,-10,18,-10 H400000\nv40H1014.6\ns-87.3,378.7,-272.6,1166c-185.3,787.3,-279.3,1182.3,-282,1185\nc-2,6,-10,9,-24,9\nc-8,0,-12,-0.7,-12,-2z M1001 80\nh400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7634em;\"><span></span></span></span></span></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">in</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">100</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">kπ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></div></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-7\"></h2><solution><python>import numpy as np\n\nk = np.arange(0, 101)\nx = k * (np.pi / 100)\ns = np.sum(np.sqrt(x) * np.sin(x))\nprint(s)  # 77.51389798916512\n</python></solution></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"comparing-the-performance-of-numpy-vs-pure-python-solution\">Comparing the performance of numpy vs pure python solution</h2><hgrid><python>import numpy as np\nimport time\n\nstart = time.time()\n\nN = 10000000\nk = np.arange(0, N+1)\nx = k * (np.pi / N)\ns = np.sum(np.sqrt(x) * np.sin(x))\nprint(s) \n\nprint(\"Time:\", time.time() - start)\n</python><python>import math\nimport time\n\nstart = time.time()\n\nN = 10000000\ns = 0\nfor k in range(0, N+1):\n    x = k * (math.pi / N)\n    s += math.sqrt(x) * math.sin(x)\nprint(s) \n\nprint(\"Time:\", time.time() - start)\n</python></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"slicing-numpy-arrays\">Slicing NumPy arrays</h2><p>Similar to lists, we can slice a 1D NumPy array.</p><python>import numpy as np\n\ny = np.array([0.0, 1.3, 5.0 , 10.9, 18.9, 28.7, 40.0])\nprint(y[1:4]) # print from index 1 until but not including index 4\n# [ 1.3 5. 10.9]\n\nprint(y[::-1]) # reversed copy\n# [40. 28.7 18.9 10.9 5. 1.3 0. ]\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"copying-numpy-arrays\">Copying NumPy arrays</h2><ul>\n<li>We can use the <inline-code>array.copy()</inline-code> method to get a copy of an array.</li>\n<li>Changes to the copy will not affect the original array.</li>\n</ul><hgrid><python>import numpy as np\n\na = np.array([[1, 2, 3], [4, 5, 6]])\n\nb = a.copy()\nb[1][2] = 100\n\nprint(a)\nprint(b)\n</python><output>[[1 2 3]\n [4 5 6]]\n[[  1   2   3]\n [  4   5 100]]\n</output></hgrid></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"matrix-in-form-of-a-2d-numpy-array\">Matrix in form of a 2D NumPy array</h2><python>import numpy as np\n\n# convert a list of lists into 2D NumPy array\nm = np.array([[1, 2, 3], [4, 5, 6]])\nprint(m)\n# [[1 2 3]\n#  [4 5 6]]\n\n# create an array of all 0's of shape (2, 2).\n# By default, dtype is float64.\nprint(np.zeros((2, 2))) # (2, 2) is a tuple.\n# [[0. 0.]\n#  [0. 0.]]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-8\"></h2><python>import numpy as np\n# create an array full of 7's, of shape (2, 3).\nprint(np.full((2, 3), 7))\n# [[7 7 7]\n#  [7 7 7]]\n\n# create an array of random values in interval [0, 1).\nprint(np.random.random((2, 2)))\n# [[0.1782372 0.35920979]\n#  [0.9368368 0.9005017 ]]\n\n# create an identity matrix of shape (3, 3).\nprint(np.eye(3))\n# [[1. 0. 0.]\n#  [0. 1. 0.]\n#  [0. 0. 1.]]\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"reshaping-arrays\">Reshaping arrays</h2><python>import numpy as np\n\n# We can also create a matrix from a 1D array, using np.reshape()\nc = np.arange(6)\nprint(c)  # [0 1 2 3 4 5]\n\n# change the shape to (2, 3).\nd = np.reshape(c, (2, 3))\nprint(d)\n# [[0 1 2]\n#  [3 4 5]]\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"indexing-a-2d-array\">Indexing a 2D array</h2><p>We can index into a multi-dimensional NumPy array by providing a comma-separated list of the indices.</p><python>import numpy as np\n\nm = np.array([[1, 2, 3], [4, 5, 6]])\nprint(m.shape)  # (2, 3)\n\nprint(m[0, 0])  # 1\nprint(m[0, 1])  # 2\nprint(m[1, 0])  # 4\nprint(m[1, 2])  # 6\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"matrix-2d-array-operations\">Matrix (2D array) operations</h2><python>import numpy as np\n\n# Broadcasting\nb = np.array([[1, 4, 5], [9, 7, 4]])\nprint(2 + b)\n# [[ 3 6 7]\n#  [11 9 6]]\n\nprint(np.sin(b))\n# [[ 0.841 -0.757 -0.959]\n#  [ 0.412 0.657 -0.757]]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-9\"></h2><python>import numpy as np\n\n# Element-wise product of matrices\nb = np.array([[1, 4, 5], [9, 7, 4]])\nc = np.array([[0, 1, 2], [3, 4, 5]])\n\n# Note: both matrices must have the same shape\nprint(b * c)\n# [[ 0 4 10]\n#  [27 28 20]]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-10\"></h2><p>To perform matrix multiplication, we use the dot() function.</p><python>import numpy as np\n\nb = np.array([[1, 4, 5], [9, 7, 4]])\nd = np.array([[ 4, 2], [ 9, 8], [-3, 6]])\n\n# shapes must be (M, N) dot (N, P) --> (M, P)\nprint(np.dot(b, d))\n# [[25 64]\n#  [87 98]]\n</python></slide>\n<slide class=\"slide-normal\"><h2 class=\"slide-title\" style=\"\" id=\"slicing-a-2d-array\">Slicing a 2D array</h2><img src=\"week10/slicing.png\" style=\"width: 85%; margin: 0.5em auto 0 auto\"><p><span class=\"ppt-f80\">(source: <a href=\"https://github.com/ContinuumIO/tutorials/blob/master/NumPy.pdf\">https://github.com/ContinuumIO/tutorials/blob/master/NumPy.pdf</a>)</span></p></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-11\"></h2><python>import numpy as np\n\na = np.array([[ 1,  2,  3,  4,  5,  6],\n              [11, 12, 13, 14, 15, 16],\n              [31, 32, 33, 34, 35, 36],\n              [41, 42, 43, 44, 45, 46],\n              [51, 52, 53, 54, 55, 56],\n              [61, 62, 63, 64, 65, 66]])\n\nprint(a[:, 1])\n# [ 2 12 32 42 52 62]\n\nprint(a[::2, ::3])\n# [[ 1  4]\n#  [31 34]\n#  [51 54]]\n</python></slide>\n<slide class=\"slide-notitle\"><h2 class=\"slide-title\" style=\"\" id=\"-12\"></h2><python>import numpy as np\n\na = np.array([[ 1,  2,  3,  4,  5,  6],\n              [11, 12, 13, 14, 15, 16],\n              [31, 32, 33, 34, 35, 36],\n              [41, 42, 43, 44, 45, 46],\n              [51, 52, 53, 54, 55, 56],\n              [61, 62, 63, 64, 65, 66]])\n\nprint(a[1, 2:5])\n# [13 14 15]\n\nprint(a[3:5, 4:6])\n# [[45 46]\n#  [55 56]]\n</python><divider></divider></slide>","title":"10.1 — NumPy","date":"2024-03-10","published":true,"section":"Lecture-10.1"}},"__N_SSG":true}