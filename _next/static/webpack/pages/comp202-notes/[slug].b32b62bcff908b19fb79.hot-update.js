webpackHotUpdate_N_E("pages/comp202-notes/[slug]",{

/***/ "./pages/comp202-notes/[slug].js":
/*!***************************************!*\
  !*** ./pages/comp202-notes/[slug].js ***!
  \***************************************/
/*! exports provided: __N_SSG, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__N_SSG\", function() { return __N_SSG; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Post; });\n/* harmony import */ var _emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/react/jsx-dev-runtime */ \"./node_modules/@emotion/react/jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/router */ \"./node_modules/next/router.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/error */ \"./node_modules/next/error.js\");\n/* harmony import */ var next_error__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_error__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/head */ \"./node_modules/next/head.js\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* harmony import */ var rehype_react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rehype-react */ \"./node_modules/rehype-react/index.js\");\n/* harmony import */ var rehype_react__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(rehype_react__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var rehype_parse__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rehype-parse */ \"./node_modules/rehype-parse/index.js\");\n/* harmony import */ var rehype_parse__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(rehype_parse__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var unified__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! unified */ \"./node_modules/unified/index.js\");\n/* harmony import */ var unified__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(unified__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var unist_util_visit__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! unist-util-visit */ \"./node_modules/unist-util-visit/index.js\");\n/* harmony import */ var unist_util_visit__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(unist_util_visit__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _components_python__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../components/python */ \"./components/python.js\");\n/* harmony import */ var _components_binary_numbers__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../components/binary-numbers */ \"./components/binary-numbers.js\");\n/* harmony import */ var _components_sidebar__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../components/sidebar */ \"./components/sidebar.js\");\n/* harmony import */ var _components_misc__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../components/misc */ \"./components/misc.js\");\n\n\n\nvar _jsxFileName = \"/Users/doctorzen/Projects/Summer2021/COMP202/teaching_python/comp202_lectures/pages/comp202-notes/[slug].js\",\n    _s = $RefreshSig$();\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction replaceRootTags(opts) {\n  return transform;\n\n  function transform(tree) {\n    unist_util_visit__WEBPACK_IMPORTED_MODULE_8___default()(tree, \"element\", visiter);\n  }\n\n  function visiter(node, index, parent) {\n    if (node.tagName !== \"html\" && node.tagName !== \"body\" && node.tagName !== \"head\") {\n      return;\n    }\n\n    node.tagName = \"div\";\n  }\n}\n\nvar rehypeProcessor = unified__WEBPACK_IMPORTED_MODULE_7___default()().use(rehype_parse__WEBPACK_IMPORTED_MODULE_6___default.a).use(replaceRootTags).use(rehype_react__WEBPACK_IMPORTED_MODULE_5___default.a, {\n  createElement: react__WEBPACK_IMPORTED_MODULE_9___default.a.createElement,\n  components: {\n    py: _components_python__WEBPACK_IMPORTED_MODULE_10__[\"InlinePython\"],\n    python: _components_python__WEBPACK_IMPORTED_MODULE_10__[\"BlockPython\"],\n    output: _components_python__WEBPACK_IMPORTED_MODULE_10__[\"Output\"],\n    sc: _components_misc__WEBPACK_IMPORTED_MODULE_13__[\"SmallCaps\"],\n    \"decimal-binary\": _components_binary_numbers__WEBPACK_IMPORTED_MODULE_11__[\"DecimalBinary\"],\n    \"binary-decimal\": _components_binary_numbers__WEBPACK_IMPORTED_MODULE_11__[\"BinaryDecimal\"],\n    ibox: _components_misc__WEBPACK_IMPORTED_MODULE_13__[\"IBox\"],\n    table: _components_misc__WEBPACK_IMPORTED_MODULE_13__[\"MyTable\"],\n    \"inline-code\": _components_misc__WEBPACK_IMPORTED_MODULE_13__[\"InlineCode\"],\n    blockquote: _components_misc__WEBPACK_IMPORTED_MODULE_13__[\"BlockQuote\"],\n    solution: _components_misc__WEBPACK_IMPORTED_MODULE_13__[\"Solution\"]\n  }\n});\nvar articleCss = false ? undefined : {\n  name: \"v4v22r-articleCss\",\n  styles: \"grid-area:main;font-family:Alegreya;font-weight:300;overflow:visible;h1{font-family:Lato;font-weight:300;font-size:1.4em;margin:2em 0 1em 0;}h2{font-family:Lato;font-weight:400;font-size:1.05em;margin-bottom:-0.25em;margin-top:2em;}h3{font-family:Lato;font-weight:400;font-size:1em;margin-bottom:-0.25em;margin-top:2em;}.code,code{font-family:Hack;font-size:0.8em;}.math-inline{font-size:0.8em;}.p0{padding:0;}.p1{padding:1rem;}.p2{padding:2rem;}.px2{padding-left:2rem;padding-right:2rem;}.px1{padding-left:1rem;padding-right:1rem;}.py025{padding-top:0.25rem;padding-bottom:0.25rem;}.py1{padding-top:1rem;padding-bottom:1rem;}.flex{display:flex;flex-direction:row;}.w-50{width:50%;}.my2{margin-top:2rem;margin-bottom:2rem;}.my3{margin-top:3rem;margin-bottom:3rem;}.center{text-align:center;}.bgblue{background-color:#cce5ff;}.bggreen{background-color:#d4edda;}.bgred{background-color:#f8d7da;}.bgyellow{background-color:#fff3cd;}.br5{border-radius:5px;}.bt1{border-top:1px solid black;}.sans{font-family:Lato;}.f-2{font-size:0.8em;};label:articleCss;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar __N_SSG = true;\n\nvar _ref = false ? undefined : {\n  name: \"uz96jj-Post\",\n  styles: \"grid-area:right;label:Post;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref2 = false ? undefined : {\n  name: \"9xxx7h-Post\",\n  styles: \"display:flex;align-items:center;justify-content:center;grid-area:head;font-family:Lato;font-weight:300;font-size:1.65em;padding:1em 0;line-height:1.5;label:Post;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref3 = false ? undefined : {\n  name: \"kampsl\",\n  styles: \"color:inherit;margin:0.5em 0;cursor:pointer;text-decoration:none;&:hover{text-decoration:underline;}\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref4 = false ? undefined : {\n  name: \"4u5k5i-Post\",\n  styles: \"grid-area:left;label:Post;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nvar _ref5 = false ? undefined : {\n  name: \"1h7qph0-Post\",\n  styles: \"font-size:1.5rem;font-kerning:normal;line-height:1.5em;display:grid;grid-template-areas:\\\"head head head\\\" \\\"left main right\\\";grid-template-columns:4em 50ch auto;grid-template-rows:auto 1fr;label:Post;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\nfunction Post(_ref6) {\n  _s();\n\n  var _this = this;\n\n  var post = _ref6.post,\n      titles = _ref6.titles,\n      slugs = _ref6.slugs;\n  var router = Object(next_router__WEBPACK_IMPORTED_MODULE_1__[\"useRouter\"])();\n\n  if (!router.isFallback && !(post !== null && post !== void 0 && post.slug)) {\n    return Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(next_error__WEBPACK_IMPORTED_MODULE_2___default.a, {\n      statusCode: 404\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 12\n    }, this);\n  }\n\n  var mdReact = rehypeProcessor.processSync(post.content).result;\n  return Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"Fragment\"], {\n    children: [Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(next_head__WEBPACK_IMPORTED_MODULE_3___default.a, {\n      children: Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"title\", {\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"main\", {\n      css: _ref5,\n      children: [Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"aside\", {\n        css: _ref4,\n        children: Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(_components_sidebar__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\n          children: titles.map(function (t, i) {\n            return Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"a\", {\n              href: \"\".concat(slugs[i], \".html\"),\n              css: _ref3,\n              children: t\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 15\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"header\", {\n        css: _ref2,\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"article\", {\n        css: articleCss,\n        children: mdReact\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"aside\", {\n        css: _ref\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Post, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [next_router__WEBPACK_IMPORTED_MODULE_1__[\"useRouter\"]];\n});\n\n_c = Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/next/dist/compiled/webpack/harmony-module.js */ \"./node_modules/next/dist/compiled/webpack/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/comp202-notes/[slug].js\n");

/***/ })

})